Option Explicit
Dim I       As Long
Dim j       As Long
Dim k       As Long
Dim counter As Integer

'Default QTY textboxes for all product categories
Dim qtyLight        As Integer
Dim qtyPendant      As Integer
Dim qtyAFIC         As Integer
Dim qtyAmicoAcc     As Integer
Dim qtyInt          As Integer
Dim qtySling        As Integer

Dim Cell    As Variant

'Declare dynamic array for product configs
Dim rg As Range
Dim P As Variant
Dim X As Long
Dim Y As Long
Dim opmLightFormula     As String
Dim opmExamLightFormula     As String
Dim opmPFixedFormula     As String
Dim opmPMotorisedFormula     As String
Dim opmInfFormula     As String
Dim opmAmicoFormula     As String
Dim opmIntFormula     As String
Dim opmSlingFormula   As String

Dim result As String
Dim Query As String

'Variables for total QTYs
Dim lightQTY                   As Integer
Dim pendantQTY                 As Integer

'Variables for dynamic array
Dim size                       As Integer

'Variables for comboboxes
'Rooms
Dim roomDesc()                 As String

'Lights
Dim iCE30mDesc()                As String
Dim LightSingleArm()      As String
Dim LightDualArm()        As String
Dim LightTripleArm()      As String
Dim LightQuadArm()        As String
Dim LightMobile()         As String
Dim LightSplit(1 To 1)          As String
Dim LightMira()          As String
Dim LightVega()          As String
Dim LightMSL()          As String

'Count light cells that contain "0" in description to determine number of light heads
Dim iLHead                As Integer

'Count number of non-HD Camera Ready light heads
Dim iNCRLHead             As Integer

'Pendants
Dim PendantSoloDescription()    As String
Dim PendantTandemDescription()  As String
Dim ArmConfigFSingle()    As String
Dim ArmConfigFDouble()    As String
Dim ArmConfigTFDouble()   As String
Dim ArmConfigMSingle()    As String
Dim ArmConfigMDouble()    As String
Dim ArmConfigTMDouble()   As String
Dim ArmConfigICU()        As String
Dim ConsoleHammer(1)       As String
Dim ConsoleVertical()     As String
Dim ConsoleLMC()          As String

'AF Crating
Dim AFCrating()     As String
Dim iAF23           As Integer
Dim iAF33           As Integer
Dim iAF43           As Integer
Dim iOBSingle           As Integer
Dim iOBTandem           As Integer
Dim AFCratingRow        As Long
Dim FindAFCratingRow    As Range

'Variables for 'bookmarked' rows
'First and last row for Room Description in Variable worksheet
Dim firstRoomDescRow        As Long
Dim lastRoomDescRow         As Long
Dim FindLastRoomDescRow     As Range
Dim FindFirstRoomDescRow    As Range

'First and last row for Light (iCE30m) Description in Variable worksheet
Dim firstLiCE30DescRow        As Long
Dim lastLiCE30DescRow         As Long
Dim FindLastLiCE30DescRow     As Range
Dim FindFirstLiCE30DescRow    As Range

'First and last row for Pendant Description in Variable worksheet
Dim firstPSoloDescRow           As Long
Dim lastPSoloDescRow            As Long
Dim firstPTandemDescRow         As Long
Dim lastPTandemDescRow          As Long
Dim FindLastPSoloDescRow        As Range
Dim FindFirstPSoloDescRow       As Range
Dim FindLastPTandemDescRow      As Range
Dim FindFirstPTandemDescRow     As Range

'First and last row for AF Crating in Variable worksheet
Dim firstAFCratingRow        As Long
Dim lastAFCratingRow         As Long
Dim FindLastAFCratingRow     As Range
Dim FindFirstAFCratingRow    As Range

'First and last row for Pendant Arm Configs in StandardList worksheet
Dim firstArmConfigFSingleRow        As Long
Dim FindFirstArmConfigFSingleRow    As Range
Dim lastArmConfigFSingleRow         As Long
Dim FindLastArmConfigFSingleRow     As Range
Dim firstArmConfigFDoubleRow        As Long
Dim FindFirstArmConfigFDoubleRow    As Range
Dim lastArmConfigFDoubleRow         As Long
Dim FindLastArmConfigFDoubleRow     As Range
Dim firstArmConfigTFDoubleRow       As Long
Dim FindFirstArmConfigTFDoubleRow   As Range
Dim lastArmConfigTFDoubleRow        As Long
Dim FindLastArmConfigTFDoubleRow    As Range
Dim firstArmConfigMSingleRow        As Long
Dim FindFirstArmConfigMSingleRow    As Range
Dim lastArmConfigMSingleRow         As Long
Dim FindLastArmConfigMSingleRow     As Range
Dim firstArmConfigMDoubleRow        As Long
Dim FindFirstArmConfigMDoubleRow    As Range
Dim lastArmConfigMDoubleRow         As Long
Dim FindLastArmConfigMDoubleRow     As Range
Dim firstArmConfigTMDoubleRow       As Long
Dim FindFirstArmConfigTMDoubleRow   As Range
Dim lastArmConfigTMDoubleRow        As Long
Dim FindLastArmConfigTMDoubleRow    As Range
Dim firstArmConfigICURow            As Long
Dim FindFirstArmConfigICURow        As Range
Dim lastArmConfigICURow             As Long
Dim FindLastArmConfigICURow         As Range

'First and last row for Pendant Consoles in StandardList worksheet
Dim firstConsoleVerticalRow         As Long
Dim FindFirstConsoleVerticalRow     As Range
Dim lastConsoleVerticalRow          As Long
Dim FindLastConsoleVerticalRow      As Range
Dim firstConsoleLMCRow              As Long
Dim FindFirstConsoleLMCRow          As Range
Dim lastConsoleLMCRow               As Long
Dim FindLastConsoleLMCRow           As Range

'First and last row for Light - iCE30m in StandardList worksheet
Dim firstSingleArmRow         As Long
Dim lastSingleArmRow         As Long
Dim firstDualArmRow         As Long
Dim lastDualArmRow         As Long
Dim firstTripleArmRow         As Long
Dim lastTripleArmRow         As Long
Dim firstQuadArmRow         As Long
Dim lastQuadArmRow         As Long
Dim FindFirstSingleArmRow    As Range
Dim FindLastSingleArmRow    As Range
Dim FindFirstDualArmRow    As Range
Dim FindLastDualArmRow    As Range
Dim FindFirstTripleArmRow    As Range
Dim FindLastTripleArmRow    As Range
Dim FindFirstQuadArmRow    As Range
Dim FindLastQuadArmRow    As Range

'First and last row for Light - Mobile in StandardList worksheet
Dim firstMobileRow         As Long
Dim lastMobileRow         As Long
Dim FindFirstMobileRow    As Range
Dim FindLastMobileRow    As Range

'First and last row for Mira 70/110 in StandardList worksheet
Dim firstMiraRow         As Long
Dim lastMiraRow         As Long
Dim FindFirstMiraRow    As Range
Dim FindLastMiraRow    As Range

'First and last row for Vega 80 in StandardList worksheet
Dim firstVegaRow         As Long
Dim lastVegaRow         As Long
Dim FindFirstVegaRow    As Range
Dim FindLastVegaRow    As Range

'First and last row for MSL in StandardList worksheet
Dim firstMSLRow         As Long
Dim lastMSLRow         As Long
Dim FindFirstMSLRow    As Range
Dim FindLastMSLRow    As Range

'First and last row for Configurator section in Proposal worksheet
Dim firstRow        As Long
Dim lastRow         As Long
Dim FindFirstRow    As Range
Dim FindLastRow     As Range
Dim ConfigRange     As String

'First and last row for Light "templates" to be copied to Configurator section
Dim firstLightRow         As Long
Dim lastLightRow          As Long
Dim FindFirstLightRow     As Range
Dim FindLastLightRow      As Range

'First and last row for Pendant Solo and Pendant Tandem "templates" to be copied to Configurator section
Dim firstPendantSoloRow         As Long
Dim lastPendantSoloRow          As Long
Dim firstPendantTandemRow       As Long
Dim lastPendantTandemRow        As Long
Dim FindFirstPendantSoloRow     As Range
Dim FindLastPendantSoloRow      As Range
Dim FindFirstPendantTandemRow   As Range
Dim FindLastPendantTandemRow    As Range

'First and last row for Amico Accessories to be copied to Configurator section
Dim firstAmicoAccRow         As Long
Dim lastAmicoAccRow          As Long
Dim amicoAccHeadingRow       As Long
Dim FindFirstAmicoAccRow     As Range
Dim FindLastAmicoAccRow      As Range
Dim FindAmicoAccHeadingRow       As Range

'First and last row for Slings to be copied to Configurator section
Dim firstSlingRow         As Long
Dim lastSlingRow          As Long
Dim slingHeadingRow       As Long
Dim FindFirstSlingRow     As Range
Dim FindLastSlingRow      As Range
Dim FindSlingHeadingRow       As Range

'First and last row for Light Accessories in Configurator worksheet
Dim firstLiCEAccRow    As Long
Dim lastLiCEAccRow     As Long
Dim firstLMiraAccRow    As Long
Dim lastLMiraAccRow     As Long
Dim FindFirstLiCEAccRow As Range
Dim FindLastLiCEAccRow As Range
Dim FindFirstLMiraAccRow As Range
Dim FindLastLMiraAccRow As Range

'First and last row for Pendant Accessories in Configurator worksheet
Dim firstPAccRow    As Long
Dim lastPAccRow     As Long
Dim FindFirstPAccRow As Range
Dim FindLastPAccRow As Range

'First and last row for Amico Accessories in Configurator worksheet
Dim firstConfigAmicoAccRow         As Long
Dim lastConfigAmicoAccRow          As Long
Dim FindFirstConfigAmicoAccRow     As Range
Dim FindLastConfigAmicoAccRow      As Range

'First and last row for AF+IC in Configurator worksheet
Dim firstConfigAFLEDRow             As Long
Dim lastConfigAFLEDRow              As Long
Dim firstConfigAccRow           As Long
Dim lastConfigAccRow            As Long
Dim firstConfigInGridRow           As Long
Dim lastConfigInGridRow            As Long
Dim firstConfigIndCompRow           As Long
Dim lastConfigIndCompRow            As Long
Dim FindFirstConfigAFLEDRow         As Range
Dim FindLastConfigAFLEDRow          As Range
Dim FindFirstConfigAccRow         As Range
Dim FindLastConfigAccRow          As Range
Dim FindFirstConfigInGridRow        As Range
Dim FindLastConfigInGridRow         As Range
Dim FindFirstConfigIndCompRow       As Range
Dim FindLastConfigIndCompRow        As Range

'First and last row for Digital Integration in Configurator worksheet
Dim firstConfigDISMRow             As Long
Dim lastConfigDISMRow              As Long
Dim firstConfigDIWDRow           As Long
Dim lastConfigDIWDRow            As Long
Dim firstConfigDIRIRow           As Long
Dim lastConfigDIRIRow            As Long
Dim firstConfigDITPRow           As Long
Dim lastConfigDITPRow            As Long
Dim firstConfigDIRCRow             As Long
Dim lastConfigDIRCRow              As Long
Dim firstConfigDIAudioRow           As Long
Dim lastConfigDIAudioRow            As Long
Dim firstConfigDIOtherAccRow           As Long
Dim lastConfigDIOtherAccRow            As Long
Dim firstConfigDICableRow           As Long
Dim lastConfigDICableRow            As Long
Dim FindFirstConfigDISMRow         As Range
Dim FindLastConfigDISMRow          As Range
Dim FindFirstConfigDIWDRow         As Range
Dim FindLastConfigDIWDRow          As Range
Dim FindFirstConfigDIRIRow        As Range
Dim FindLastConfigDIRIRow         As Range
Dim FindFirstConfigDITPRow       As Range
Dim FindLastConfigDITPRow        As Range
Dim FindFirstConfigDIRCRow         As Range
Dim FindLastConfigDIRCRow          As Range
Dim FindFirstConfigDIAudioRow         As Range
Dim FindLastConfigDIAudioRow          As Range
Dim FindFirstConfigDIOtherAccRow        As Range
Dim FindLastConfigDIOtherAccRow         As Range
Dim FindFirstConfigDICableRow       As Range
Dim FindLastConfigDICableRow        As Range

'First and last row for Slings in Configurator worksheet
Dim firstConfigSlingRow         As Long
Dim lastConfigSlingRow          As Long
Dim FindFirstConfigSlingRow     As Range
Dim FindLastConfigSlingRow      As Range

'First and last row for Light line items in Configurator section
Dim firstLightSectionRow          As Long
Dim lastLightSectionRow           As Long
Dim FindFirstLightSectionRow    As Range
Dim FindLastLightSectionRow     As Range

'First and last row for Pendant line items in Configurator section
Dim firstPendantSectionRow          As Long
Dim lastPendantSectionRow           As Long
Dim FindFirstPendantSectionRow      As Range
Dim FindLastPendantSectionRow       As Range

'First and last row for both Console 1 and Console 2 for a Pendant Tandem
Dim firstConsole1Row        As Long
Dim lastConsole1Row         As Long
Dim firstConsole2Row        As Long
Dim lastConsole2Row         As Long
Dim FindFirstConsole1Row    As Range
Dim FindLastConsole1Row     As Range
Dim FindFirstConsole2Row    As Range
Dim FindLastConsole2Row     As Range

'First and last row for AF+IC line items in Configurator section
Dim firstInfrastructureSectionRow          As Long
Dim lastInfrastructureSectionRow           As Long
Dim FindFirstInfrastructureSectionRow    As Range
Dim FindLastInfrastructureSectionRow     As Range

'First and last row for Integration line items in Configurator section
Dim firstIntegrationSectionRow          As Long
Dim lastIntegrationSectionRow           As Long
Dim FindFirstIntegrationSectionRow    As Range
Dim FindLastIntegrationSectionRow     As Range

'First and last row for Amico Accessories line items in Configurator section
Dim firstAmicoAccSectionRow          As Long
Dim lastAmicoAccSectionRow           As Long
Dim FindFirstAmicoAccSectionRow    As Range
Dim FindLastAmicoAccSectionRow     As Range
        
'First and last row for Sling line items in Configurator section
Dim firstSlingSectionRow          As Long
Dim lastSlingSectionRow           As Long
Dim FindFirstSlingSectionRow    As Range
Dim FindLastSlingSectionRow     As Range

'Row to insert Lights
Dim lightRow As Long
Dim FindLightRow As Range

'Row to insert Pendant
Dim pendantRow      As Long
Dim FindPendantRow  As Range

'Row to insert Infrastructure
Dim infrastructureRow As Long
Dim FindInfrastructureRow As Range

'Row to insert Integration
Dim integrationRow As Long
Dim FindIntegrationRow As Range

'Row to insert Amico Accessories
Dim amicoAccRow As Long
Dim FindAmicoAccRow As Range

'Row to insert Slings
Dim slingRow As Long
Dim FindSlingRow As Range

'Row to insert configuration in Tables worksheet to be exported to Word
Dim configuratorRow         As Long
Dim configuratorEndRow      As Long
Dim FindConfiguratorRow     As Range
Dim FindConfiguratorEndRow  As Range

'Row to insert configuration below Pricing Summary
Dim configuratorTableRow        As Long
Dim configuratorTableEndRow     As Long
Dim FindConfiguratorTableRow    As Range
Dim FindConfiguratorTableEndRow As Range

'Rows to insert Room Configuration headings
Dim firstRoom8ConfigRow     As Long
Dim lastRoom8ConfigRow      As Long
Dim room8ConfigRow          As Long
Dim FindFirstRoom8ConfigRow     As Range
Dim FindLastRoom8ConfigRow      As Range
Dim FindRoom8ConfigRow          As Range

'Variable to store Subtotal and Discounted Sell Price for room
Dim roomLightDisSubtotal        As String
Dim roomExamLightDisSubtotal        As String
Dim roomPendantDisSubtotal        As String
Dim roomPendantMDisSubtotal        As String
Dim roomIntDisSubtotal        As String
Dim roomInfDisSubtotal        As String
Dim roomAmicoDisSubtotal        As String
Dim roomSlingDisSubtotal        As String

'Row to insert Configurator for What-If table
Dim whatIfRow               As Long
Dim FindWhatIfRow           As Range
Dim whatIfStartRow               As Long
Dim FindWhatIfStartRow           As Range

'Variable for Room 8's range to search for rows
Dim Rm8Range    As String

'Variable to store image
Dim s   As Shape

'Installation variables
'Lights
Dim installL1   As String

'Pendants
Dim installP1   As String

'Integration
Dim installI1   As String

'AF+IC
Dim installIF1   As String

'
'Close button - Saves, export, and close the Configurator
'
Private Sub CancelButton_Click()
Call OKButton_Click

If Range("ViewMode").Value = "BDM" Or Range("ViewMode").Value = "Management" Then
    Protect
Else
    Unprotect
End If

'Show Configurator userform (Room 8) and rename the caption for Room 8 tab
ConfiguratorUserForm.MultiPage6.Pages("Room8").Caption = Controls("Room8Name").Value

'Reflect the Room No onto the main config page (for the next time Configurator is opened)
If Sheets("Configurator").Range("RoomQty") < 8 Then
    Sheets("Configurator").Range("RoomQty") = 8
End If

ConfiguratorUserForm.MultiPage6.Value = 0
Unload Configurator_Room8

End Sub
'
'Re-Initialize the Configurator for the current page (Light)
'
Private Sub ClearButtonL1_Click()
    X = LBound(P, 2)
    Call LightClear(1)
    Call LightCategory
    'Re-caption the page
    MultiPage3.Pages("Light1").Caption = "Light 1"
End Sub

Private Sub ClearButtonL2_Click()
    X = LBound(P, 2) + 1
    Call LightClear(2)
    Call LightCategory
    'Re-caption the page
    MultiPage3.Pages("Light2").Caption = "Light 2"
End Sub

Private Sub ClearButtonL3_Click()
    X = LBound(P, 2) + 2
    Call LightClear(3)
    Call LightCategory
    'Re-caption the page
    MultiPage3.Pages("Light3").Caption = "Light 3"
End Sub

Private Sub ClearButtonL4_Click()
    X = LBound(P, 2) + 3
    Call LightClear(4)
    Call LightCategory
    'Re-caption the page
    MultiPage3.Pages("Light4").Caption = "Light 4"
End Sub

Private Sub ClearButtonL5_Click()
    X = LBound(P, 2) + 4
    Call LightClear(5)
    Call LightCategory
    'Re-caption the page
    MultiPage3.Pages("Light5").Caption = "Light 5"
End Sub
'
'Re-Initialize the Configurator for the current page (Pendant)
'
Private Sub ClearButtonP1_Click()
    X = LBound(P, 2)
    Call PendantClear(1)
    Call PendantCategory
    'Re-caption the page
    MultiPage2.Pages("Pendant1").Caption = "Pendant 1"
End Sub

Private Sub ClearButtonP2_Click()
    X = LBound(P, 2) + 1
    Call PendantClear(2)
    Call PendantCategory
    'Re-caption the page
    MultiPage2.Pages("Pendant2").Caption = "Pendant 2"
End Sub

Private Sub ClearButtonP3_Click()
    X = LBound(P, 2) + 2
    Call PendantClear(3)
    Call PendantCategory
    'Re-caption the page
    MultiPage2.Pages("Pendant3").Caption = "Pendant 3"
End Sub

Private Sub ClearButtonP4_Click()
    X = LBound(P, 2) + 3
    Call PendantClear(4)
    Call PendantCategory
    'Re-caption the page
    MultiPage2.Pages("Pendant4").Caption = "Pendant 4"
End Sub

Private Sub ClearButtonP5_Click()
    X = LBound(P, 2) + 4
    Call PendantClear(5)
    Call PendantCategory
    'Re-caption the page
    MultiPage2.Pages("Pendant5").Caption = "Pendant 5"
End Sub
'
'Re-Initialize the Configurator for the current page (ACCESSORIES)
'
Private Sub ClearButtonAccessories_Click()
    Call AccessoriesClear
    Call AmicoCategory
End Sub
'
'Re-Initialize the Configurator for the current page (AF + IC)
'
Private Sub ClearButtonAFIC_Click()
    Call AFICClear
    Call AFCategory
End Sub
'
'Re-Initialize the Configurator for the current page (Digital Integration)
'
Private Sub ClearButtonInt_Click()
    Call IntegrationClear
    Call DICategory
End Sub
'
'Re-Initialize the Configurator for the current page (Slings)
'
Private Sub ClearButtonSling_Click()
    Call SlingClear
    Call SlingCategory
End Sub
'
'Re-Initialize the Configurator for the current page (PNote)
'
Private Sub ClearButtonPNote_Click()
    Call PNoteClear
    Call PNoteCategory
End Sub
'
'Re-Initialize the entire Configurator
'
Private Sub ClearButton_Click()
    'Clear lights & pendants config pages
    For X = LBound(P, 2) To UBound(P, 2)
        Call LightClear
        Call PendantClear
    Next X
    
    'Clear the rest of the config pages
    Call AccessoriesClear
    Call AFICClear
    Call IntegrationClear
    Call SlingClear
    Call PNoteClear
    
    'Re-initialize UserForm
    Call UserForm_Initialize
End Sub

Private Sub LightClear(productInt As Integer)
'Lights section - up to 5

    With Sheets("Configurator")
    
        'Clear textboxes and options
        .Range("LightRm8Qty") = productInt
        
        .Range("L" & P(1, X) & "Rm8Type") = "iCE 30m"
        .Range("L" & P(1, X) & "Rm8Name") = ""
        .Range("L" & P(1, X) & "Rm8Qty") = ""
        .Range("L" & P(1, X) & "Rm8Desc") = ""
        .Range("L" & P(1, X) & "Rm8iCE") = ""
        .Range("L" & P(1, X) & "Rm8CamAdder") = ""
        .Range("L" & P(1, X) & "Rm84KCam") = ""
        .Range("L" & P(1, X) & "Rm8Vega") = ""
        .Range("L" & P(1, X) & "Rm8Mira") = ""
        .Range("L" & P(1, X) & "Rm8Gamma") = ""
    
        'Initialize Options
        .Range("L" & P(1, X) & "Rm8Single") = False
        .Range("L" & P(1, X) & "Rm8Dual") = False
        .Range("L" & P(1, X) & "Rm8Triple") = False
        .Range("L" & P(1, X) & "Rm8Quad") = False
        .Range("L" & P(1, X) & "Rm8Mobile") = False
        .Range("L" & P(1, X) & "Rm8Split") = False
        
        'Clear Accessories for iCE30m Lights
         For I = firstLiCEAccRow To lastLiCEAccRow
            .Range(P(2, X) & I).Value = ""
         Next I
         
         'Clear Accessories for Mira Lights
         For I = firstLMiraAccRow To lastLMiraAccRow
            .Range(P(2, X) & I).Value = ""
         Next I
    End With

    'Clear QTY textboxes
    For I = 0 To qtyLight
        Controls("L" & P(1, X) & "_Acc_Qty" & I).Value = ""
    Next I

    'Clear accessories list
    Controls("Light" & P(1, X) & "AccSel").Clear
    Controls("Light" & P(1, X) & "Acc").Clear
End Sub

Private Sub PendantClear(productInt As Integer)
'Pendants Section - up to 5

    With Sheets("Configurator")
    
        'Clear textboxes and options
        .Range("PendantRm8Qty") = productInt

        .Range("P" & P(1, X) & "Rm8Type") = "Solo"
        .Range("P" & P(1, X) & "Rm8Name") = ""
        .Range("P" & P(1, X) & "Rm8Qty") = ""
        .Range("P" & P(1, X) & "Rm8Desc") = ""
        
        'Initialize Options
        'Console 1
        .Range("P" & P(1, X) & "Rm8Con1ArmSingle") = False
        .Range("P" & P(1, X) & "Rm8Con1ArmDual") = False
        
        .Range("P" & P(1, X) & "Rm8Con1ArmFixed") = False
        .Range("P" & P(1, X) & "Rm8Con1ArmMotorised") = False
        
        .Range("P" & P(1, X) & "Rm8Con1Hammer") = False
        .Range("P" & P(1, X) & "Rm8Con1Vertical") = False
        .Range("P" & P(1, X) & "Rm8Con1LMC") = False
        
        'Console 2
        .Range("P" & P(1, X) & "Rm8Con2Hammer") = False
        .Range("P" & P(1, X) & "Rm8Con2Vertical") = False
        .Range("P" & P(1, X) & "Rm8Con2LMC") = False
        
        'Outlets and data
        'Console 1
        .Range("P" & P(1, X) & "Rm8Con1ArmConfig") = ""
        .Range("P" & P(1, X) & "Rm8Con1Console") = ""
        .Range("P" & P(1, X) & "Rm8Con1Suction") = ""
        .Range("P" & P(1, X) & "Rm8Con1MedAir") = ""
        .Range("P" & P(1, X) & "Rm8Con1CO2") = ""
        .Range("P" & P(1, X) & "Rm8Con1N2O") = ""
        .Range("P" & P(1, X) & "Rm8Con1Oxygen") = ""
        .Range("P" & P(1, X) & "Rm8Con1ToolAir") = ""
        .Range("P" & P(1, X) & "Rm8Con1Scavenge") = ""
        .Range("P" & P(1, X) & "Rm8Con1UPS") = ""
        .Range("P" & P(1, X) & "Rm8Con1ESS_10") = ""
        .Range("P" & P(1, X) & "Rm8Con1ESS_15") = ""
        .Range("P" & P(1, X) & "Rm8Con1ESS_20") = ""
        .Range("P" & P(1, X) & "Rm8Con1Power") = ""
        .Range("P" & P(1, X) & "Rm8Con1RCD") = ""
        .Range("P" & P(1, X) & "Rm8Con1Earth") = ""
        .Range("P" & P(1, X) & "Rm8Con1AV") = ""
        .Range("P" & P(1, X) & "Rm8Con1DataRun") = ""
        .Range("P" & P(1, X) & "Rm8Con1Dia68") = ""
    
        'Console 2
        .Range("P" & P(1, X) & "Rm8Con2Console") = ""
        .Range("P" & P(1, X) & "Rm8Con2Suction") = ""
        .Range("P" & P(1, X) & "Rm8Con2MedAir") = ""
        .Range("P" & P(1, X) & "Rm8Con2CO2") = ""
        .Range("P" & P(1, X) & "Rm8Con2N2O") = ""
        .Range("P" & P(1, X) & "Rm8Con2Oxygen") = ""
        .Range("P" & P(1, X) & "Rm8Con2ToolAir") = ""
        .Range("P" & P(1, X) & "Rm8Con2Scavenge") = ""
        .Range("P" & P(1, X) & "Rm8Con2UPS") = ""
        .Range("P" & P(1, X) & "Rm8Con2ESS_10") = ""
        .Range("P" & P(1, X) & "Rm8Con2ESS_15") = ""
        .Range("P" & P(1, X) & "Rm8Con2ESS_20") = ""
        .Range("P" & P(1, X) & "Rm8Con2Power") = ""
        .Range("P" & P(1, X) & "Rm8Con2RCD") = ""
        .Range("P" & P(1, X) & "Rm8Con2Earth") = ""
        .Range("P" & P(1, X) & "Rm8Con2AV") = ""
        .Range("P" & P(1, X) & "Rm8Con2DataRun") = ""
        .Range("P" & P(1, X) & "Rm8Con2Dia68") = ""
        
        'Clear Accessories for Pendants
        For I = firstPAccRow To lastPAccRow
            .Range(P(2, X) & I).Value = ""
        Next I
    End With
    
    'Clear QTY textboxes
    For I = 0 To qtyPendant
        Controls("P" & P(1, X) & "_Acc_Qty" & I).Value = ""
    Next I
        
    'Clear accessories list
    Controls("Pendant" & P(1, X) & "AccSel").Clear
    Controls("Pendant" & P(1, X) & "Acc").Clear
End Sub

Private Sub AccessoriesClear()
'ACCESSORIES SECTION

    With Sheets("Configurator")
    
        'Clear option
        .Range("AmicoOptionRm8") = False
        
        'Clear Accessories
        For I = firstConfigAmicoAccRow To lastConfigAmicoAccRow
            .Range("J" & I).Value = ""
        Next I
    End With

    'Clear QTY textboxes
    For I = 0 To qtyAmicoAcc
        Controls("Amico_Acc_Qty" & I).Value = ""
    Next I
        
    'Clear accessories list
    Controls("AmicoAccSel").Clear
    Controls("AmicoAcc").Clear
End Sub

Private Sub AFICClear()
'AirFRAME + IC SECTION

    With Sheets("Configurator")
    
        'Clear option
        .Range("AFICOptionRm8") = False
        
        'Clear selected line items
        For I = firstConfigAFLEDRow To lastConfigAFLEDRow
            .Range("J" & I).Value = ""
        Next I
        
        For I = firstConfigAccRow To lastConfigAccRow
            .Range("J" & I).Value = ""
        Next I
    
        For I = firstConfigInGridRow To lastConfigInGridRow
            .Range("J" & I).Value = ""
        Next I
        
        For I = firstConfigIndCompRow To lastConfigIndCompRow
            .Range("J" & I).Value = ""
        Next I
    End With

    'Clear QTY textboxes
    For I = 0 To qtyAFIC
        Controls("AF_IC_Qty" & I).Value = ""
    Next I

    'Clear listboxes
    Controls("AF_IC_Sel").Clear
    Controls("AirFRAME_LEDiffuser").Clear
    Controls("InfAccessories").Clear
    Controls("In_GridIndigoClean").Clear
    Controls("IndigoComponent").Clear
End Sub

Private Sub IntegrationClear()
'Digital Integration SECTION

    With Sheets("Configurator")
    
        'Clear option
        .Range("DIOptionRm8") = False
        
        'Clear selected line items
        For I = firstConfigDISMRow To lastConfigDISMRow
            .Range("J" & I).Value = ""
        Next I
        
        For I = firstConfigDIWDRow To lastConfigDIWDRow
            .Range("J" & I).Value = ""
        Next I
    
        For I = firstConfigDIRIRow To lastConfigDIRIRow
            .Range("J" & I).Value = ""
        Next I
        
        For I = firstConfigDITPRow To lastConfigDITPRow
            .Range("J" & I).Value = ""
        Next I
        
        For I = firstConfigDIRCRow To lastConfigDIRCRow
            .Range("J" & I).Value = ""
        Next I
        
        For I = firstConfigDIAudioRow To lastConfigDIAudioRow
            .Range("J" & I).Value = ""
        Next I
    
        For I = firstConfigDIOtherAccRow To lastConfigDIOtherAccRow
            .Range("J" & I).Value = ""
        Next I
        
        For I = firstConfigDICableRow To lastConfigDICableRow
            .Range("J" & I).Value = ""
        Next I
    End With

    'Clear QTY textboxes
    For I = 0 To qtyInt
        Controls("DI_Qty" & I).Value = ""
    Next I

    'Clear listboxes
    Controls("DI_Sel").Clear
    Controls("SurgicalMonitor").Clear
    Controls("WallDisplay").Clear
    Controls("Encoder_Decoder").Clear
    Controls("TouchPanel").Clear
    Controls("RoomCamera").Clear
    Controls("Audio").Clear
    Controls("Others_Acc").Clear
    Controls("FibreCabling").Clear
End Sub

Private Sub SlingClear()
'Sling SECTION

    With Sheets("Configurator")
    
        'Clear option
        .Range("SlingOptionRm8") = False
        
        'Clear selected line items
        For I = firstConfigSlingRow To lastConfigSlingRow
            .Range("J" & I).Value = ""
        Next I
    End With

    'Clear QTY textboxes
    For I = 0 To qtySling
        Controls("Sling_Qty" & I).Value = ""
    Next I
        
    'Clear listboxes
    Controls("SlingSel").Clear
    Controls("Sling").Clear
End Sub

Private Sub PNoteClear()
'PNote SECTION

    With Sheets("Configurator")
    
        'Clear option
        .Range("PNoteOptionRm8") = False
        
        'Clear textbox
        .Range("PNoteRm8").Value = ""
    End With

    'Clear textbox content
    Controls("PNoteContent").Value = ""
End Sub
'
'Save button - Saves and export the Configurator
'
Private Sub OKButton_Click()
    
    'Optimize macro progression
    Call OptimizeCode_Begin
    
    'Show all line items
    Call DisplayAll
    
    'Show the progress bar
    ProgressBar.Show
    
    'Update progress bar label and indicator
    ProgressBar.Label.Caption = "Clearing Lights..."
    ProgressBar.Repaint
    
    'Show all line items in Tables worksheet
    Sheets("Tables").Activate
    Show_all
    Sheets("Proposal").Activate

    'Clear previously configured Light line items, if any
    With Sheets("Proposal")
        
        'Find row number after Configurator_Start as first row,and row number before Configurator_Lights heading as last row
        Set FindFirstLightSectionRow = .Range("A:A").Find(What:="RoomConfig_8", LookIn:=xlValues)
        Set FindLastLightSectionRow = .Range("A:A").Find(What:="Configurator_Rm8Lights", LookIn:=xlValues)
    End With
    
    'First and last row for Light Section
    firstLightSectionRow = FindFirstLightSectionRow.Row + 1
    lastLightSectionRow = FindLastLightSectionRow.Row - 1
    
    'Clear the Light section if lights were configured previously
    If firstLightSectionRow <> FindLastLightSectionRow.Row Then
        Rows(firstLightSectionRow & ":" & lastLightSectionRow).Select
        Selection.Delete Shift:=xlUp
    End If
    
    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 5
    ProgressBar.Label.Caption = "Clearing Pendants..."
    ProgressBar.Repaint
    
    'Clear previously configured Pendant line items, if any
    With Sheets("Proposal")
        
        'Find row number after Configurator_Lights heading as first row, and row number before Configurator_PendantTandem heading as last row
        Set FindFirstPendantSectionRow = .Range("A:A").Find(What:="Configurator_Rm8Lights", LookIn:=xlValues)
        Set FindLastPendantSectionRow = .Range("A:A").Find(What:="Configurator_Rm8Pendant", LookIn:=xlValues)
    End With
    
    'First and last row for Pendant Section
    firstPendantSectionRow = FindFirstPendantSectionRow.Row + 1
    lastPendantSectionRow = FindLastPendantSectionRow.Row - 1
    
    'Clear the Pendant section if pendants were configured previously
    If firstPendantSectionRow <> FindLastPendantSectionRow.Row Then
        Rows(firstPendantSectionRow & ":" & lastPendantSectionRow).Select
        Selection.Delete Shift:=xlUp
    End If

    'Clear previously configured Amico Accessories line items, if any
    With Sheets("Proposal")
        
        'Find row number after Configurator_Lights heading as first row, and row number before Configurator_Pendant heading as last row
        Set FindFirstAmicoAccSectionRow = .Range("A:A").Find(What:="Configurator_Rm8AmicoAccStart", LookIn:=xlValues)
        Set FindLastAmicoAccSectionRow = .Range("A:A").Find(What:="Configurator_Rm8AmicoAccEnd", LookIn:=xlValues)
        Set FindAmicoAccHeadingRow = .Range("A:A").Find(What:="Config_Rm8AmicoAccHeading", LookIn:=xlValues)
    End With
    
    'First and last row for Amico Accessories Section
    firstAmicoAccSectionRow = FindFirstAmicoAccSectionRow.Row + 1
    lastAmicoAccSectionRow = FindLastAmicoAccSectionRow.Row - 1
    amicoAccHeadingRow = FindAmicoAccHeadingRow.Row
    
    'Empty Amico Acc heading
    Range("B" & amicoAccHeadingRow).Value = ""
    
    'Clear the Amico Acc section if accessories were configured previously
    If firstAmicoAccSectionRow <> FindLastAmicoAccSectionRow.Row Then
        Rows(firstAmicoAccSectionRow & ":" & lastAmicoAccSectionRow).Select
        Selection.Delete Shift:=xlUp
    End If

    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 10
    ProgressBar.Label.Caption = "Clearing AirFRAME + IC..."
    ProgressBar.Repaint

    'Clear previously configured AF+IC line items, if any
    With Sheets("Proposal")
        
        'Find row number after Configurator_Integration heading as first row, and row number before Configurator_Infrastructure heading as last row
        Set FindFirstInfrastructureSectionRow = .Range("A:A").Find(What:="Configurator_Rm8AmicoAccEnd", LookIn:=xlValues)
        Set FindLastInfrastructureSectionRow = .Range("A:A").Find(What:="Configurator_Rm8Infrastructure", LookIn:=xlValues)
    End With
    
    'First and last row for AF+IC Section
    firstInfrastructureSectionRow = FindFirstInfrastructureSectionRow.Row + 1
    lastInfrastructureSectionRow = FindLastInfrastructureSectionRow.Row - 1
    
    'Clear the AF+IC section if AF+ICs were configured previously
    If firstInfrastructureSectionRow <> FindLastInfrastructureSectionRow.Row Then
        Rows(firstInfrastructureSectionRow & ":" & lastInfrastructureSectionRow).Select
        Selection.Delete Shift:=xlUp
    End If

    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 15
    ProgressBar.Label.Caption = "Clearing Digital Integration..."
    ProgressBar.Repaint
                
    'Clear previously configured Digital Integration line items, if any
    With Sheets("Proposal")
                        
        'Find row number after Configurator_PendantTandem heading as first row, and row number before Configurator_Integration heading as last row
        Set FindFirstIntegrationSectionRow = .Range("A:A").Find(What:="Configurator_Rm8Pendant", LookIn:=xlValues)
        Set FindLastIntegrationSectionRow = .Range("A:A").Find(What:="Configurator_Rm8Integration", LookIn:=xlValues)
    End With
                    
    'First and last row for Integration Section
    firstIntegrationSectionRow = FindFirstIntegrationSectionRow.Row + 1
    lastIntegrationSectionRow = FindLastIntegrationSectionRow.Row - 1
                    
    'Clear the Integration section if integration systems were configured previously
    If firstIntegrationSectionRow <> FindLastIntegrationSectionRow.Row Then
        Rows(firstIntegrationSectionRow & ":" & lastIntegrationSectionRow).Select
        Selection.Delete Shift:=xlUp
    End If
    
    'Clear previously configured Sling line items, if any
    With Sheets("Proposal")
                            
        'Find row number after Configurator_SlingStart heading as first row, and row number before Configurator_SlingEnd heading as last row
        Set FindFirstSlingSectionRow = .Range("A:A").Find(What:="Configurator_Rm8SlingStart", LookIn:=xlValues)
        Set FindLastSlingSectionRow = .Range("A:A").Find(What:="Configurator_Rm8SlingEnd", LookIn:=xlValues)
        Set FindSlingHeadingRow = .Range("A:A").Find(What:="Config_Rm8SlingHeading", LookIn:=xlValues)
    End With
                        
    'First and last row for Amico Accessories Section
    firstSlingSectionRow = FindFirstSlingSectionRow.Row + 1
    lastSlingSectionRow = FindLastSlingSectionRow.Row - 1
    slingHeadingRow = FindSlingHeadingRow.Row
                        
    'Empty Sling heading
    Range("B" & slingHeadingRow).Value = ""
                        
    'Clear the Sling section if accessories were configured previously
    If firstSlingSectionRow <> FindLastSlingSectionRow.Row Then
        Rows(firstSlingSectionRow & ":" & lastSlingSectionRow).Select
        Selection.Delete Shift:=xlUp
    End If

    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 20
    ProgressBar.Label.Caption = "Clearing other data..."
    ProgressBar.Repaint

    'Clear previously configured Room Configuration headings, if any
    With Sheets("Proposal")
        
        'Find row number after Configurator_Start heading as first row, and row number before RoomConfig_1 heading as last row
        Set FindFirstRoom8ConfigRow = .Range("A:A").Find(What:="Configurator_Rm7SlingEnd", LookIn:=xlValues)
        Set FindLastRoom8ConfigRow = .Range("A:A").Find(What:="RoomConfig_8", LookIn:=xlValues)
    End With
    
    'First and last row for Room Configuration headings
    firstRoom8ConfigRow = FindFirstRoom8ConfigRow.Row + 1
    lastRoom8ConfigRow = FindLastRoom8ConfigRow.Row - 1
    
    'Clear the Room Configuration headings if configured previously
    If firstRoom8ConfigRow <> FindLastRoom8ConfigRow.Row Then
        Rows(firstRoom8ConfigRow & ":" & lastRoom8ConfigRow).Select
        Selection.Delete Shift:=xlUp
    End If
    
    With Sheets("Proposal")
        'Find first and last row for Configurator Table
        Set FindConfiguratorTableRow = .Range("A:A").Find(What:="ConfiguratorTable_Rm8", LookIn:=xlValues)
        Set FindConfiguratorTableEndRow = .Range("A:A").Find(What:="ConfiguratorTable_End_Rm8", LookIn:=xlValues)
    End With
    
    With Sheets("Tables")
        'First and last row for Configurator to be included in Tables worksheet
        Set FindConfiguratorRow = .Range("B:B").Find(What:="Configurator_Room8", LookIn:=xlValues)
        Set FindConfiguratorEndRow = .Range("B:B").Find(What:="Configurator_End_Rm8", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator Table
    configuratorTableRow = FindConfiguratorTableRow.Row + 1
    configuratorTableEndRow = FindConfiguratorTableEndRow.Row - 1
    
    'First and last row for Configurator section in Tables worksheet
    configuratorRow = FindConfiguratorRow.Row + 1
    configuratorEndRow = FindConfiguratorEndRow.Row - 1
    
    'Clear the Configurator section in Proposal and Tables worksheets if configured previously
    If configuratorTableRow <> FindConfiguratorTableEndRow.Row Then
        Rows(configuratorTableRow & ":" & configuratorTableEndRow).Select
        Selection.Delete Shift:=xlUp
    End If

    Sheets("Tables").Activate
    If configuratorRow <> FindConfiguratorEndRow.Row Then
        Rows(configuratorRow & ":" & configuratorEndRow).Select
        Selection.Delete Shift:=xlUp
    End If

    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 25
    ProgressBar.Label.Caption = "Clearing other data..."
    ProgressBar.Repaint

    'Clear the What-If table at Tables worksheet if configured previously
    With Sheets("Tables")
        'Row for Configurator items to be included in the What-If table
        Set FindWhatIfStartRow = .Range("Q:Q").Find(What:="WhatIf_Rm8Start", LookIn:=xlValues)
        Set FindWhatIfRow = .Range("Q:Q").Find(What:="WhatIf_Rm8End", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator section in What-If table
    whatIfStartRow = FindWhatIfStartRow.Row + 1
    whatIfRow = FindWhatIfRow.Row - 1
    
    If whatIfStartRow <> FindWhatIfRow.Row Then
        Rows(whatIfStartRow & ":" & whatIfRow).Select
        Selection.Delete Shift:=xlUp
    End If

    'Clear the OPM Tracker in Variable worksheet
    Sheets("Variable").Activate
    Range("Config_Rm8OPM_Lights").Value = ""
    Range("Config_Rm8OPM_ExamLights").Value = ""
    Range("Config_Rm8OPM_PFixed").Value = ""
    Range("Config_Rm8OPM_PMotor").Value = ""
    Range("Config_Rm8OPM_AirFRAME").Value = ""
    Range("Config_Rm8OPM_AmicoAcc").Value = ""
    Range("Config_Rm8OPM_Integrated").Value = ""

    opmLightFormula = "="
    opmExamLightFormula = "="
    opmPFixedFormula = "="
    opmPMotorisedFormula = "="
    opmInfFormula = "="
    opmAmicoFormula = "=SUM("
    opmIntFormula = "="
    opmSlingFormula = "=SUM("
    
    'Zero out room variables
    roomLightDisSubtotal = ""
    roomExamLightDisSubtotal = ""
    roomPendantDisSubtotal = ""
    roomPendantMDisSubtotal = ""
    roomInfDisSubtotal = ""
    roomAmicoDisSubtotal = ""
    roomIntDisSubtotal = ""
    roomSlingDisSubtotal = ""

    'Zero out installation variables (not for Amico Accessories & Slings)
    installL1 = ""
    installP1 = ""
    installIF1 = ""
    installI1 = ""

    'Zero out Qty of product categories if "0" or left empty
    If LightNo = "0" Or LightNo = "" Then LightNo = "0"
    If PendantNo = "0" Or PendantNo = "" Then PendantNo = "0"
    If Room8No = "0" Or Room8No = "" Then Room8No = "0"
    
    'Store values into Configurator Worksheet
    With Sheets("Configurator")
        .Range("Room8Qty").Value = Controls("Room8No").Value
        .Range("LightRm8Qty").Value = Controls("LightNo").Value
        .Range("PendantRm8Qty").Value = Controls("PendantNo").Value
    End With
   
    'Store Yes/No value for Amico Accessories
    With Sheets("Configurator")
        If Controls("AmicoYes").Value = True Then
            .Range("AmicoOptionRm8") = True
        ElseIf Controls("AmicoNo").Value = True Then
            .Range("AmicoOptionRm8") = False
        End If
    End With
    
    'Store Yes/No value for AF + IC
    With Sheets("Configurator")
        If Controls("AF_IC_Yes").Value = True Then
            .Range("AFICOptionRm8") = True
        ElseIf Controls("AF_IC_No").Value = True Then
            .Range("AFICOptionRm8") = False
        End If
    End With
    
    'Store Yes/No value for Digital Integration
    With Sheets("Configurator")
        If Controls("DI_Yes").Value = True Then
            .Range("DIOptionRm8") = True
        ElseIf Controls("DI_No").Value = True Then
            .Range("DIOptionRm8") = False
        End If
    End With
   
    'Store Yes/No value for Slings
    With Sheets("Configurator")
        If Controls("SlingYes").Value = True Then
            .Range("SlingOptionRm8") = True
        ElseIf Controls("SlingNo").Value = True Then
            .Range("SlingOptionRm8") = False
        End If
    End With
   
    With Sheets("Configurator")
        If Controls("PNoteYes").Value = True Then
            .Range("PNoteOptionRm8") = True
        ElseIf Controls("PNoteNo").Value = True Then
            .Range("PNoteOptionRm8") = False
        End If
    End With
   
    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 28
    ProgressBar.Label.Caption = "Exporting data..."
    ProgressBar.Repaint
    
    'Make Proposal sheet active
    Sheets("Proposal").Activate
    
    With Sheets("Proposal")
        'Find row number for AmicoAcc Heading
        Set FindAmicoAccHeadingRow = .Range("A:A").Find(What:="Config_Rm8AmicoAccHeading", LookIn:=xlValues)
    End With
    amicoAccHeadingRow = FindAmicoAccHeadingRow.Row
    
    Range("E" & amicoAccHeadingRow).Value = "0"
    
    With Sheets("Proposal")
        'Find row number for Sling Heading
        Set FindSlingHeadingRow = .Range("A:A").Find(What:="Config_Rm8SlingHeading", LookIn:=xlValues)
    End With
    slingHeadingRow = FindSlingHeadingRow.Row
                    
    Range("E" & slingHeadingRow).Value = "0"
    
    'PNote Section
    If Controls("PNoteYes").Value = True Then
        Call PNoteTab
    End If
            
    'Sling Section
    If Controls("SlingYes").Value = True Then
        Call SlingTab
    End If
    
    'Integration Section
    If Controls("DI_Yes").Value = True Then
        Call IntegrationTab
    End If
    
    'AF + IC
    If Controls("AF_IC_Yes").Value = True Then
        Call AFICTab
    End If
    
    'Amico Accessories
    If Controls("AmicoYes").Value = True Then
        Call AmicoAccTab
    End If
    
    'Pendant Section
    'Check if a Pendant is configured
    If Controls("PendantNo").Value > 0 And Controls("PendantNo").Value <> "" Then
        Call PendantTab
    End If

    'Light Section
    'Check if a Light is configured
    If Controls("LightNo").Value > 0 And Controls("LightNo").Value <> "" Then
        Call LightTab
    End If
    
    'Room Section
    If Controls("Room8No").Value > 0 And Controls("Room8No").Value <> "" Then
        Call RoomTab
    End If
    
    'Summarise the line items in Proposal worksheet
    Call DisplaySubtotal
    
    'Summarise the line items in Tables worksheet
    Sheets("Tables").Activate
    hidebundles
    Sheets("Proposal").Activate
    
    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 100
    ProgressBar.Label.Caption = "Completed"
    ProgressBar.Repaint
    
    'End optimisation
    Call OptimizeCode_End
    
    'Unload progress bar to save memory
    Unload ProgressBar
    
    'Display a message box indicating the end of macro
    MsgBox "Input data has been exported into the worksheet. Please review it.", vbInformation
End Sub

'Room heading for Save button
Private Sub RoomTab()

Unprotect

    'Warn user to put in a name if not entered
    If Controls("Room8Name").Value = "" Then
flagStartRoomName:
        result = MsgBox("No name has been specified for Room 8. Do you want to continue?", vbYesNo + vbQuestion, "Name for Room 8")
        
        'If yes, Room 8 name is used, else allow user to type in the name for Room 8
        If result = vbYes Then
            Controls("Room8Name").Value = "Room 8"
        Else
            Query = InputBox(prompt:="Please enter name for Room 8 to continue.", Title:="Name for Room 8", Default:="Enter name here")
            If Query = vbNullString Then
                GoTo flagStartRoomName
            Else
                Controls("Room8Name").Value = Query
            End If
        End If
    End If
    'Warn user to put in a quantity if not entered
    If Controls("Room8No").Value = "" Then
        MsgBox "No quantity for " & Controls("Room8Name").Value & " is entered.", vbExclamation
flagStartRoomNo:
        Query = InputBox(prompt:="Please enter quantity to continue.", Title:="Quantity for " & Controls("Room8Name").Value, Default:="Enter quantity here")
        If Query = vbNullString Then
            GoTo flagStartRoomNo
        Else
            Controls("Room8No").Value = Query
        End If
    End If

    'Store user inputs into Configurator worksheet to be loaded when the Configurator is used next time
    With Sheets("Configurator")
        .Range("Room8Name") = Controls("Room8Name").Value
        .Range("Room8Qty") = Controls("Room8No").Value
        .Range("Room8Desc") = Controls("Room8Description").Value
    End With

    With Sheets("Proposal")
        'Row for Room Configuration heading to be copied
        'Find row number for Room Heading template, and row number for Room Heading to be inserted
        Set FindFirstRoom8ConfigRow = .Range("A:A").Find(What:="Config_Room1", LookIn:=xlValues)
        Set FindRoom8ConfigRow = .Range("A:A").Find(What:="RoomConfig_8", LookIn:=xlValues)
    End With
    firstRoom8ConfigRow = FindFirstRoom8ConfigRow.Row
    room8ConfigRow = FindRoom8ConfigRow.Row
    
    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 95
    ProgressBar.Label.Caption = "Exporting Room data..."
    ProgressBar.Repaint
    
    'Copy and paste the relevant Room Config heading into the Configurator section, and export the user input data into the relevant cells
    Rows(firstRoom8ConfigRow & ":" & firstRoom8ConfigRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(room8ConfigRow & ":" & room8ConfigRow).Select
    Selection.Insert Shift:=xlDown

    With Sheets("Variable")
        'Initialize the formula for each OPM to be summed for Discounted Subtotal of Room
        If .Range("Config_Rm8OPM_Lights").Value <> "" Then
            roomLightDisSubtotal = .Range("Config_Rm8OPM_Lights").Formula
        Else
            roomLightDisSubtotal = "00"
        End If
        If .Range("Config_Rm8OPM_ExamLights").Value <> "" Then
            roomExamLightDisSubtotal = .Range("Config_Rm8OPM_ExamLights").Formula
        Else
            roomExamLightDisSubtotal = "00"
        End If
        If .Range("Config_Rm8OPM_PFixed").Value <> "" Then
            roomPendantDisSubtotal = .Range("Config_Rm8OPM_PFixed").Formula
        Else
            roomPendantDisSubtotal = "00"
        End If
        If .Range("Config_Rm8OPM_PMotor").Value <> "" Then
            roomPendantMDisSubtotal = .Range("Config_Rm8OPM_PMotor").Formula
        Else
            roomPendantMDisSubtotal = "00"
        End If
        If .Range("Config_Rm8OPM_AirFRAME").Value <> "" Then
            roomInfDisSubtotal = .Range("Config_Rm8OPM_AirFRAME").Formula
        Else
            roomInfDisSubtotal = "00"
        End If
        If .Range("Config_Rm8OPM_AmicoAcc").Value <> "" Then
            roomAmicoDisSubtotal = .Range("Config_Rm8OPM_AmicoAcc").Formula
        Else
            roomAmicoDisSubtotal = "00"
        End If
        If .Range("Config_Rm8OPM_Integrated").Value <> "" Then
            roomIntDisSubtotal = .Range("Config_Rm8OPM_Integrated").Formula
        Else
            roomIntDisSubtotal = "00"
        End If
        If Controls("SlingYes").Value = True Then
            roomSlingDisSubtotal = .Range("Config_Rm8Slings").Formula
        Else
            roomSlingDisSubtotal = "00"
        End If
    End With

    'Fill in the relevant details for the Room Configuration Heading
    Range("B" & room8ConfigRow).Value = Controls("Room8Name").Value
    Range("E" & room8ConfigRow).Value = CInt(Controls("Room8No").Value)
    Range("G" & room8ConfigRow).Formula = "=" & Right(roomLightDisSubtotal, Len(roomLightDisSubtotal) - 1) & "+" & Right(roomExamLightDisSubtotal, Len(roomExamLightDisSubtotal) - 1) & "+" & Right(roomPendantDisSubtotal, Len(roomPendantDisSubtotal) - 1) & "+" & Right(roomPendantMDisSubtotal, Len(roomPendantMDisSubtotal) - 1) & "+" & Right(roomInfDisSubtotal, Len(roomInfDisSubtotal) - 1) & "+" & Right(roomAmicoDisSubtotal, Len(roomAmicoDisSubtotal) - 1) & "+" & Right(roomIntDisSubtotal, Len(roomIntDisSubtotal) - 1) & "+" & Right(roomSlingDisSubtotal, Len(roomSlingDisSubtotal) - 1)
    Range("F" & room8ConfigRow).Formula = Replace(Range("G" & room8ConfigRow).Formula, "G", "F")
    Range("J" & room8ConfigRow).Formula = Replace(Range("G" & room8ConfigRow).Formula, "G", "J")
    Range("K" & room8ConfigRow).Formula = Replace(Range("G" & room8ConfigRow).Formula, "G", "K")
    Range("L" & room8ConfigRow).Formula = Replace(Range("G" & room8ConfigRow).Formula, "G", "L")
    Range("M" & room8ConfigRow).Formula = Replace(Range("G" & room8ConfigRow).Formula, "G", "M")
    
    With Sheets("Tables")
        'First and last row for Configurator to be included in Tables worksheet
        Set FindConfiguratorRow = .Range("B:B").Find(What:="Configurator_Room8", LookIn:=xlValues)
        Set FindConfiguratorEndRow = .Range("B:B").Find(What:="Configurator_End_Rm8", LookIn:=xlValues)
    End With
    configuratorRow = FindConfiguratorRow.Row + 1
    configuratorEndRow = FindConfiguratorEndRow.Row
    
    I = room8ConfigRow
    j = configuratorRow
    k = configuratorEndRow
    
    'Insert a row at the relevant 'bookmarked' row in Tables worksheet for the Room heading
    Sheets("Tables").Activate
    Rows(k & ":" & k).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(j & ":" & j).Select
    Selection.Insert Shift:=xlDown
    
    'Insert name of Room at Column B, with default font color and cyan cell color
    Range("B" & j).Value = Controls("Room8Name").Value
    Range("B" & j).Font.ColorIndex = 1
    Range("B" & j).Interior.ColorIndex = 34
    
    Range("D" & j).Value = Controls("Room8Description").Value
    
    'Change cell color of Column D to cyan
    Range("D" & j).Interior.ColorIndex = 34

    'Fill in the relevant columns and change cell color to cyan
    Range("E" & j).Formula = "=Proposal!E" & I
    Range("E" & j).Interior.ColorIndex = 34
    Range("F" & j).Formula = "=Proposal!D" & I
    Range("F" & j).Interior.ColorIndex = 34
    Range("G" & j).Formula = "=Proposal!F" & I
    Range("G" & j).Interior.ColorIndex = 34
    Range("H" & j).Formula = "=Proposal!G" & I
    Range("H" & j).Interior.ColorIndex = 34
    Range("K" & j).Formula = "=IFERROR(SUM(Tables!K" & j + 1 & ":" & "K" & k & "),0)"
    Range("K" & j).Interior.ColorIndex = 34
    Range("L" & j).Formula = Replace(Range("K" & j).Formula, "K", "L")
    Range("L" & j).Interior.ColorIndex = 34
    Range("M" & j).Formula = Replace(Range("K" & j).Formula, "K", "M")
    Range("M" & j).Interior.ColorIndex = 34
    Range("N" & j).Formula = Replace(Range("K" & j).Formula, "K", "N")
    Range("N" & j).Interior.ColorIndex = 34
        
    Sheets("Proposal").Activate
End Sub

'Light Section for Save button
Private Sub LightTab()

Unprotect

'Go through each configured light tab
For X = LBound(P, 2) To LightNo

    'Warn user to put in a name if not entered
    If Controls("Light" & P(1, X) & "Name").Value = "" Then
flagStartLightName:
        result = MsgBox("No name has been specified for Light " & P(1, X) & ". Do you want to continue?", vbYesNo + vbQuestion, "Name for Light" & P(1, X))
        
        'If yes, Light name is used, else allow user to type in the name for Light
        If result = vbYes Then
            Controls("Light" & P(1, X) & "Name").Value = "Light " & P(1, X)
        Else
            Query = InputBox(prompt:="Please enter name for Light " & P(1, X) & " to continue.", Title:="Name for Light " & P(1, X), Default:="Enter name here")
            If Query = vbNullString Then
                GoTo flagStartLightName
            Else
                Controls("Light" & P(1, X) & "Name").Value = Query
            End If
        End If
    End If
    'Warn user to put in a quantity if not entered
    If Controls("Light" & P(1, X) & "No").Value = "" Then
        MsgBox "No quantity for " & Controls("Light" & P(1, X) & "Name").Value & " is entered.", vbExclamation
flagStartLightNo:
        Query = InputBox(prompt:="Please enter quantity to continue.", Title:="Quantity for" & Controls("Light" & P(1, X) & "Name").Value, Default:="Enter quantity here")
        If Query = vbNullString Then
            GoTo flagStartLightNo
        Else
            Controls("Light" & P(1, X) & "No").Value = Query
        End If
    End If
    
    'Zero out empty textboxes
    If Controls("L" & P(1, X) & "CamAdder").Value = "" Then Controls("L" & P(1, X) & "CamAdder").Value = 0
    If Controls("L" & P(1, X) & "4KCam").Value = "" Then Controls("L" & P(1, X) & "4KCam").Value = 0
    
    'Zero out Accessories textboxes if empty
    For j = 0 To qtyLight
        If Controls("L" & P(1, X) & "_Acc_Qty" & j).Value = "" Then
            Controls("L" & P(1, X) & "_Acc_Qty" & j).Value = 0
        End If
    Next j
    
    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 90
    ProgressBar.Label.Caption = "Exporting Light data..."
    ProgressBar.Repaint
    
    'Store user inputs into Configurator worksheet to be loaded when the Configurator is used next time
    With Sheets("Configurator")
        
        .Range("L" & P(1, X) & "Rm8Name") = Controls("Light" & P(1, X) & "Name").Value
        .Range("L" & P(1, X) & "Rm8Qty") = Controls("Light" & P(1, X) & "No").Value
        .Range("L" & P(1, X) & "Rm8Desc") = Controls("Light" & P(1, X) & "Description").Value
        
        'Options for type of light
        If Controls("L" & P(1, X) & "iCE").Value = True Then
            .Range("L" & P(1, X) & "Rm8Type") = "iCE 30m"
        ElseIf Controls("L" & P(1, X) & "Mira").Value = True Then
            .Range("L" & P(1, X) & "Rm8Type") = "Mira 70/110"
        ElseIf Controls("L" & P(1, X) & "Vega").Value = True Then
            .Range("L" & P(1, X) & "Rm8Type") = "Vega 80"
        ElseIf Controls("L" & P(1, X) & "Gamma").Value = True Then
            .Range("L" & P(1, X) & "Rm8Type") = "MSL119/319"
        End If
        
        'Options for iCE 30m Light
        If Controls("L" & P(1, X) & "Single").Value = False Then
            .Range("L" & P(1, X) & "Rm8Single") = False
        Else
            .Range("L" & P(1, X) & "Rm8Single") = True
        End If
        If Controls("L" & P(1, X) & "Dual").Value = False Then
            .Range("L" & P(1, X) & "Rm8Dual") = False
        Else
            .Range("L" & P(1, X) & "Rm8Dual") = True
        End If
        If Controls("L" & P(1, X) & "Triple").Value = False Then
            .Range("L" & P(1, X) & "Rm8Triple") = False
        Else
            .Range("L" & P(1, X) & "Rm8Triple") = True
        End If
        If Controls("L" & P(1, X) & "Quad").Value = False Then
            .Range("L" & P(1, X) & "Rm8Quad") = False
        Else
            .Range("L" & P(1, X) & "Rm8Quad") = True
        End If
        If Controls("L" & P(1, X) & "Mobile").Value = False Then
            .Range("L" & P(1, X) & "Rm8Mobile") = False
        Else
            .Range("L" & P(1, X) & "Rm8Mobile") = True
        End If
        If Controls("L" & P(1, X) & "Split").Value = False Then
            .Range("L" & P(1, X) & "Rm8Split") = False
        Else
            .Range("L" & P(1, X) & "Rm8Split") = True
        End If
        
        'Comboboxes/Textboxes
        If Controls("L" & P(1, X) & "iCE").Value = True Then
            .Range("L" & P(1, X) & "Rm8iCE") = Controls("L" & P(1, X) & "iCEItem").Value
            .Range("L" & P(1, X) & "Rm8CamAdder") = Controls("L" & P(1, X) & "CamAdder").Value
            .Range("L" & P(1, X) & "Rm84KCam") = Controls("L" & P(1, X) & "4KCam").Value
        End If
        If Controls("L" & P(1, X) & "Mira").Value = True Then .Range("L" & P(1, X) & "Rm8Mira") = Controls("L" & P(1, X) & "MiraLight").Value
        If Controls("L" & P(1, X) & "Vega").Value = True Then .Range("L" & P(1, X) & "Rm8Vega") = Controls("L" & P(1, X) & "VegaItem").Value
        If Controls("L" & P(1, X) & "Gamma").Value = True Then .Range("L" & P(1, X) & "Rm8Gamma") = Controls("L" & P(1, X) & "MSLItem").Value
        
        'Re-set accessories (Room Configuration)
        Set FindFirstLiCEAccRow = .Range(Rm8Range).Find(What:="Accessories - iCE 30m", LookIn:=xlValues)
        Set FindLastLiCEAccRow = .Range(Rm8Range).Find(What:="Accessories - Mira 70 / 110 - Vega 80", LookIn:=xlValues)
    
        'First and last row for Light Accessories
        firstLiCEAccRow = FindFirstLiCEAccRow.Row + 1
        lastLiCEAccRow = FindLastLiCEAccRow.Row - 2

        Set FindFirstLMiraAccRow = .Range(Rm8Range).Find(What:="Accessories - Mira 70 / 110 - Vega 80", LookIn:=xlValues)
        Set FindLastLMiraAccRow = .Range(Rm8Range).Find(What:="Pendants", LookIn:=xlValues)
        
        'First and last row for Light Accessories
        lastLMiraAccRow = FindLastLMiraAccRow.Row - 2
        
        If Controls("L" & P(1, X) & "Vega").Value = True Then
            firstLMiraAccRow = FindFirstLMiraAccRow.Row + 2
        ElseIf Controls("L" & P(1, X) & "Mira").Value = True Then
            firstLMiraAccRow = FindFirstLMiraAccRow.Row + 1
        End If
        
        If Controls("L" & P(1, X) & "iCE").Value = True Then
            'Clear acc for iCE 30m if previously configured
            For I = firstLiCEAccRow To lastLiCEAccRow
                .Range(P(2, X) & I).Value = ""
            Next I
        ElseIf Controls("L" & P(1, X) & "Mira").Value = True Or Controls("L" & P(1, X) & "Vega").Value = True Then
            'Clear acc for Mira 70 / 110 if previously configured
            For I = firstLMiraAccRow To lastLMiraAccRow
                .Range(P(2, X) & I).Value = ""
            Next I
        End If
        
        'Specify the QTY for each Accessory in selected listbox
        If Controls("L" & P(1, X) & "iCE").Value = True Then
            For I = firstLiCEAccRow To lastLiCEAccRow
                For j = 0 To Controls("Light" & P(1, X) & "AccSel").ListCount - 1
                    If .Range("B" & I).Value = Controls("Light" & P(1, X) & "AccSel").List(j) Then
                        .Range(P(2, X) & I).Value = CInt(Controls("L" & P(1, X) & "_Acc_Qty" & j).Value)
                    End If
                Next j
            Next I
        
        ElseIf Controls("L" & P(1, X) & "Mira").Value = True Or Controls("L" & P(1, X) & "Vega").Value = True Then
            For I = firstLMiraAccRow To lastLMiraAccRow
                For j = 0 To Controls("Light" & P(1, X) & "AccSel").ListCount - 1
                    If .Range("B" & I).Value = Controls("Light" & P(1, X) & "AccSel").List(j) Then
                        .Range(P(2, X) & I).Value = CInt(Controls("L" & P(1, X) & "_Acc_Qty" & j).Value)
                    End If
                Next j
            Next I
        End If
    End With
    
    With Sheets("Proposal")
        'First and last row for Light to be copied to above Configurator_Rm8Lights row
        'Find row number for Config_Light as first row, and row number before L1 as last row
        Set FindFirstLightRow = .Range("A:A").Find(What:="Config_Light", LookIn:=xlValues)
        Set FindLastLightRow = .Range("A:A").Find(What:="Pendants", LookIn:=xlValues)
        Set FindLightRow = .Range("A:A").Find(What:="Configurator_Rm8Lights", LookIn:=xlValues)
    End With
    firstLightRow = FindFirstLightRow.Row
    lastLightRow = FindLastLightRow.Row - 1
    lightRow = FindLightRow.Row
    
    'Copy and paste the relevant light rows into the Configurator section, and export the user input data into the relevant cells
    Rows(firstLightRow & ":" & lastLightRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(lightRow & ":" & lightRow).Select
    Selection.Insert Shift:=xlDown
    
    'Find row number after Configurator heading as first row, and row number before Configurator_Lights heading as last row
    Set FindLastRow = Range("A:A").Find(What:="Configurator_Rm8Lights", LookIn:=xlValues)
    lastRow = FindLastRow.Row - 1
    
    With Sheets("Proposal")
        'Find row number in Configurator Table to insert Light summary
        Set FindConfiguratorTableRow = .Range("A:A").Find(What:="ConfiguratorTable_Rm8", LookIn:=xlValues)
    End With
    configuratorTableRow = FindConfiguratorTableRow.Row + 1
    
    'Multiply the local light QTY with Room QTY
    lightQTY = CInt(Controls("Light" & P(1, X) & "No").Value) * CInt(Controls("Room8No").Value)
    
    'Name the light bundle, and quantify it
    Worksheets("Configurator").Range("L" & P(1, X) & "Rm8Image").Copy Range("A" & lightRow)
    Range("B" & lightRow).Value = Controls("Light" & P(1, X) & "Name").Value
    Range("C" & lightRow).Value = CInt(Controls("Light" & P(1, X) & "No").Value)
    Range("E" & lightRow).Value = lightQTY

    'Fill in the line item QTYs accordingly
    For I = lightRow + 1 To lastRow
        'iCE 30m light
        If Controls("L" & P(1, X) & "iCE").Value = True Then
            If Range("B" & I).Value = Controls("L" & P(1, X) & "iCEItem").Value Then
                If Controls("L" & P(1, X) & "Split").Value = True Then
                    Range("E" & I).Value = 2 * lightQTY
                    Range("C" & I).Value = 2
                Else
                    Range("E" & I).Value = lightQTY
                    Range("C" & I).Value = 1
                End If
                
            'Camera Ready Adder
            ElseIf Range("A" & I).Value = "SRG-LED-CAM-RDY-ADD" Then
                If Controls("L" & P(1, X) & "CamAdder").Value <> "" And CInt(Controls("L" & P(1, X) & "CamAdder").Value) > 0 Then
                    Range("E" & I).Value = CInt(Controls("L" & P(1, X) & "CamAdder").Value) * lightQTY
                    Range("C" & I).Value = CInt(Controls("L" & P(1, X) & "CamAdder").Value)
                End If
            
            '4K Camera Ready Adder
            ElseIf Range("A" & I).Value = "SRG-LED-4KCAM-RDY-ADD" Then
                If Controls("L" & P(1, X) & "4KCam").Value <> "" And CInt(Controls("L" & P(1, X) & "4KCam").Value) > 0 Then
                    Range("E" & I).Value = CInt(Controls("L" & P(1, X) & "4KCam").Value) * lightQTY
                    Range("C" & I).Value = CInt(Controls("L" & P(1, X) & "4KCam").Value)
                End If
            
            'Auto include additional line items for non camera ready light heads (touch switch handle ASY)
            ElseIf Range("A" & I).Value = "SL-HDL-TS-ASY" Then
            
                'Count no. of light heads via instances of "0" (30M) in description
                iLHead = CInt(Len(Controls("L" & P(1, X) & "iCEItem").Value) - Len(Replace(Controls("L" & P(1, X) & "iCEItem").Value, "0", "", 1, -1, vbTextCompare)))
                
                'If split light, double the number of light heads
                If Controls("L" & P(1, X) & "Split").Value = True Then
                    iLHead = iLHead * 2
                End If
                
                'Count no. of non-HD & non-4K camera ready light heads
                iNCRLHead = iLHead - CInt(Controls("L" & P(1, X) & "CamAdder").Value) - CInt(Controls("L" & P(1, X) & "4KCam").Value)
                
                'Include the QTY for the line item according to no. of non-HD camera ready light heads
                Range("E" & I).Value = iNCRLHead * lightQTY
                Range("C" & I).Value = iNCRLHead
            
            'Auto include additional line items for camera ready light heads (75ft VGA cable)
            ElseIf Range("A" & I).Value = "SRG-LED-SVGA-CBL-75" Then
                If Controls("L" & P(1, X) & "CamAdder").Value <> "" And CInt(Controls("L" & P(1, X) & "CamAdder").Value) > 0 Then
                    Range("E" & I).Value = CInt(Controls("L" & P(1, X) & "CamAdder").Value) * lightQTY
                    Range("C" & I).Value = CInt(Controls("L" & P(1, X) & "CamAdder").Value)
                End If
            
'            'Auto include additional line items for all light heads (backup board adder)
'            ElseIf Range("A" & i).Value = "SL-BKUP-ADD" Then
'
'                'Count no. of light heads via instances of "0" (30M) in description
'                iLHead = Len(Controls("L" & P(1, X) & "iCEItem").Value) - Len(Replace(Controls("L" & P(1, X) & "iCEItem").Value, "0", "", 1, -1, vbTextCompare))
'
'                'If split light, double the number of light heads
'                If Controls("L" & P(1, X) & "Split").Value = True Then
'                    iLHead = iLHead * 2
'                End If
'
'                'Include the QTY for the line item according to no. of light heads
'                Range("E" & i).Value = iLHead * lightQTY
'                Range("C" & i).Value = iLHead
            
            'Structural interface plate - SOLO is included whenever there is a Install-iCE30m
            'Only for iCE30m single, dual, triple, quad arms. Split light will have 2 included for a single set
            ElseIf Range("A" & I).Value = "Interface Plate - SOLO" Then
                If Controls("L" & P(1, X) & "Split").Value = True Then
                    Range("E" & I).Value = 2 * lightQTY
                    Range("C" & I).Value = 2
                ElseIf Controls("L" & P(1, X) & "Single").Value Or Controls("L" & P(1, X) & "Dual").Value Or Controls("L" & P(1, X) & "Triple").Value Or Controls("L" & P(1, X) & "Quad").Value Then
                    Range("E" & I).Value = lightQTY
                    Range("C" & I).Value = 1
                End If
                
            'iCE 30m light installation
            ElseIf Range("A" & I).Value = "Install-iCE30m" Then
                If Controls("L" & P(1, X) & "Split").Value = True Then
                    Range("E" & I).Value = 2 * lightQTY
                    Range("C" & I).Value = 2
                Else
                    Range("E" & I).Value = lightQTY
                    Range("C" & I).Value = 1
                End If
                installL1 = "=F" & I
            End If
            
        'Mira 70/110 light
        ElseIf Controls("L" & P(1, X) & "Mira").Value = True Then
            If Range("B" & I).Value = Controls("L" & P(1, X) & "MiraLight").Value Then
                Range("E" & I).Value = lightQTY
                Range("C" & I).Value = 1
            
            'Mira 70 Light installation
            ElseIf Range("A" & I).Value = "Install-Mira 70/110" Then
                Range("E" & I).Value = lightQTY
                Range("C" & I).Value = 1
                installL1 = "=F" & I
            End If
        'Vega 80 light
        ElseIf Controls("L" & P(1, X) & "Vega").Value = True Then
            If Range("B" & I).Value = Controls("L" & P(1, X) & "VegaItem").Value Then
                Range("E" & I).Value = lightQTY
                Range("C" & I).Value = 1
                
            'Vega 80 light installation (same as Mira 70)
            ElseIf Range("A" & I).Value = "Install-Vega 80" Then
                Range("E" & I).Value = lightQTY
                Range("C" & I).Value = 1
                installL1 = "=F" & I
            End If
        'MSL119/319 Light
        ElseIf Controls("L" & P(1, X) & "Gamma").Value = True Then
            If Range("B" & I).Value = Controls("L" & P(1, X) & "MSLItem").Value Then
                Range("E" & I).Value = lightQTY
                Range("C" & I).Value = 1
            
            'MSL119/319 installation
            ElseIf Range("A" & I).Value = "Install-MSL119/319" Then
                Range("E" & I).Value = lightQTY
                Range("C" & I).Value = 1
                installL1 = "=F" & I
            End If
        End If

        'Accessories for Lights
        For j = 0 To Controls("Light" & P(1, X) & "AccSel").ListCount - 1
            If Range("B" & I).Value = Controls("Light" & P(1, X) & "AccSel").List(j) Then
                Range("E" & I).Value = CInt(Controls("L" & P(1, X) & "_Acc_Qty" & j).Value) * lightQTY
                Range("C" & I).Value = CInt(Controls("L" & P(1, X) & "_Acc_Qty" & j).Value)
            End If
        Next j
    Next I
    
    'Add details to Configurator table below pricing summary
    Rows(configuratorTableRow & ":" & configuratorTableRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
    
    I = lightRow
    
    'Equate Column A to the Room Name with default font color
    Range("A" & configuratorTableRow).Value = Controls("Room8Name").Value
    Range("A" & configuratorTableRow).Font.ColorIndex = 1
    
    'Fill in the rest of the columns
    Range("B" & configuratorTableRow).Value = Controls("Light" & P(1, X) & "Name").Value
    Range("G" & configuratorTableRow).Formula = installL1
    Range("H" & configuratorTableRow).Formula = Replace(Range("G" & configuratorTableRow).Formula, "F", "J")
    Range("E" & configuratorTableRow).Formula = Replace(Range("G" & configuratorTableRow).Formula, "F", "G")
    Range("F" & configuratorTableRow).Formula = "=G" & I
    
    'Calculate the OPM in Variable worksheet
    Sheets("Variable").Activate
    If Controls("L" & P(1, X) & "Gamma").Value = True Then
    
        'MSL119C
        opmExamLightFormula = opmExamLightFormula & "+Proposal!G" & I
        Range("Config_Rm8OPM_ExamLights").Formula = opmExamLightFormula

    ElseIf Controls("L" & P(1, X) & "Mira").Value = True Or Controls("L" & P(1, X) & "Vega").Value = True Then
    
        'Mira 70/110 and Vega 80
        opmExamLightFormula = opmExamLightFormula & "+Proposal!G" & I
        Range("Config_Rm8OPM_ExamLights").Formula = opmExamLightFormula
        
    ElseIf Controls("L" & P(1, X) & "iCE").Value = True Then
    
        'iCE30m
        opmLightFormula = opmLightFormula & "+Proposal!G" & I
        Range("Config_Rm8OPM_Lights").Formula = opmLightFormula
    End If
    
    With Sheets("Tables")
        'First and last row for Configurator to be included in Tables worksheet
        Set FindConfiguratorRow = .Range("B:B").Find(What:="Configurator_Room8", LookIn:=xlValues)
        Set FindConfiguratorEndRow = .Range("B:B").Find(What:="Configurator_End_Rm8", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator section in Tables worksheet
    configuratorRow = FindConfiguratorRow.Row + 1
    configuratorEndRow = FindConfiguratorEndRow.Row
    
    j = configuratorRow
    k = configuratorEndRow
    
    'Add details to Configurator section in Tables worksheet
    Sheets("Tables").Activate
    Rows(k & ":" & k).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(j & ":" & j).Select
    Selection.Insert Shift:=xlDown
    
    'Fill in the relevant columns
    Range("B" & j).Value = Controls("Light" & P(1, X) & "Name").Value
    Range("B" & j).Font.ColorIndex = 1
    Worksheets("Proposal").Range("A" & I).Copy Worksheets("Tables").Range("C" & j)
    
    Range("D" & j).Value = Controls("Light" & P(1, X) & "Description").Value

    Range("E" & j).Formula = "=Proposal!E" & I
    Range("F" & j).Formula = "=Proposal!D" & I
    Range("G" & j).Formula = "=Proposal!F" & I
    Range("H" & j).Formula = "=Proposal!G" & I
    Range("K" & j).Formula = "=IFERROR(SUM(Proposal!I" & I + 1 & ":" & "I" & lastRow & "),0)"
    Range("L" & j).Formula = "=IFERROR(SUM(Proposal!J" & I + 1 & ":" & "J" & lastRow & "),0)"
    Range("M" & j).Formula = "=IFERROR(SUM(Proposal!K" & I + 1 & ":" & "K" & lastRow & "),0)"
    Range("N" & j).Formula = "=IFERROR(SUM(Proposal!L" & I + 1 & ":" & "L" & lastRow & "),0)"
    
    'Add the What-If table at Tables worksheet
    With Sheets("Tables")
        'Row for Configurator items to be included in the What-If table
        Set FindWhatIfStartRow = .Range("Q:Q").Find(What:="WhatIf_Rm8Start", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator section in What-If table
    whatIfStartRow = FindWhatIfStartRow.Row + 1

    'Add details to What-If table in Tables worksheet
    Rows(whatIfStartRow & ":" & whatIfStartRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
    
    'Fill in the relevant columns
    Range("Q" & whatIfStartRow) = Controls("Room8Name").Value
    Range("Q" & whatIfStartRow).Font.ColorIndex = 1
                
    Range("R" & whatIfStartRow) = Controls("Light" & P(1, X) & "Name").Value
    Range("S" & whatIfStartRow).Formula = "=IFERROR(SUM(Proposal!AC" & I + 1 & ":" & "AC" & lastRow & "),0)"
    Range("T" & whatIfStartRow).Formula = "=IFERROR(Proposal!G" & I & ",0)"
    
    Sheets("Proposal").Activate
Next X

End Sub

'Pendant Section for Save button
Private Sub PendantTab()

Unprotect

'Go through each configured pendant tab
For X = LBound(P, 2) To PendantNo

    'Warn user to put in a name if not entered
    If Controls("Pendant" & P(1, X) & "Name").Value = "" Then
flagStartPendantName:
        result = MsgBox("No name has been specified for Pendant " & P(1, X) & ". Do you want to continue?", vbYesNo + vbQuestion, "Name for Pendant " & P(1, X))
        
        'If yes, Pendant No. name is used, else allow user to type in the name for Pendant
        If result = vbYes Then
            Controls("Pendant" & P(1, X) & "Name").Value = "Pendant " & P(1, X)
        Else
            Query = InputBox(prompt:="Please enter name for Pendant " & P(1, X) & " to continue.", Title:="Name for Pendant " & P(1, X), Default:="Enter name here")
            If Query = vbNullString Then
                GoTo flagStartPendantName
            Else
                Controls("Pendant" & P(1, X) & "Name").Value = Query
            End If
        End If
    End If
    'Warn user to put in a quantity if not entered
    If Controls("Pendant" & P(1, X) & "No").Value = "" Then
        MsgBox "No quantity for " & Controls("Pendant" & P(1, X) & "Name").Value & " is entered.", vbExclamation
flagStartPendantNo:
        Query = InputBox(prompt:="Please enter quantity to continue.", Title:="Quantity for " & Controls("Pendant" & P(1, X) & "Name").Value, Default:="Enter quantity here")
        If Query = vbNullString Then
            GoTo flagStartPendantNo
        Else
            Controls("Pendant" & P(1, X) & "No") = Query
        End If
    End If

    'Zero out empty textboxes
    'Console 1
    If Controls("P" & P(1, X) & "Con1ArmConfig").Value = "" Then Controls("P" & P(1, X) & "Con1ArmConfig").Value = 0
    If Controls("P" & P(1, X) & "Con1Console").Value = "" Then Controls("P" & P(1, X) & "Con1Console").Value = 0
    If Controls("Suction_P" & P(1, X) & "Con1").Value = "" Then Controls("Suction_P" & P(1, X) & "Con1").Value = 0
    If Controls("MedAir_P" & P(1, X) & "Con1").Value = "" Then Controls("MedAir_P" & P(1, X) & "Con1").Value = 0
    If Controls("CO2_P" & P(1, X) & "Con1").Value = "" Then Controls("CO2_P" & P(1, X) & "Con1").Value = 0
    If Controls("N2O_P" & P(1, X) & "Con1").Value = "" Then Controls("N2O_P" & P(1, X) & "Con1").Value = 0
    If Controls("Oxygen_P" & P(1, X) & "Con1").Value = "" Then Controls("Oxygen_P" & P(1, X) & "Con1").Value = 0
    If Controls("ToolAir_P" & P(1, X) & "Con1").Value = "" Then Controls("ToolAir_P" & P(1, X) & "Con1").Value = 0
    If Controls("Scavenge_P" & P(1, X) & "Con1").Value = "" Then Controls("Scavenge_P" & P(1, X) & "Con1").Value = 0
    If Controls("UPS_Blue_P" & P(1, X) & "Con1").Value = "" Then Controls("UPS_Blue_P" & P(1, X) & "Con1").Value = 0
    If Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value = "" Then Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value = 0
    If Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value = "" Then Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value = 0
    If Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value = "" Then Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value = 0
    If Controls("PowerInd_P" & P(1, X) & "Con1").Value = "" Then Controls("PowerInd_P" & P(1, X) & "Con1").Value = 0
    If Controls("RCD_P" & P(1, X) & "Con1").Value = "" Then Controls("RCD_P" & P(1, X) & "Con1").Value = 0
    If Controls("Earth_P" & P(1, X) & "Con1").Value = "" Then Controls("Earth_P" & P(1, X) & "Con1").Value = 0
    If Controls("DataRun_P" & P(1, X) & "Con1").Value = "" Then Controls("DataRun_P" & P(1, X) & "Con1").Value = 0
    If Controls("Dia68_P" & P(1, X) & "Con1").Value = "" Then Controls("Dia68_P" & P(1, X) & "Con1").Value = 0
    
    'Console 2
    If Controls("P" & P(1, X) & "Con2Console").Value = "" Then Controls("P" & P(1, X) & "Con2Console").Value = 0
    If Controls("Suction_P" & P(1, X) & "Con2").Value = "" Then Controls("Suction_P" & P(1, X) & "Con2").Value = 0
    If Controls("MedAir_P" & P(1, X) & "Con2").Value = "" Then Controls("MedAir_P" & P(1, X) & "Con2").Value = 0
    If Controls("CO2_P" & P(1, X) & "Con2").Value = "" Then Controls("CO2_P" & P(1, X) & "Con2").Value = 0
    If Controls("N2O_P" & P(1, X) & "Con2").Value = "" Then Controls("N2O_P" & P(1, X) & "Con2").Value = 0
    If Controls("Oxygen_P" & P(1, X) & "Con2").Value = "" Then Controls("Oxygen_P" & P(1, X) & "Con2").Value = 0
    If Controls("ToolAir_P" & P(1, X) & "Con2").Value = "" Then Controls("ToolAir_P" & P(1, X) & "Con2").Value = 0
    If Controls("Scavenge_P" & P(1, X) & "Con2").Value = "" Then Controls("Scavenge_P" & P(1, X) & "Con2").Value = 0
    If Controls("UPS_Blue_P" & P(1, X) & "Con2").Value = "" Then Controls("UPS_Blue_P" & P(1, X) & "Con2").Value = 0
    If Controls("ESS_Red_10Amp_P" & P(1, X) & "Con2").Value = "" Then Controls("ESS_Red_10Amp_P" & P(1, X) & "Con2").Value = 0
    If Controls("ESS_Red_15Amp_P" & P(1, X) & "Con2").Value = "" Then Controls("ESS_Red_15Amp_P" & P(1, X) & "Con2").Value = 0
    If Controls("ESS_Red_20Amp_P" & P(1, X) & "Con2").Value = "" Then Controls("ESS_Red_20Amp_P" & P(1, X) & "Con2").Value = 0
    If Controls("PowerInd_P" & P(1, X) & "Con2").Value = "" Then Controls("PowerInd_P" & P(1, X) & "Con2").Value = 0
    If Controls("RCD_P" & P(1, X) & "Con2").Value = "" Then Controls("RCD_P" & P(1, X) & "Con2").Value = 0
    If Controls("Earth_P" & P(1, X) & "Con2").Value = "" Then Controls("Earth_P" & P(1, X) & "Con2").Value = 0
    If Controls("DataRun_P" & P(1, X) & "Con2").Value = "" Then Controls("DataRun_P" & P(1, X) & "Con2").Value = 0
    If Controls("Dia68_P" & P(1, X) & "Con2").Value = "" Then Controls("Dia68_P" & P(1, X) & "Con2").Value = 0
    
    'Zero out Accessories textboxes if empty
    For j = 0 To qtyPendant
        If Controls("P" & P(1, X) & "_Acc_Qty" & j).Value = "" Then
            Controls("P" & P(1, X) & "_Acc_Qty" & j).Value = 0
        End If
    Next j

    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 65
    ProgressBar.Label.Caption = "Exporting Pendant data..."
    ProgressBar.Repaint

    'Store user inputs into Configurator worksheet to be loaded when the Configurator is used next time
    With Sheets("Configurator")
        
        .Range("P" & P(1, X) & "Rm8Name") = Controls("Pendant" & P(1, X) & "Name").Value
        .Range("P" & P(1, X) & "Rm8Qty") = Controls("Pendant" & P(1, X) & "No").Value
        .Range("P" & P(1, X) & "Rm8Desc") = Controls("Pendant" & P(1, X) & "Description").Value
        
        If Controls("Pendant" & P(1, X) & "S").Value = True Then
            .Range("P" & P(1, X) & "Rm8Type") = "Solo"
        ElseIf Controls("Pendant" & P(1, X) & "T").Value = True Then
            .Range("P" & P(1, X) & "Rm8Type") = "Tandem"
        ElseIf Controls("Pendant" & P(1, X) & "ICU").Value = True Then
            .Range("P" & P(1, X) & "Rm8Type") = "Tandem - ICU"
        ElseIf Controls("Pendant" & P(1, X) & "Ana").Value = True Then
            .Range("P" & P(1, X) & "Rm8Type") = "Std Ana"
        ElseIf Controls("Pendant" & P(1, X) & "EQ").Value = True Then
            .Range("P" & P(1, X) & "Rm8Type") = "Std EQ"
        ElseIf Controls("Pendant" & P(1, X) & "StdICU").Value = True Then
            .Range("P" & P(1, X) & "Rm8Type") = "Std ICU"
        ElseIf Controls("Pendant" & P(1, X) & "PLP").Value = True Then
            .Range("P" & P(1, X) & "Rm8Type") = "Std PLP"
        End If
        
        'Options
        'Console 1
        If Controls("P" & P(1, X) & "Con1ArmSingle").Value = False And Controls("P" & P(1, X) & "Con1ArmDouble").Value = True Then
            .Range("P" & P(1, X) & "Rm8Con1ArmSingle") = False
            .Range("P" & P(1, X) & "Rm8Con1ArmDual") = True
        ElseIf Controls("P" & P(1, X) & "Con1ArmSingle").Value = True And Controls("P" & P(1, X) & "Con1ArmDouble").Value = False Then
            .Range("P" & P(1, X) & "Rm8Con1ArmSingle") = True
            .Range("P" & P(1, X) & "Rm8Con1ArmDual") = False
        Else
            .Range("P" & P(1, X) & "Rm8Con1ArmSingle") = False
            .Range("P" & P(1, X) & "Rm8Con1ArmDual") = False
        End If
        If Controls("P" & P(1, X) & "Con1ArmFixed").Value = False And Controls("P" & P(1, X) & "Con1ArmMotorised").Value = True Then
            .Range("P" & P(1, X) & "Rm8Con1ArmFixed") = False
            .Range("P" & P(1, X) & "Rm8Con1ArmMotorised") = True
        ElseIf Controls("P" & P(1, X) & "Con1ArmFixed").Value = True And Controls("P" & P(1, X) & "Con1ArmMotorised").Value = False Then
            .Range("P" & P(1, X) & "Rm8Con1ArmFixed") = True
            .Range("P" & P(1, X) & "Rm8Con1ArmMotorised") = False
        ElseIf Controls("P" & P(1, X) & "Con1ArmFixed").Value = True And Controls("P" & P(1, X) & "Con1ArmMotorised").Value = True Then
            .Range("P" & P(1, X) & "Rm8Con1ArmFixed") = True
            .Range("P" & P(1, X) & "Rm8Con1ArmMotorised") = True
        Else
            .Range("P" & P(1, X) & "Rm8Con1ArmFixed") = False
            .Range("P" & P(1, X) & "Rm8Con1ArmMotorised") = False
        End If
        If Controls("P" & P(1, X) & "Con1Hammer").Value = False Then
            .Range("P" & P(1, X) & "Rm8Con1Hammer") = False
        Else
            .Range("P" & P(1, X) & "Rm8Con1Hammer") = True
        End If
        If Controls("P" & P(1, X) & "Con1Vertical").Value = False Then
            .Range("P" & P(1, X) & "Rm8Con1Vertical") = False
        Else
            .Range("P" & P(1, X) & "Rm8Con1Vertical") = True
        End If
        If Controls("P" & P(1, X) & "Con1LMC").Value = False Then
            .Range("P" & P(1, X) & "Rm8Con1LMC") = False
        Else
            .Range("P" & P(1, X) & "Rm8Con1LMC") = True
        End If
        
        'Console 2
        If Controls("P" & P(1, X) & "Con2Hammer").Value = False Then
            .Range("P" & P(1, X) & "Rm8Con2Hammer") = False
        Else
            .Range("P" & P(1, X) & "Rm8Con2Hammer") = True
        End If
        If Controls("P" & P(1, X) & "Con2Vertical").Value = False Then
            .Range("P" & P(1, X) & "Rm8Con2Vertical") = False
        Else
            .Range("P" & P(1, X) & "Rm8Con2Vertical") = True
        End If
        If Controls("P" & P(1, X) & "Con2LMC").Value = False Then
            .Range("P" & P(1, X) & "Rm8Con2LMC") = False
        Else
            .Range("P" & P(1, X) & "Rm8Con2LMC") = True
        End If
        
        'Outlets and data
        'Console 1
        .Range("P" & P(1, X) & "Rm8Con1ArmConfig") = Controls("P" & P(1, X) & "Con1ArmConfig").Value
        .Range("P" & P(1, X) & "Rm8Con1Console") = Controls("P" & P(1, X) & "Con1Console").Value
        .Range("P" & P(1, X) & "Rm8Con1Suction") = Controls("Suction_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1MedAir") = Controls("MedAir_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1CO2") = Controls("CO2_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1N2O") = Controls("N2O_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1Oxygen") = Controls("Oxygen_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1ToolAir") = Controls("ToolAir_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1Scavenge") = Controls("Scavenge_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1UPS") = Controls("UPS_Blue_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1ESS_10") = Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1ESS_15") = Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1ESS_20") = Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1Power") = Controls("PowerInd_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1RCD") = Controls("RCD_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1Earth") = Controls("Earth_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1DataRun") = Controls("DataRun_P" & P(1, X) & "Con1").Value
        .Range("P" & P(1, X) & "Rm8Con1Dia68") = Controls("Dia68_P" & P(1, X) & "Con1").Value

        'Store Cutout Types/Qty textbox
        .Range("P" & P(1, X) & "Rm8Con1AV") = Controls("AV_P" & P(1, X) & "Con1").Value
    
        'Console 2
        .Range("P" & P(1, X) & "Rm8Con2Console") = Controls("P" & P(1, X) & "Con2Console").Value
        .Range("P" & P(1, X) & "Rm8Con2Suction") = Controls("Suction_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2MedAir") = Controls("MedAir_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2CO2") = Controls("CO2_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2N2O") = Controls("N2O_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2Oxygen") = Controls("Oxygen_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2ToolAir") = Controls("ToolAir_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2Scavenge") = Controls("Scavenge_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2UPS") = Controls("UPS_Blue_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2ESS_10") = Controls("ESS_Red_10Amp_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2ESS_15") = Controls("ESS_Red_15Amp_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2ESS_20") = Controls("ESS_Red_20Amp_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2Power") = Controls("PowerInd_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2RCD") = Controls("RCD_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2Earth") = Controls("Earth_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2DataRun") = Controls("DataRun_P" & P(1, X) & "Con2").Value
        .Range("P" & P(1, X) & "Rm8Con2Dia68") = Controls("Dia68_P" & P(1, X) & "Con2").Value
        
        'Store Cutout Types/Qty textbox
        .Range("P" & P(1, X) & "Rm8Con2AV") = Controls("AV_P" & P(1, X) & "Con2").Value

        'Re-set accessories (Room Configuration)
        Set FindFirstPAccRow = .Range(Rm8Range).Find(What:="Accessories - Pendants", LookIn:=xlValues)
        Set FindLastPAccRow = .Range(Rm8Range).Find(What:="End_Pendant", LookIn:=xlValues)
        
        'First and last row for Pendant Accessories
        firstPAccRow = FindFirstPAccRow.Row + 1
        lastPAccRow = FindLastPAccRow.Row - 1

        'Accessories
        'Clear acc for Pendant if previously configured
        For I = firstPAccRow To lastPAccRow
            .Range(P(2, X) & I).Value = ""
        Next I
        
        'Store configured acc QTYs
        For I = firstPAccRow To lastPAccRow
            For j = 0 To Controls("Pendant" & P(1, X) & "AccSel").ListCount - 1
                If .Range("B" & I).Value = Controls("Pendant" & P(1, X) & "AccSel").List(j) Then
                    .Range(P(2, X) & I).Value = CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value)
                End If
            Next j
        Next I
    End With

    'Pendant Solo
    If Controls("Pendant" & P(1, X) & "S").Value = True Or Controls("Pendant" & P(1, X) & "Ana").Value = True Or Controls("Pendant" & P(1, X) & "EQ").Value = True Then
    
        With Sheets("Proposal")
            'First and last row for Solo Pendant to be copied
            'Find row number after Pendant_Solo heading as first row, and row number before Pendant_Tandem heading as last row
            Set FindFirstPendantSoloRow = .Range("A:A").Find(What:="Pendant_Solo", LookIn:=xlValues)
            Set FindLastPendantSoloRow = .Range("A:A").Find(What:="Pendant_Tandem", LookIn:=xlValues)
            Set FindPendantRow = .Range("A:A").Find(What:="Configurator_Rm8Pendant", LookIn:=xlValues)
        End With
        
        'First and last row for Pendant Solo
        firstPendantSoloRow = FindFirstPendantSoloRow.Row
        lastPendantSoloRow = FindLastPendantSoloRow.Row - 1
        pendantRow = FindPendantRow.Row
        
        'Copy and paste the relevant pendant rows into the Configurator section, and export the user input data into the relevant cells
        Rows(firstPendantSoloRow & ":" & lastPendantSoloRow).Select
        Application.CutCopyMode = False
        Selection.Copy
        Rows(pendantRow & ":" & pendantRow).Select
        Selection.Insert Shift:=xlDown
        
        'Find row number before Configurator_Pendant heading as last row of Pendant items
        Set FindLastRow = Range("A:A").Find(What:="Configurator_Rm8Pendant", LookIn:=xlValues)
        lastRow = FindLastRow.Row - 1
        
        With Sheets("Proposal")
            'Find first and last row for Configurator Table
            Set FindConfiguratorTableRow = .Range("A:A").Find(What:="ConfiguratorTable_Rm8", LookIn:=xlValues)
        End With
        configuratorTableRow = FindConfiguratorTableRow.Row + 1
        
        'Multiply the pendant no. by no. of rooms
        pendantQTY = CInt(Controls("Pendant" & P(1, X) & "No").Value) * CInt(Controls("Room8No").Value)
        
        'Name the pendant bundle, and quantify it
        Worksheets("Configurator").Range("P" & P(1, X) & "Rm8Image").Copy Range("A" & pendantRow)
        Range("B" & pendantRow).Value = Controls("Pendant" & P(1, X) & "Name").Value
        Range("C" & pendantRow).Value = CInt(Controls("Pendant" & P(1, X) & "No").Value)
        Range("E" & pendantRow).Value = pendantQTY

        'Fill the line item QTYs accordingly
        For I = pendantRow + 1 To lastRow
            'Solo Interface Plate
            If Range("A" & I).Value = "AM-MNT-SIN" Then
                Range("E" & I).Value = pendantQTY
                Range("C" & I).Value = 1
            'Australian Wiring
            ElseIf Range("A" & I).Value = "NS-EL-WIR-AUS" Then
                Range("E" & I).Value = pendantQTY
                Range("C" & I).Value = 1
            'Power Indicator
            ElseIf Range("A" & I).Value = "EL-REC-IND-AMB-AUS" Then
                Range("E" & I).Value = CInt(Controls("PowerInd_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("PowerInd_P" & P(1, X) & "Con1").Value)
            '1 Power Control
            ElseIf Range("A" & I).Value = "LH-PWR-EM-1-600-MG" Then
                Range("E" & I).Value = pendantQTY
                Range("C" & I).Value = 1
            'Arm Configuration
            ElseIf Range("B" & I).Value = Controls("P" & P(1, X) & "Con1ArmConfig").Value Then
                Range("E" & I).Value = pendantQTY
                Range("C" & I).Value = 1
            'Console
            ElseIf Range("B" & I).Value = Controls("P" & P(1, X) & "Con1Console").Value Then
                Range("E" & I).Value = pendantQTY
                Range("C" & I).Value = 1
            'Cut Out Type
            ElseIf Range("A" & I).Value = "NS-CUT-AUS-GAS" Then
                Range("E" & I).Value = (CInt(Controls("Suction_P" & P(1, X) & "Con1").Value) + CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value) + CInt(Controls("CO2_P" & P(1, X) & "Con1").Value) + CInt(Controls("N2O_P" & P(1, X) & "Con1").Value) + CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value) + CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value) + CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value)) * pendantQTY
                Range("C" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con1").Value) + CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value) + CInt(Controls("CO2_P" & P(1, X) & "Con1").Value) + CInt(Controls("N2O_P" & P(1, X) & "Con1").Value) + CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value) + CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value) + CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "NS-CUT-EL-AUS-10A" Then
                Range("E" & I).Value = (CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value) + CInt(Controls("UPS_Blue_P" & P(1, X) & "Con1").Value)) * pendantQTY
                Range("C" & I).Value = CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value) + CInt(Controls("UPS_Blue_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "NS-CUT-EL-AUS-15A" Then
                Range("E" & I).Value = (CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value) + CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value)) * pendantQTY
                Range("C" & I).Value = CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value) + CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "NS-CUT-AUS-PWR-IND" Then
                Range("E" & I).Value = CInt(Controls("PowerInd_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("PowerInd_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "NS-CUT-AUS-55x75" Then
                Range("E" & I).Value = (CInt(Controls("Dia68_P" & P(1, X) & "Con1").Value) + CInt(Controls("RCD_P" & P(1, X) & "Con1").Value)) * pendantQTY
                Range("C" & I).Value = CInt(Controls("Dia68_P" & P(1, X) & "Con1").Value) + CInt(Controls("RCD_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "Data-Port-Run" Then
                Range("E" & I).Value = CInt(Controls("DataRun_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("DataRun_P" & P(1, X) & "Con1").Value)
            'Gas Outlet
            ElseIf Range("A" & I).Value = "CN-VAC-SIS-AU-ASSY" Then
                Range("E" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "CN-AIR-SIS-AU-ASSY" Then
                Range("E" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "CN-CO2-SIS-AU-ASSY" Then
                Range("E" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "CN-N2O-SIS-AU-ASSY" Then
                Range("E" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "CN-OXY-SIS-AU-ASSY" Then
                Range("E" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "CN-INA-SIS-AU-ASSY" Then
                Range("E" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "AMMSCGO" Then
                Range("E" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "HS-18EV-NFNMC5" Then
                'Auto include Scavenge hose from Amico if Scavenge outlet is selected
                If CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value) <> 0 Then
                    Range("E" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value) * pendantQTY
                    Range("C" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value)
                End If
            'Ceiling NIST
            ElseIf Range("A" & I).Value = "NISTGOCPS" Then
                Range("E" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "NISTGOCA" Then
                Range("E" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "NISTCO2" Then
                Range("E" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "NISTGOCNO" Then
                Range("E" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "NISTGOCO" Then
                Range("E" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "NISTGOCST" Then
                Range("E" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "NISTGOCPGS" Then
                Range("E" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value)
            'Electrical Outlet
            ElseIf Range("A" & I).Value = "OB10NDB" Then
                Range("E" & I).Value = CInt(Controls("UPS_Blue_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("UPS_Blue_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "OB10NRD" Then
                Range("E" & I).Value = CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "OB15DNRD" Then
                Range("E" & I).Value = CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "OB15DNDB" Then
                Range("E" & I).Value = CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "RCD" Then
                Range("E" & I).Value = CInt(Controls("RCD_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("RCD_P" & P(1, X) & "Con1").Value)
            ElseIf Range("A" & I).Value = "EARTH PIN (NZ)" Then
                Range("E" & I).Value = CInt(Controls("Earth_P" & P(1, X) & "Con1").Value) * pendantQTY
                Range("C" & I).Value = CInt(Controls("Earth_P" & P(1, X) & "Con1").Value)
            'Installation
            ElseIf Range("A" & I).Value = "Install-PendantSolo" Then
                Range("E" & I).Value = pendantQTY
                Range("C" & I).Value = 1
                installP1 = "=F" & I
            End If
            'Accessories
            For j = 0 To Controls("Pendant" & P(1, X) & "AccSel").ListCount - 1
                If Range("B" & I).Value = Controls("Pendant" & P(1, X) & "AccSel").List(j) Then
                    Range("E" & I).Value = CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value) * pendantQTY
                    Range("C" & I).Value = CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value)
                End If
            Next j
        Next I
        
    'Pendant Tandem
    ElseIf Controls("Pendant" & P(1, X) & "StdICU").Value = True Or Controls("Pendant" & P(1, X) & "T").Value = True Or Controls("Pendant" & P(1, X) & "ICU").Value = True Or Controls("Pendant" & P(1, X) & "PLP").Value = True Then
        Call PendantTandemTab
    End If
    
    'Auto include certain line items if specified accessory is selected - for both Solo and Tandem
    For j = 0 To Controls("Pendant" & P(1, X) & "AccSel").ListCount - 1
        If Controls("Pendant" & P(1, X) & "AccSel").List(j) = "LED Night Light Assembly for 315mm x 230mm Console (without switch)" Then
            For k = pendantRow + 1 To lastRow
                If Range("A" & k).Value = "2031VA" Then
                    Range("E" & k).Value = CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value) * pendantQTY
                    Range("C" & k).Value = CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value)
                End If
            Next k
            
        ElseIf Controls("Pendant" & P(1, X) & "AccSel").List(j) = "Cable Support Arm" Then
            For k = pendantRow + 1 To lastRow
                If Range("A" & k).Value = "YY104328-01" Then
                    Range("E" & k).Value = CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value) * pendantQTY
                    Range("C" & k).Value = CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value)
                End If
            Next k
            
        'If knuckle mount light is chosen (Mira 70/110 or Vega 80), auto include the mount adaptor and cable
        ElseIf Controls("Pendant" & P(1, X) & "AccSel").List(j) = "Mira LED 70, Knuckle Mount, Single, Extended Arm, 150mm Drop Tube" _
        Or Controls("Pendant" & P(1, X) & "AccSel").List(j) = "Mira LED 110, Knuckle Mount, Single, Extended Arm, 150mm Drop Tube" _
        Or Controls("Pendant" & P(1, X) & "AccSel").List(j) = "Vega 80 LED, Knuckle Mount, Single, Extended Arm, 150 mm Drop Tube" _
        Or Controls("Pendant" & P(1, X) & "AccSel").List(j) = "Mira LED 70, Knuckle Mount, Single, Extended Arm, 300mm Drop Tube" _
        Or Controls("Pendant" & P(1, X) & "AccSel").List(j) = "Mira LED 70, Knuckle Mount, Single, Extended Arm, 500mm Drop Tube" _
        Or Controls("Pendant" & P(1, X) & "AccSel").List(j) = "Mira LED 110, Knuckle Mount, Single, Extended Arm, 300mm Drop Tube" _
        Or Controls("Pendant" & P(1, X) & "AccSel").List(j) = "Mira LED 110, Knuckle Mount, Single, Extended Arm, 500mm Drop Tube" _
        Or Controls("Pendant" & P(1, X) & "AccSel").List(j) = "Vega 80 LED, Knuckle Mount, Single, Extended Arm, 300 mm Drop Tube" _
        Or Controls("Pendant" & P(1, X) & "AccSel").List(j) = "Vega 80 LED, Knuckle Mount, Single, Extended Arm, 500 mm Drop Tube" _
        Then
        
            For k = pendantRow + 1 To lastRow
                'Mount adaptor
                If Range("A" & k).Value = "LH-MNT-KNL-MIRA" Then
                    Range("E" & k).Value = Range("E" & k).Value + (CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value) * pendantQTY)
                    Range("C" & k).Value = Range("C" & k).Value + CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value)
                
                'Cable
                ElseIf Range("A" & k).Value = "L-MLED-CBLE-1" Then
                    Range("E" & k).Value = Range("E" & k).Value + (CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value) * pendantQTY)
                    Range("C" & k).Value = Range("C" & k).Value + CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value)
                End If
            Next k
        End If
    Next j
    
    I = pendantRow
    
    'Add details to Configurator table below pricing summary
    Rows(configuratorTableRow & ":" & configuratorTableRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
    
    'Equate Column A to the Room Name with default font color
    Range("A" & configuratorTableRow).Value = Controls("Room8Name").Value
    Range("A" & configuratorTableRow).Font.ColorIndex = 1
    
    'Fill in the rest of the columns
    Range("B" & configuratorTableRow).Value = Controls("Pendant" & P(1, X) & "Name").Value
    Range("G" & configuratorTableRow).Formula = installP1
    Range("H" & configuratorTableRow).Formula = Replace(Range("G" & configuratorTableRow).Formula, "F", "J")
    Range("E" & configuratorTableRow).Formula = Replace(Range("G" & configuratorTableRow).Formula, "F", "G")
    Range("F" & configuratorTableRow).Formula = "=G" & I
    
    'Calculate the OPM in Variable worksheet
    Sheets("Variable").Activate
    
    'Add Discounted Subtotal to the formula for OPM calculations depending on type of pendant selected
    'Pendant Solo and Tandem ICU
    If Controls("P" & P(1, X) & "Con1ArmFixed").Value = True And Controls("P" & P(1, X) & "Con1ArmMotorised").Value = False Then
    
        opmPFixedFormula = opmPFixedFormula & "+Proposal!G" & I
        Range("Config_Rm8OPM_PFixed").Formula = opmPFixedFormula

    ElseIf Controls("Pendant" & P(1, X) & "ICU").Value = True Then
    
        opmPFixedFormula = opmPFixedFormula & "+Proposal!G" & I
        Range("Config_Rm8OPM_PFixed").Formula = opmPFixedFormula

    ElseIf Controls("P" & P(1, X) & "Con1ArmFixed").Value = False And Controls("P" & P(1, X) & "Con1ArmMotorised").Value = False And Controls("Pendant" & P(1, X) & "ICU").Value = False Then
        'Nothing happens
    Else
        'Pendant Tandem
        opmPMotorisedFormula = opmPMotorisedFormula & "+Proposal!G" & I
        Range("Config_Rm8OPM_PMotor").Formula = opmPMotorisedFormula
    End If
    
    With Sheets("Tables")
        'First and last row for Configurator to be included in Tables worksheet
        Set FindConfiguratorRow = .Range("B:B").Find(What:="Configurator_Room8", LookIn:=xlValues)
        Set FindConfiguratorEndRow = .Range("B:B").Find(What:="Configurator_End_Rm8", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator section in Tables worksheet
    configuratorRow = FindConfiguratorRow.Row + 1
    configuratorEndRow = FindConfiguratorEndRow.Row
    
    j = configuratorRow
    k = configuratorEndRow
    
    'Add details to Configurator section in Tables worksheet
    Sheets("Tables").Activate
    Rows(k & ":" & k).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(j & ":" & j).Select
    Selection.Insert Shift:=xlDown
    
    'Fill in the relevant columns
    Range("B" & j).Value = Controls("Pendant" & P(1, X) & "Name").Value
    Range("B" & j).Font.ColorIndex = 1
    Worksheets("Proposal").Range("A" & I).Copy Worksheets("Tables").Range("C" & j)

    Range("D" & j).Value = Controls("Pendant" & P(1, X) & "Description").Value

    Range("E" & j).Formula = "=Proposal!E" & I
    Range("F" & j).Formula = "=Proposal!D" & I
    Range("G" & j).Formula = "=Proposal!F" & I
    Range("H" & j).Formula = "=Proposal!G" & I
    Range("K" & j).Formula = "=IFERROR(SUM(Proposal!I" & I + 1 & ":" & "I" & lastRow & "),0)"
    Range("L" & j).Formula = "=IFERROR(SUM(Proposal!J" & I + 1 & ":" & "J" & lastRow & "),0)"
    Range("M" & j).Formula = "=IFERROR(SUM(Proposal!K" & I + 1 & ":" & "K" & lastRow & "),0)"
    Range("N" & j).Formula = "=IFERROR(SUM(Proposal!L" & I + 1 & ":" & "L" & lastRow & "),0)"
    
    'Add the What-If table at Tables worksheet
    With Sheets("Tables")
        'Row for Configurator items to be included in the What-If table
        Set FindWhatIfStartRow = .Range("Q:Q").Find(What:="WhatIf_Rm8Start", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator section in What-If table
    whatIfStartRow = FindWhatIfStartRow.Row + 1

    'Copy the relevant info into What-If Table
    Rows(whatIfStartRow & ":" & whatIfStartRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
    
    'Fill in the relevant columns
    Range("Q" & whatIfStartRow) = Controls("Room8Name").Value
    Range("Q" & whatIfStartRow).Font.ColorIndex = 1
                
    Range("R" & whatIfStartRow) = Controls("Pendant" & P(1, X) & "Name").Value
    Range("S" & whatIfStartRow).Formula = "=IFERROR(SUM(Proposal!AC" & I + 1 & ":" & "AC" & lastRow & "),0)"
    Range("T" & whatIfStartRow).Formula = "=IFERROR(Proposal!G" & I & ",0)"
        
    Sheets("Proposal").Activate
Next X
End Sub

'Pendant Tandem Section for Save button
Private Sub PendantTandemTab()

    With Sheets("Proposal")
        'First and last row for Tandem Pendant to be copied
        'Find row number after Pendant_Tandem heading as first row, and row number before P1 heading as last row
        Set FindFirstPendantTandemRow = .Range("A:A").Find(What:="Pendant_Tandem", LookIn:=xlValues)
        Set FindLastPendantTandemRow = .Range("A:A").Find(What:="Digital Integration", LookIn:=xlValues)
        Set FindPendantRow = .Range("A:A").Find(What:="Configurator_Rm8Pendant", LookIn:=xlValues)
    End With
    
    'First and last row for Pendant Tandem
    firstPendantTandemRow = FindFirstPendantTandemRow.Row
    lastPendantTandemRow = FindLastPendantTandemRow.Row - 1
    pendantRow = FindPendantRow.Row

    'Copy and paste the relevant pendant rows into the Configurator section, and export the user input data into the relevant cells
    Rows(firstPendantTandemRow & ":" & lastPendantTandemRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(pendantRow & ":" & pendantRow).Select
    Selection.Insert Shift:=xlDown
    
    'Find row number before Configurator_Pendant heading as last row of Pendant items
    Set FindLastRow = Range("A:A").Find(What:="Configurator_Rm8Pendant", LookIn:=xlValues)
    lastRow = FindLastRow.Row - 1
    
    With Sheets("Proposal")
        'Find first and last row for Configurator Table
        Set FindConfiguratorTableRow = .Range("A:A").Find(What:="ConfiguratorTable_Rm8", LookIn:=xlValues)
    End With
    configuratorTableRow = FindConfiguratorTableRow.Row + 1
    
    'Multiply the pendant no. by no. of rooms
    pendantQTY = CInt(Controls("Pendant" & P(1, X) & "No").Value) * CInt(Controls("Room8No").Value)
    
    'Name the pendant config, and quantify it
    Worksheets("Configurator").Range("P" & P(1, X) & "Rm8Image").Copy Range("A" & pendantRow)
    Range("B" & pendantRow).Value = Controls("Pendant" & P(1, X) & "Name").Value
    Range("C" & pendantRow).Value = CInt(Controls("Pendant" & P(1, X) & "No").Value)
    Range("E" & pendantRow).Value = pendantQTY
    
    'First row of Pendant Tandem Section
    firstRow = pendantRow
    
    'Range of which Pendant Tandem Section is configured
    ConfigRange = "B" & firstRow & ":" & "B" & lastRow
    
    With Sheets("Proposal")
        'Find row number after Console 1 heading as first row, and row number before Console 2 heading as last row for Console 1 QTYs
        Set FindFirstConsole1Row = .Range(ConfigRange).Find(What:="Console 1", LookIn:=xlValues)
        Set FindLastConsole1Row = .Range(ConfigRange).Find(What:="Console 2", LookIn:=xlValues)
        
        'Find row number after Console 2 heading as first row, and row number before Australian Wiring heading as last row for Console 2 QTYs
        Set FindFirstConsole2Row = .Range(ConfigRange).Find(What:="Console 2", LookIn:=xlValues)
        Set FindLastConsole2Row = .Range(ConfigRange).Find(What:="6) Australian Wiring (** one per console **)", LookIn:=xlValues)
    End With
    
    'First and last rows for Console 1 and 2
    firstConsole1Row = FindFirstConsole1Row.Row + 1
    lastConsole1Row = FindLastConsole1Row.Row - 1
    firstConsole2Row = FindFirstConsole2Row.Row + 1
    lastConsole2Row = FindLastConsole2Row.Row - 1

'Fill the general line item QTYs
For I = pendantRow + 1 To lastRow
    'Tandem Interface Plate
    If Range("A" & I).Value = "AM-MNT-TAN" Then
        Range("E" & I).Value = pendantQTY
        Range("C" & I).Value = 1
    'Australian Wiring
    ElseIf Range("A" & I).Value = "NS-EL-WIR-AUS" Then
        Range("E" & I).Value = 2 * pendantQTY
        Range("C" & I).Value = 2
    'Power Indicator
    ElseIf Range("A" & I).Value = "EL-REC-IND-AMB-AUS" Then
        Range("E" & I).Value = (CInt(Controls("PowerInd_P" & P(1, X) & "Con1").Value) + CInt(Controls("PowerInd_P" & P(1, X) & "Con2").Value)) * pendantQTY
        Range("C" & I).Value = CInt(Controls("PowerInd_P" & P(1, X) & "Con1").Value) + CInt(Controls("PowerInd_P" & P(1, X) & "Con2").Value)
    '2 Power Control
    ElseIf Range("A" & I).Value = "LH-PWR-EM-2-600-MG" Then
        Range("E" & I).Value = pendantQTY
        Range("C" & I).Value = 1
    'Arm Configuration
    ElseIf Range("B" & I).Value = Controls("P" & P(1, X) & "Con1ArmConfig").Value Then
        Range("E" & I).Value = pendantQTY
        Range("C" & I).Value = 1
    'Auto include for all tandem arm configs
    ElseIf Range("B" & I).Value = "Custom Long Ceiling Bearing Spacer 9inches" Then
        Range("E" & I).Value = pendantQTY
        Range("C" & I).Value = 1
    'Installation
    ElseIf Range("A" & I).Value = "Install-PendantTandem" Then
        Range("E" & I).Value = pendantQTY
        Range("C" & I).Value = 1
        installP1 = "=F" & I
    End If
    'Accessories
    For j = 0 To Controls("Pendant" & P(1, X) & "AccSel").ListCount - 1
        If Range("B" & I).Value = Controls("Pendant" & P(1, X) & "AccSel").List(j) Then
            Range("E" & I).Value = CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value) * pendantQTY
            Range("C" & I).Value = CInt(Controls("P" & P(1, X) & "_Acc_Qty" & j).Value)
        End If
    Next j
Next I

'Fill the line item QTYs for Console 1
For I = firstConsole1Row To lastConsole1Row
    If Range("B" & I).Value = Controls("P" & P(1, X) & "Con1Console").Value Then
        Range("E" & I).Value = pendantQTY
        Range("C" & I).Value = 1
    'Cut Out Type
    ElseIf Range("A" & I).Value = "NS-CUT-AUS-GAS" Then
        Range("E" & I).Value = (CInt(Controls("Suction_P" & P(1, X) & "Con1").Value) + CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value) + CInt(Controls("CO2_P" & P(1, X) & "Con1").Value) + CInt(Controls("N2O_P" & P(1, X) & "Con1").Value) + CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value) + CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value) + CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value)) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con1").Value) + CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value) + CInt(Controls("CO2_P" & P(1, X) & "Con1").Value) + CInt(Controls("N2O_P" & P(1, X) & "Con1").Value) + CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value) + CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value) + CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "NS-CUT-EL-AUS-10A" Then
        Range("E" & I).Value = (CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value) + CInt(Controls("UPS_Blue_P" & P(1, X) & "Con1").Value)) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value) + CInt(Controls("UPS_Blue_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "NS-CUT-EL-AUS-15A" Then
        Range("E" & I).Value = (CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value) + CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value)) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value) + CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "NS-CUT-AUS-PWR-IND" Then
        Range("E" & I).Value = CInt(Controls("PowerInd_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("PowerInd_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "NS-CUT-AUS-55x75" Then
        Range("E" & I).Value = (CInt(Controls("Dia68_P" & P(1, X) & "Con1").Value) + CInt(Controls("RCD_P" & P(1, X) & "Con1").Value)) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Dia68_P" & P(1, X) & "Con1").Value) + CInt(Controls("RCD_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "Data-Port-Run" Then
        Range("E" & I).Value = CInt(Controls("DataRun_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("DataRun_P" & P(1, X) & "Con1").Value)
    'Gas Outlet
    ElseIf Range("A" & I).Value = "CN-VAC-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "CN-AIR-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "CN-CO2-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "CN-N2O-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "CN-OXY-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "CN-INA-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "AMMSCGO" Then
        Range("E" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "HS-18EV-NFNMC5" Then
        'Auto include Scavenge hose from Amico if Scavenge outlet is selected
        If CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value) <> 0 Then
            Range("E" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value) * pendantQTY
            Range("C" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value)
        End If
    'Ceiling NIST
    ElseIf Range("A" & I).Value = "NISTGOCPS" Then
        Range("E" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "NISTGOCA" Then
        Range("E" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "NISTCO2" Then
        Range("E" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "NISTGOCNO" Then
        Range("E" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "NISTGOCO" Then
        Range("E" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "NISTGOCST" Then
        Range("E" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "NISTGOCPGS" Then
        Range("E" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con1").Value)
    'Electrical Outlet
    ElseIf Range("A" & I).Value = "OB10NDB" Then
        Range("E" & I).Value = CInt(Controls("UPS_Blue_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("UPS_Blue_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "OB10NRD" Then
        Range("E" & I).Value = CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "OB15DNRD" Then
        Range("E" & I).Value = CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "OB15DNDB" Then
        Range("E" & I).Value = CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "RCD" Then
        Range("E" & I).Value = CInt(Controls("RCD_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("RCD_P" & P(1, X) & "Con1").Value)
    ElseIf Range("A" & I).Value = "EARTH PIN (NZ)" Then
        Range("E" & I).Value = CInt(Controls("Earth_P" & P(1, X) & "Con1").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Earth_P" & P(1, X) & "Con1").Value)
    End If
Next I

'Fill the line item QTYs for Console 2
For I = firstConsole2Row To lastConsole2Row
    If Range("B" & I).Value = Controls("P" & P(1, X) & "Con2Console").Value Then
        Range("E" & I).Value = pendantQTY
        Range("C" & I).Value = 1
    'Cut Out Type
    ElseIf Range("A" & I).Value = "NS-CUT-AUS-GAS" Then
        Range("E" & I).Value = (CInt(Controls("Suction_P" & P(1, X) & "Con2").Value) + CInt(Controls("MedAir_P" & P(1, X) & "Con2").Value) + CInt(Controls("CO2_P" & P(1, X) & "Con2").Value) + CInt(Controls("N2O_P" & P(1, X) & "Con2").Value) + CInt(Controls("Oxygen_P" & P(1, X) & "Con2").Value) + CInt(Controls("ToolAir_P" & P(1, X) & "Con2").Value) + CInt(Controls("Scavenge_P" & P(1, X) & "Con2").Value)) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con2").Value) + CInt(Controls("MedAir_P" & P(1, X) & "Con2").Value) + CInt(Controls("CO2_P" & P(1, X) & "Con2").Value) + CInt(Controls("N2O_P" & P(1, X) & "Con2").Value) + CInt(Controls("Oxygen_P" & P(1, X) & "Con2").Value) + CInt(Controls("ToolAir_P" & P(1, X) & "Con2").Value) + CInt(Controls("Scavenge_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "NS-CUT-EL-AUS-10A" Then
        Range("E" & I).Value = (CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con2").Value) + CInt(Controls("UPS_Blue_P" & P(1, X) & "Con2").Value)) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con2").Value) + CInt(Controls("UPS_Blue_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "NS-CUT-EL-AUS-15A" Then
        Range("E" & I).Value = (CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con2").Value) + CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con2").Value)) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con2").Value) + CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "NS-CUT-AUS-PWR-IND" Then
        Range("E" & I).Value = CInt(Controls("PowerInd_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("PowerInd_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "NS-CUT-AUS-55x75" Then
        Range("E" & I).Value = (CInt(Controls("Dia68_P" & P(1, X) & "Con2").Value) + CInt(Controls("RCD_P" & P(1, X) & "Con2").Value)) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Dia68_P" & P(1, X) & "Con2").Value) + CInt(Controls("RCD_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "Data-Port-Run" Then
        Range("E" & I).Value = CInt(Controls("DataRun_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("DataRun_P" & P(1, X) & "Con2").Value)
    'Gas Outlet
    ElseIf Range("A" & I).Value = "CN-VAC-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "CN-AIR-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "CN-CO2-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "CN-N2O-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "CN-OXY-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "CN-INA-SIS-AU-ASSY" Then
        Range("E" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "AMMSCGO" Then
        Range("E" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "HS-18EV-NFNMC5" Then
        'Auto include Scavenge hose from Amico if Scavenge outlet is selected
        If CInt(Controls("Scavenge_P" & P(1, X) & "Con2").Value) <> 0 Then
            Range("E" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con2").Value) * pendantQTY
            Range("C" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con2").Value)
        End If
    'Ceiling NIST
    ElseIf Range("A" & I).Value = "NISTGOCPS" Then
        Range("E" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Suction_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "NISTGOCA" Then
        Range("E" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("MedAir_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "NISTCO2" Then
        Range("E" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("CO2_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "NISTGOCNO" Then
        Range("E" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("N2O_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "NISTGOCO" Then
        Range("E" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Oxygen_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "NISTGOCST" Then
        Range("E" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ToolAir_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "NISTGOCPGS" Then
        Range("E" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Scavenge_P" & P(1, X) & "Con2").Value)
    'Electrical Outlet
    ElseIf Range("A" & I).Value = "OB10NDB" Then
        Range("E" & I).Value = CInt(Controls("UPS_Blue_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("UPS_Blue_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "OB10NRD" Then
        Range("E" & I).Value = CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ESS_Red_10Amp_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "OB15DNRD" Then
        Range("E" & I).Value = CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ESS_Red_15Amp_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "OB15DNDB" Then
        Range("E" & I).Value = CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("ESS_Red_20Amp_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "RCD" Then
        Range("E" & I).Value = CInt(Controls("RCD_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("RCD_P" & P(1, X) & "Con2").Value)
    ElseIf Range("A" & I).Value = "EARTH PIN (NZ)" Then
        Range("E" & I).Value = CInt(Controls("Earth_P" & P(1, X) & "Con2").Value) * pendantQTY
        Range("C" & I).Value = CInt(Controls("Earth_P" & P(1, X) & "Con2").Value)
    End If
Next I
End Sub

'Amico Accessories for Save button
Private Sub AmicoAccTab()

Unprotect

    'Zero out Accessories textboxes if empty
    For j = 0 To qtyAmicoAcc
        If Controls("Amico_Acc_Qty" & j).Value = "" Then
            Controls("Amico_Acc_Qty" & j).Value = 0
        End If
    Next j
    
    'Store user inputs into Configurator worksheet to be loaded when the Configurator is used next time
    With Sheets("Configurator")
        
        'Clear Amico Acc if previously configured
        For I = firstConfigAmicoAccRow To lastConfigAmicoAccRow
            .Range("J" & I).Value = ""
        Next I
        
        'Specify the QTY for each Accessory in selected listbox
        For I = firstConfigAmicoAccRow To lastConfigAmicoAccRow
            For j = 0 To Controls("AmicoAccSel").ListCount - 1
                If .Range("B" & I).Value = Controls("AmicoAccSel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("Amico_Acc_Qty" & j).Value)
                End If
            Next j
        Next I
    End With
    
    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 50
    ProgressBar.Label.Caption = "Exporting Amico Accessories data..."
    ProgressBar.Repaint

    With Sheets("Proposal")
        'First and last row for Amico Accessories to be copied to above RoomConfig_2 row
        'Find row number for Config_AmicoAcc as first row, and row number before Configurator as last row
        Set FindFirstAmicoAccRow = .Range("A:A").Find(What:="Amico Accessories", LookIn:=xlValues)
        Set FindLastAmicoAccRow = .Range("A:A").Find(What:=" Configurator", LookIn:=xlValues)
        Set FindAmicoAccRow = .Range("A:A").Find(What:="Configurator_Rm8AmicoAccEnd", LookIn:=xlValues)
        Set FindAmicoAccHeadingRow = .Range("A:A").Find(What:="Config_Rm8AmicoAccHeading", LookIn:=xlValues)
    End With
    firstAmicoAccRow = FindFirstAmicoAccRow.Row + 1
    lastAmicoAccRow = FindLastAmicoAccRow.Row - 1
    amicoAccRow = FindAmicoAccRow.Row
    amicoAccHeadingRow = FindAmicoAccHeadingRow.Row
    
    'Rename Amico Acc heading with room name and quantify it
    Range("B" & amicoAccHeadingRow).Value = Controls("Room8Name").Value & " - Amico Accessories"
    Range("E" & amicoAccHeadingRow).Value = CInt(Controls("Room8No").Value)
    
    'Go through each Amico Accessories in the Main Product List
    For I = firstAmicoAccRow To lastAmicoAccRow
        'Go through each item in the Selected listbox
        For j = 0 To Controls("AmicoAccSel").ListCount - 1
            If Range("B" & I).Value = Controls("AmicoAccSel").List(j) Then

                'Copy and paste the relevant line item row into the Configurator section, and export the user input data into the relevant cells
                Rows(I & ":" & I).Select
                Application.CutCopyMode = False
                Selection.Copy
                Rows(amicoAccRow & ":" & amicoAccRow).Select
                Selection.Insert Shift:=xlDown
                
                'Multiply the local Acc QTY with Room QTY
                Range("E" & amicoAccRow).Value = CInt(Controls("Amico_Acc_Qty" & j).Value) * CInt(Controls("Room8No").Value)
                
                'Unit QTY for column C -> QTY entered by user per room/config
                Range("C" & amicoAccRow).Value = CInt(Controls("Amico_Acc_Qty" & j).Value)
                
                'Keep the same order as selected listbox
                amicoAccRow = amicoAccRow + 1
            End If
        Next j
    Next I
    
    'Find row number before Configurator_Lights heading as last row of Accessories items
    Set FindLastRow = Range("A:A").Find(What:="Configurator_Rm8AmicoAccEnd", LookIn:=xlValues)
    lastRow = FindLastRow.Row - 1
    
    With Sheets("Proposal")
        'Find row number in Configurator Table to insert Amico Accessories summary
        Set FindConfiguratorTableRow = .Range("A:A").Find(What:="ConfiguratorTable_Rm8", LookIn:=xlValues)
    End With
    configuratorTableRow = FindConfiguratorTableRow.Row + 1
    
    'Add details to Configurator table below pricing summary
    Rows(configuratorTableRow & ":" & configuratorTableRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
    
    I = amicoAccHeadingRow
    
    'If in Room Configuration mode, equate Column A to the Room Name with default font color
    Range("A" & configuratorTableRow).Value = Controls("Room8Name").Value
    Range("A" & configuratorTableRow).Font.ColorIndex = 1
    
    'Fill in the rest of the columns
    Range("B" & configuratorTableRow).Formula = Range("B" & I).Value
    Range("G" & configuratorTableRow).Formula = "0"
    Range("H" & configuratorTableRow).Formula = Range("G" & configuratorTableRow).Formula
    Range("E" & configuratorTableRow).Formula = Range("G" & configuratorTableRow).Formula
    Range("F" & configuratorTableRow).Formula = "=G" & I
    
    'Calculate the OPM in Variable worksheet
    Sheets("Variable").Activate
    
    'Add a bracket to the formula for OPM calculations
    opmAmicoFormula = opmAmicoFormula & "Proposal!G" & I & ")"
    Range("Config_Rm8OPM_AmicoAcc").Formula = opmAmicoFormula
    
    With Sheets("Tables")
        'First and last row for Configurator to be included in Tables worksheet
        Set FindConfiguratorRow = .Range("B:B").Find(What:="Configurator_Room8", LookIn:=xlValues)
        Set FindConfiguratorEndRow = .Range("B:B").Find(What:="Configurator_End_Rm8", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator section in Tables worksheet
    configuratorRow = FindConfiguratorRow.Row + 1
    configuratorEndRow = FindConfiguratorEndRow.Row
    
    j = configuratorRow
    k = configuratorEndRow
    
    'Add details to Configurator section in Tables worksheet
    Sheets("Tables").Activate
    Rows(k & ":" & k).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(j & ":" & j).Select
    Selection.Insert Shift:=xlDown
    
    'Fill in the relevant columns
    Range("B" & j).Value = Worksheets("Proposal").Range("B" & I).Value
    Range("B" & j).Font.ColorIndex = 1
    Worksheets("Proposal").Range("A" & I).Copy Worksheets("Tables").Range("C" & j)

    Range("E" & j).Formula = "=Proposal!E" & I
    Range("F" & j).Formula = "=Proposal!D" & I
    Range("G" & j).Formula = "=Proposal!F" & I
    Range("H" & j).Formula = "=Proposal!G" & I
    Range("K" & j).Formula = "=IFERROR(SUM(Proposal!I" & I + 1 & ":" & "I" & lastRow & "),0)"
    Range("L" & j).Formula = "=IFERROR(SUM(Proposal!J" & I + 1 & ":" & "J" & lastRow & "),0)"
    Range("M" & j).Formula = "=IFERROR(SUM(Proposal!K" & I + 1 & ":" & "K" & lastRow & "),0)"
    Range("N" & j).Formula = "=IFERROR(SUM(Proposal!L" & I + 1 & ":" & "L" & lastRow & "),0)"

    'Add the What-If table at Tables worksheet
    With Sheets("Tables")
        'Row for Configurator items to be included in the What-If table
        Set FindWhatIfStartRow = .Range("Q:Q").Find(What:="WhatIf_Rm8Start", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator section in What-If table
    whatIfStartRow = FindWhatIfStartRow.Row + 1

    'Add details to What-If table in Tables worksheet
    Rows(whatIfStartRow & ":" & whatIfStartRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
    
    'Fill in the relevant columns
    Range("Q" & whatIfStartRow) = Controls("Room8Name").Value
    Range("Q" & whatIfStartRow).Font.ColorIndex = 1
                
    Range("R" & whatIfStartRow).Formula = "=Proposal!B" & I
    Range("S" & whatIfStartRow).Formula = "=IFERROR(SUM(Proposal!AC" & I + 1 & ":" & "AC" & lastRow & "),0)"
    Range("T" & whatIfStartRow).Formula = "=IFERROR(Proposal!G" & I & ",0)"
    
    Sheets("Proposal").Activate
End Sub

'AF+IC for Save button
Private Sub AFICTab()

Unprotect

    'Zero out textboxes if empty
    For j = 0 To qtyAFIC
        If Controls("AF_IC_Qty" & j).Value = "" Then
            Controls("AF_IC_Qty" & j).Value = 0
        End If
    Next j
    
    'Store user inputs into Configurator worksheet to be loaded when the Configurator is used next time
    With Sheets("Configurator")
        
        'Clear AF+IC if previously configured
        For I = firstConfigAFLEDRow To lastConfigAFLEDRow
            .Range("J" & I).Value = ""
        Next I
        For I = firstConfigAccRow To lastConfigAccRow
            .Range("J" & I).Value = ""
        Next I
        For I = firstConfigInGridRow To lastConfigInGridRow
            .Range("J" & I).Value = ""
        Next I
        For I = firstConfigIndCompRow To lastConfigIndCompRow
            .Range("J" & I).Value = ""
        Next I
        
        'Specify the QTY for each AF+IC in selected listbox
        For I = firstConfigAFLEDRow To lastConfigAFLEDRow
            For j = 0 To Controls("AF_IC_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("AF_IC_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value)
                End If
            Next j
        Next I
        For I = firstConfigAccRow To lastConfigAccRow
            For j = 0 To Controls("AF_IC_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("AF_IC_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value)
                End If
            Next j
        Next I
        For I = firstConfigInGridRow To lastConfigInGridRow
            For j = 0 To Controls("AF_IC_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("AF_IC_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value)
                End If
            Next j
        Next I
        For I = firstConfigIndCompRow To lastConfigIndCompRow
            For j = 0 To Controls("AF_IC_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("AF_IC_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value)
                End If
            Next j
        Next I
    End With
    
    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 45
    ProgressBar.Label.Caption = "Exporting AF + IC data..."
    ProgressBar.Repaint
    
    With Sheets("Proposal")
        'First and last row for AF+IC to be copied
        'Find row number after Config_Infrastructure heading as first row, and row number before Surfacide heading as last row
        Set FindFirstInfrastructureSectionRow = .Range("A:A").Find(What:="Config_Infrastructure", LookIn:=xlValues)
        Set FindLastInfrastructureSectionRow = .Range("A:A").Find(What:="Room Configuration", LookIn:=xlValues)
        Set FindInfrastructureRow = .Range("A:A").Find(What:="Configurator_Rm8Infrastructure", LookIn:=xlValues)
    End With
    
    'First and last row for AF+IC
    firstInfrastructureSectionRow = FindFirstInfrastructureSectionRow.Row
    lastInfrastructureSectionRow = FindLastInfrastructureSectionRow.Row - 1
    infrastructureRow = FindInfrastructureRow.Row
    
    'Copy and paste the relevant AF+IC rows into the Configurator section, and export the user input data into the relevant cells
    Rows(firstInfrastructureSectionRow & ":" & lastInfrastructureSectionRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(infrastructureRow & ":" & infrastructureRow).Select
    Selection.Insert Shift:=xlDown
    
    'Find row number before Configurator_Infrastructure heading as last row
    Set FindLastRow = Range("A:A").Find(What:="Configurator_Rm8Infrastructure", LookIn:=xlValues)
    lastRow = FindLastRow.Row - 1
    
    With Sheets("Proposal")
        'Find first and last row for Configurator Table
        Set FindConfiguratorTableRow = .Range("A:A").Find(What:="ConfiguratorTable_Rm8", LookIn:=xlValues)
    End With
    configuratorTableRow = FindConfiguratorTableRow.Row + 1
    
    'Name the AF+IC bundle, and quantify it
    Range("B" & infrastructureRow).Value = Controls("Room8Name").Value & " - AirFRAME + Indigo-Clean"
    Range("E" & infrastructureRow).Value = CInt(Controls("Room8No").Value)
    
    'Fill the line item QTYs accordingly
    For I = infrastructureRow To lastRow
        'Go through each item in the Selected listbox
        For j = 0 To Controls("AF_IC_Sel").ListCount - 1
            If Range("B" & I).Value = Controls("AF_IC_Sel").List(j) Then
            
                'Multiply the local AF+IC QTY with Room QTY
                Range("E" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value) * CInt(Controls("Room8No").Value)
                
                Range("C" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value)
            End If
        Next j
    Next I
    
    'Counter for AF Crating (0 if no AF23, 33, 43 or OB - Single/Tandem is selected)
    counter = 0
                    
    'Initialize variables for AF Crating
    iAF23 = 0
    iAF33 = 0
    iAF43 = 0
    iOBSingle = 0
    iOBTandem = 0
    
    'Go through each item in the Selected listbox
    For j = 0 To Controls("AF_IC_Sel").ListCount - 1
        'Configure the Installation if the specific AF/LD is selected
        If Controls("AF_IC_Sel").List(j) = "AirFRAME AF23 – 6 Air Delivery Modules" Then
            For I = infrastructureRow To lastRow
                If Range("A" & I).Value = "Install-AF23" Then
                    
                    'Multiply the local AF+IC QTY with Room QTY
                    Range("E" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value) * CInt(Controls("Room8No").Value)

                    Range("C" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value)
                    installIF1 = "=F" & I
                End If
            Next I
            
            'Update the AF Crating counter
            counter = 1
                            
            'If AF23 is selected, record the QTY
            iAF23 = CInt(Controls("AF_IC_Qty" & j).Value)
            
        ElseIf Controls("AF_IC_Sel").List(j) = "AirFRAME AF33 – 9 Air Delivery Modules" Then
            For I = infrastructureRow To lastRow
                If Range("A" & I).Value = "Install-AF33" Then
                
                    'Multiply the local AF+IC QTY with Room QTY
                    Range("E" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value) * CInt(Controls("Room8No").Value)
                        
                    Range("C" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value)
                    installIF1 = "=F" & I
                End If
            Next I
            
            'Update the AF Crating counter
            counter = 1
                            
            'If AF33 is selected, record the QTY
            iAF33 = CInt(Controls("AF_IC_Qty" & j).Value)
            
        ElseIf Controls("AF_IC_Sel").List(j) = "AirFRAME AF43 – 12 Air Delivery Modules" Then
            For I = infrastructureRow To lastRow
                If Range("A" & I).Value = "Install-AF43" Then
                
                    'Multiply the local AF+IC QTY with Room QTY
                    Range("E" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value) * CInt(Controls("Room8No").Value)

                    Range("C" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value)
                    installIF1 = "=F" & I
                End If
            Next I
            
            'Update the AF Crating counter
            counter = 1
                            
            'If AF43 is selected, record the QTY
            iAF43 = CInt(Controls("AF_IC_Qty" & j).Value)
            
        ElseIf Controls("AF_IC_Sel").List(j) = "LEDiffuser - 1 Air Delivery Module" Then
            For I = infrastructureRow To lastRow
                If Range("A" & I).Value = "Install-LD11" Then
                
                    'Multiply the local AF+IC QTY with Room QTY
                    Range("E" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value) * CInt(Controls("Room8No").Value)

                    Range("C" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value)
                    installIF1 = "=F" & I
                End If
            Next I
        ElseIf Controls("AF_IC_Sel").List(j) = "LEDiffuser - 2 Air Delivery Modules" Then
            For I = infrastructureRow To lastRow
                If Range("A" & I).Value = "Install-LD12" Then
                
                    'Multiply the local AF+IC QTY with Room QTY
                    Range("E" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value) * CInt(Controls("Room8No").Value)

                    Range("C" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value)
                    installIF1 = "=F" & I
                End If
            Next I
        ElseIf Controls("AF_IC_Sel").List(j) = "LEDiffuser - 3 Air Delivery Modules" Then
            For I = infrastructureRow To lastRow
                If Range("A" & I).Value = "Install-LD13" Then
                
                    'Multiply the local AF+IC QTY with Room QTY
                    Range("E" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value) * CInt(Controls("Room8No").Value)

                    Range("C" & I).Value = CInt(Controls("AF_IC_Qty" & j).Value)
                    installIF1 = "=F" & I
                End If
            Next I
        ElseIf Controls("AF_IC_Sel").List(j) = "Outboard Equipment Mount - Single" Then
                    
            'Update the AF Crating counter
            counter = 1
                        
            'If OB - Single is selected, record the QTY
            iOBSingle = CInt(Controls("AF_IC_Qty" & j).Value)
                        
        ElseIf Controls("AF_IC_Sel").List(j) = "Outboard Equipment Mount - Tandem" Then
                        
            'Update the AF Crating counter
            counter = 1
                            
            'If OB - Tandem is selected, record the QTY
            iOBTandem = CInt(Controls("AF_IC_Qty" & j).Value)
        End If
    Next j
    
    'If counter of AF Crating is 1, go to AF Crating line item to QTY it
    If counter = 1 Then
        For I = infrastructureRow To lastRow
            If Range("A" & I).Value = "Crating - AF" Then
                            
                'Specify the AF-Crating to be of Room 8 - prices will be taken from StandardList
                Range("A" & I).Value = "Crating - AF - Room 8"
                                
                'Unit QTY is always kept at 1 per room
                Range("C" & I).Value = 1
                                
                'Ext QTY matches the Room QTY
                Range("E" & I).Value = Range("E" & infrastructureRow).Value
            End If
        Next I
                        
        'Calc the cost USD for AF Crating in StandardList
        With Sheets("StandardList")
            Set FindAFCratingRow = .Range("B:B").Find(What:="Crating - AF - Room 8", LookIn:=xlValues)
            AFCratingRow = FindAFCratingRow.Row
                            
            .Range("E" & AFCratingRow).Formula = "=" & iAF23 & "*" & AFCrating(1) & "+" & iAF33 & "*" & AFCrating(2) & "+" & iAF43 & "*" & AFCrating(3) & "+" & iOBSingle & "*" & AFCrating(4) & "+" & iOBTandem & "*" & AFCrating(5)
        End With
    End If
    
    'Add details to Configurator table below pricing summary
    Rows(configuratorTableRow & ":" & configuratorTableRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
    
    I = infrastructureRow
    
    'If in Room Configuration mode, equate Column A to the Room Name with default font color
    Range("A" & configuratorTableRow).Value = Controls("Room8Name").Value
    Range("A" & configuratorTableRow).Font.ColorIndex = 1
    
    'Fill in the rest of the columns
    Range("B" & configuratorTableRow).Value = Range("B" & I).Value
    Range("G" & configuratorTableRow).Formula = installIF1
    Range("H" & configuratorTableRow).Formula = Replace(Range("G" & configuratorTableRow).Formula, "F", "J")
    Range("E" & configuratorTableRow).Formula = Replace(Range("G" & configuratorTableRow).Formula, "F", "G")
    Range("F" & configuratorTableRow).Formula = "=G" & I
    
    'Calculate the OPM for Indigo Clean in Variable worksheet
    Sheets("Variable").Activate

    'Same OPM for both LEDiffuser and AirFRAME
    opmInfFormula = opmInfFormula & "Proposal!G" & I
    Range("Config_Rm8OPM_AirFRAME").Formula = opmInfFormula
    
    With Sheets("Tables")
        'First and last row for Configurator to be included in Tables worksheet
        Set FindConfiguratorRow = .Range("B:B").Find(What:="Configurator_Room8", LookIn:=xlValues)
        Set FindConfiguratorEndRow = .Range("B:B").Find(What:="Configurator_End_Rm8", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator section in Tables worksheet
    configuratorRow = FindConfiguratorRow.Row + 1
    configuratorEndRow = FindConfiguratorEndRow.Row
    
    j = configuratorRow
    k = configuratorEndRow
    
    'Add details to Configurator section in Tables worksheet
    Sheets("Tables").Activate
    Rows(k & ":" & k).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(j & ":" & j).Select
    Selection.Insert Shift:=xlDown
    
    'Fill in the relevant columns
    Range("B" & j).Value = Worksheets("Proposal").Range("B" & I).Value
    Range("B" & j).Font.ColorIndex = 1
    Worksheets("Proposal").Range("A" & I).Copy Worksheets("Tables").Range("C" & j)

    Range("E" & j).Formula = "=Proposal!E" & I
    Range("F" & j).Formula = "=Proposal!D" & I
    Range("G" & j).Formula = "=Proposal!F" & I
    Range("H" & j).Formula = "=Proposal!G" & I
    Range("K" & j).Formula = "=IFERROR(SUM(Proposal!I" & I + 1 & ":" & "I" & lastRow & "),0)"
    Range("L" & j).Formula = "=IFERROR(SUM(Proposal!J" & I + 1 & ":" & "J" & lastRow & "),0)"
    Range("M" & j).Formula = "=IFERROR(SUM(Proposal!K" & I + 1 & ":" & "K" & lastRow & "),0)"
    Range("N" & j).Formula = "=IFERROR(SUM(Proposal!L" & I + 1 & ":" & "L" & lastRow & "),0)"
    
    'Add the What-If table at Tables worksheet
    With Sheets("Tables")
        'Row for Configurator items to be included in the What-If table
        Set FindWhatIfStartRow = .Range("Q:Q").Find(What:="WhatIf_Rm8Start", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator section in What-If table
    whatIfStartRow = FindWhatIfStartRow.Row + 1

    'Copy the relevant info into What-If Table
    Rows(whatIfStartRow & ":" & whatIfStartRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
    
    'Fill in the relevant columns
    Range("Q" & whatIfStartRow) = Controls("Room8Name").Value
    Range("Q" & whatIfStartRow).Font.ColorIndex = 1
                
    Range("R" & whatIfStartRow) = "=Proposal!B" & I
    Range("S" & whatIfStartRow).Formula = "=IFERROR(SUM(Proposal!AC" & I + 1 & ":" & "AC" & lastRow & "),0)"
    Range("T" & whatIfStartRow).Formula = "=IFERROR(Proposal!G" & I & ",0)"
        
    Sheets("Proposal").Activate
End Sub
'
'Digital Integration for Save button
'
Private Sub IntegrationTab()
    'Zero out textboxes if empty
    For j = 0 To qtyInt
        If Controls("DI_Qty" & j).Value = "" Then
            Controls("DI_Qty" & j).Value = 0
        End If
    Next j

    'Store user inputs into Configurator worksheet to be loaded when the Configurator is used next time
    With Sheets("Configurator")
        
        'Clear DI if previously configured
        For I = firstConfigDISMRow To lastConfigDISMRow
            .Range("J" & I).Value = ""
        Next I
        For I = firstConfigDIWDRow To lastConfigDIWDRow
            .Range("J" & I).Value = ""
        Next I
        For I = firstConfigDIRIRow To lastConfigDIRIRow
            .Range("J" & I).Value = ""
        Next I
        For I = firstConfigDITPRow To lastConfigDITPRow
            .Range("J" & I).Value = ""
        Next I
        For I = firstConfigDIRCRow To lastConfigDIRCRow
            .Range("J" & I).Value = ""
        Next I
        For I = firstConfigDIAudioRow To lastConfigDIAudioRow
            .Range("J" & I).Value = ""
        Next I
        For I = firstConfigDIOtherAccRow To lastConfigDIOtherAccRow
            .Range("J" & I).Value = ""
        Next I
        For I = firstConfigDICableRow To lastConfigDICableRow
            .Range("J" & I).Value = ""
        Next I
        
        'Specify the QTY for each DI in selected listbox
        For I = firstConfigDISMRow To lastConfigDISMRow
            For j = 0 To Controls("DI_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("DI_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("DI_Qty" & j).Value)
                End If
            Next j
        Next I
        For I = firstConfigDIWDRow To lastConfigDIWDRow
            For j = 0 To Controls("DI_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("DI_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("DI_Qty" & j).Value)
                End If
            Next j
        Next I
        For I = firstConfigDIRIRow To lastConfigDIRIRow
            For j = 0 To Controls("DI_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("DI_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("DI_Qty" & j).Value)
                End If
            Next j
        Next I
        For I = firstConfigDITPRow To lastConfigDITPRow
            For j = 0 To Controls("DI_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("DI_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("DI_Qty" & j).Value)
                End If
            Next j
        Next I
        For I = firstConfigDIRCRow To lastConfigDIRCRow
            For j = 0 To Controls("DI_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("DI_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("DI_Qty" & j).Value)
                End If
            Next j
        Next I
        For I = firstConfigDIAudioRow To lastConfigDIAudioRow
            For j = 0 To Controls("DI_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("DI_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("DI_Qty" & j).Value)
                End If
            Next j
        Next I
        For I = firstConfigDIOtherAccRow To lastConfigDIOtherAccRow
            For j = 0 To Controls("DI_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("DI_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("DI_Qty" & j).Value)
                End If
            Next j
        Next I
        For I = firstConfigDICableRow To lastConfigDICableRow
            For j = 0 To Controls("DI_Sel").ListCount - 1
                If .Range("B" & I).Value = Controls("DI_Sel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("DI_Qty" & j).Value)
                End If
            Next j
        Next I
    End With
    
    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 35
    ProgressBar.Label.Caption = "Exporting Digital Integration data..."
    ProgressBar.Repaint
    
    With Sheets("Proposal")
        'First and last row for Integration to be copied
        'Find row number after Config_Integration heading as first row, and row number before ___ heading as last row
        Set FindFirstIntegrationSectionRow = .Range("A:A").Find(What:="Config_Integration", LookIn:=xlValues)
        Set FindLastIntegrationSectionRow = .Range("A:A").Find(What:="Slings", LookIn:=xlValues)
        Set FindIntegrationRow = .Range("A:A").Find(What:="Configurator_Rm8Integration", LookIn:=xlValues)
    End With
    
    'First and last row for Integration
    firstIntegrationSectionRow = FindFirstIntegrationSectionRow.Row
    lastIntegrationSectionRow = FindLastIntegrationSectionRow.Row - 1
    integrationRow = FindIntegrationRow.Row
    
    'Copy and paste the relevant Integration rows into the Configurator section, and export the user input data into the relevant cells
    Rows(firstIntegrationSectionRow & ":" & lastIntegrationSectionRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(integrationRow & ":" & integrationRow).Select
    Selection.Insert Shift:=xlDown
    
    'Find row number before Configurator_Integration heading as last row
    Set FindLastRow = Range("A:A").Find(What:="Configurator_Rm8Integration", LookIn:=xlValues)
    lastRow = FindLastRow.Row - 1
    
    With Sheets("Proposal")
        'Find first and last row for Configurator Table
        Set FindConfiguratorTableRow = .Range("A:A").Find(What:="ConfiguratorTable_Rm8", LookIn:=xlValues)
    End With
    configuratorTableRow = FindConfiguratorTableRow.Row + 1
    
    'Name the Integration for the Room, and quantify it
    Range("B" & integrationRow).Value = Controls("Room8Name").Value & " - Digital Integration"
    Range("E" & integrationRow).Value = CInt(Controls("Room8No").Value)
    
    'Fill the line item QTYs accordingly
    For I = integrationRow To lastRow
        'Go through each item in the Selected listbox
        For j = 0 To Controls("DI_Sel").ListCount - 1
            If Range("B" & I).Value = Controls("DI_Sel").List(j) Then
            
                'Once Off per Facility - labour costs associated with the Facility (hospital) that has its QTY separate from Room QTY
                If Range("B" & I).Value = "HL-7/DICOM Configuration" Or Range("B" & I).Value = "Stat View (software)" Then
                    Range("E" & I).Value = CInt(Controls("DI_Qty" & j).Value)
                    Range("C" & I).Value = CInt(Controls("DI_Qty" & j).Value)
                Else
                    'If in Room Configuration mode, multiply the local DI QTY with Room QTY
                    Range("E" & I).Value = CInt(Controls("DI_Qty" & j).Value) * CInt(Controls("Room8No").Value)
                    Range("C" & I).Value = CInt(Controls("DI_Qty" & j).Value)
                End If
            End If
        Next j
        
        'Auto include certain line items if Digital Integration is configured (Caresyntax - CX-PRIME)
        'The line item QTY remains fixed for the facility regardless of Room QTY
        'CX-PRIME CONTROL UNIT - RACK SYSTEM
        If Range("A" & I).Value = "CX-P1000" Then
            Range("E" & I).Value = CInt(Controls("Room8No").Value)
            Range("C" & I).Value = 1
        
        'CX-PRIME SOFTWARE BUNDLE - PERPETUAL LICENSE
        ElseIf Range("A" & I).Value = "CX-P2000" Then
            Range("E" & I).Value = CInt(Controls("Room8No").Value)
            Range("C" & I).Value = 1
            
        'Base Theatre Package - BARCO
        ElseIf Range("A" & I).Value = "DOR BASE - Barco" Then
            Range("E" & I).Value = CInt(Controls("Room8No").Value)
            Range("C" & I).Value = 1
        
        'Mandatory rack - AV Rack-Single Room - whole rack price per room
        'Mandatory for every room that has integration in it -> Room 1 QTY + Room 2 QTY + ...
        ElseIf Range("A" & I).Value = "AV Rack – Single Room" Then
            Range("E" & I).Value = CInt(Controls("Room8No").Value)
            Range("C" & I).Value = 1
        
        'Installation - Digital Integration
        ElseIf Range("A" & I).Value = "Install-Integration" Then
            Range("E" & I).Value = CInt(Controls("Room8No").Value)
            Range("C" & I).Value = 1
            installI1 = "=F" & I
        End If
    Next I
    
    'Add details to Configurator table below pricing summary
    Rows(configuratorTableRow & ":" & configuratorTableRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
    
    I = integrationRow
    
    'If in Room Configuration mode, equate Column A to the Room Name with default font color
    Range("A" & configuratorTableRow).Value = Controls("Room8Name").Value
    Range("A" & configuratorTableRow).Font.ColorIndex = 1
    
    'Fill in the rest of the columns
    Range("B" & configuratorTableRow).Value = Range("B" & I).Value
    Range("G" & configuratorTableRow).Formula = installI1
    Range("H" & configuratorTableRow).Formula = Replace(Range("G" & configuratorTableRow).Formula, "F", "J")
    Range("E" & configuratorTableRow).Formula = Replace(Range("G" & configuratorTableRow).Formula, "F", "G")
    Range("F" & configuratorTableRow).Formula = "=G" & I
    
    'Calculate the OPM for Digital Integration in Variable worksheet
    Sheets("Variable").Activate

    opmIntFormula = opmIntFormula & "Proposal!G" & I
    Range("Config_Rm8OPM_Integrated").Formula = opmIntFormula
    
    With Sheets("Tables")
        'First and last row for Configurator to be included in Tables worksheet
        Set FindConfiguratorRow = .Range("B:B").Find(What:="Configurator_Room8", LookIn:=xlValues)
        Set FindConfiguratorEndRow = .Range("B:B").Find(What:="Configurator_End_Rm8", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator section in Tables worksheet
    configuratorRow = FindConfiguratorRow.Row + 1
    configuratorEndRow = FindConfiguratorEndRow.Row
    
    j = configuratorRow
    k = configuratorEndRow
    
    'Add details to Configurator section in Tables worksheet
    Sheets("Tables").Activate
    Rows(k & ":" & k).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(j & ":" & j).Select
    Selection.Insert Shift:=xlDown
    
    'Fill in the relevant columns
    Range("B" & j).Value = Worksheets("Proposal").Range("B" & I).Value
    Range("B" & j).Font.ColorIndex = 1
    Worksheets("Proposal").Range("A" & I).Copy Worksheets("Tables").Range("C" & j)

    Range("E" & j).Formula = "=Proposal!E" & I
    Range("F" & j).Formula = "=Proposal!D" & I
    Range("G" & j).Formula = "=Proposal!F" & I
    Range("H" & j).Formula = "=Proposal!G" & I
    Range("K" & j).Formula = "=IFERROR(SUM(Proposal!I" & I + 1 & ":" & "I" & lastRow & "),0)"
    Range("L" & j).Formula = "=IFERROR(SUM(Proposal!J" & I + 1 & ":" & "J" & lastRow & "),0)"
    Range("M" & j).Formula = "=IFERROR(SUM(Proposal!K" & I + 1 & ":" & "K" & lastRow & "),0)"
    Range("N" & j).Formula = "=IFERROR(SUM(Proposal!L" & I + 1 & ":" & "L" & lastRow & "),0)"
    
    'Add the What-If table at Tables worksheet
    With Sheets("Tables")
        'Row for Configurator items to be included in the What-If table
        Set FindWhatIfStartRow = .Range("Q:Q").Find(What:="WhatIf_Rm8Start", LookIn:=xlValues)
    End With
    
    'First and last row for Configurator section in What-If table
    whatIfStartRow = FindWhatIfStartRow.Row + 1

    'Copy the relevant info into What-If Table
    Rows(whatIfStartRow & ":" & whatIfStartRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
    
    'Fill in the relevant columns
    Range("Q" & whatIfStartRow) = Controls("Room8Name").Value
    Range("Q" & whatIfStartRow).Font.ColorIndex = 1
    
    Range("R" & whatIfStartRow) = "=Proposal!B" & I
    Range("S" & whatIfStartRow).Formula = "=IFERROR(SUM(Proposal!AC" & I + 1 & ":" & "AC" & lastRow & "),0)"
    Range("T" & whatIfStartRow).Formula = "=IFERROR(Proposal!G" & I & ",0)"
        
    Sheets("Proposal").Activate
End Sub
    '       '
'Sling for Save button
'
Private Sub SlingTab()

Unprotect

    'Zero out Sling textboxes if empty
    For j = 0 To qtySling
        If Controls("Sling_Qty" & j).Value = "" Then
            Controls("Sling_Qty" & j).Value = 0
        End If
    Next j
                        
    'Store user inputs into Configurator worksheet to be loaded when the Configurator is used next time
    With Sheets("Configurator")
                            
        'Clear Sling if previously configured
        For I = firstConfigSlingRow To lastConfigSlingRow
            .Range("J" & I).Value = ""
        Next I
                            
        'Specify the QTY for each Sling in selected listbox
        For I = firstConfigSlingRow To lastConfigSlingRow
            For j = 0 To Controls("SlingSel").ListCount - 1
                If .Range("B" & I).Value = Controls("SlingSel").List(j) Then
                    .Range("J" & I).Value = CInt(Controls("Sling_Qty" & j).Value)
                End If
            Next j
        Next I
    End With
                        
    'Update progress bar label and indicator
    ProgressBar.ProgressBar1.Value = 30
    ProgressBar.Label.Caption = "Exporting Sling data..."
    ProgressBar.Repaint
                    
    With Sheets("Proposal")
        'First and last row for Slings to be copied to above RoomConfig_3 row
        'Find row number for Config_Sling as first row, and row number before Configurator as last row
        Set FindFirstSlingRow = .Range("A:A").Find(What:="Slings", LookIn:=xlValues)
        Set FindLastSlingRow = .Range("A:A").Find(What:="AirFRAME", LookIn:=xlValues)
        Set FindSlingRow = .Range("A:A").Find(What:="Configurator_Rm8SlingEnd", LookIn:=xlValues)
        Set FindSlingHeadingRow = .Range("A:A").Find(What:="Config_Rm8SlingHeading", LookIn:=xlValues)
    End With
                    
    firstSlingRow = FindFirstSlingRow.Row + 1
    lastSlingRow = FindLastSlingRow.Row - 1
    slingRow = FindSlingRow.Row
    slingHeadingRow = FindSlingHeadingRow.Row
                        
    'Rename Sling heading with room name and quantify it
    Range("B" & slingHeadingRow).Value = Controls("Room8Name").Value & " - Slings"
    Range("E" & slingHeadingRow).Value = CInt(Controls("Room8No").Value)
                        
    'Go through each Sling in the Main Product List
    For I = firstSlingRow To lastSlingRow
        'Go through each item in the Selected listbox
        For j = 0 To Controls("SlingSel").ListCount - 1
            If Range("B" & I).Value = Controls("SlingSel").List(j) Then
                            
                'Copy and paste the relevant line item row into the Configurator section, and export the user input data into the relevant cells
                Rows(I & ":" & I).Select
                Application.CutCopyMode = False
                Selection.Copy
                Rows(slingRow & ":" & slingRow).Select
                Selection.Insert Shift:=xlDown
                                    
                'Multiply the local QTY with Room QTY
                Range("E" & slingRow).Value = CInt(Controls("Sling_Qty" & j).Value) * CInt(Controls("Room8No").Value)
                                
                'Unit QTY for column C -> QTY entered by user per room/config
                Range("C" & slingRow).Value = CInt(Controls("Sling_Qty" & j).Value)
                                
                'Keep the same order as selected listbox
                slingRow = slingRow + 1
            End If
        Next j
    Next I
                    
    'Find row number of last row of Sling line items
    Set FindLastRow = Range("A:A").Find(What:="Configurator_Rm8SlingEnd", LookIn:=xlValues)
    lastRow = FindLastRow.Row - 1
                    
    With Sheets("Proposal")
        'Find row number in Configurator Table to insert Sling summary
        Set FindConfiguratorTableRow = .Range("A:A").Find(What:="ConfiguratorTable_Rm8", LookIn:=xlValues)
    End With
    configuratorTableRow = FindConfiguratorTableRow.Row + 1
                    
    'Add details to Configurator table below pricing summary
    Rows(configuratorTableRow & ":" & configuratorTableRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
                    
    I = slingHeadingRow
                    
    'Equate Column A to the Room Name with default font color
    Range("A" & configuratorTableRow).Value = Controls("Room8Name").Value
    Range("A" & configuratorTableRow).Font.ColorIndex = 1
                    
    'Fill in the rest of the columns
    Range("B" & configuratorTableRow).Formula = Range("B" & I).Value
    Range("G" & configuratorTableRow).Formula = "0"
    Range("H" & configuratorTableRow).Formula = Range("G" & configuratorTableRow).Formula
    Range("E" & configuratorTableRow).Formula = Range("G" & configuratorTableRow).Formula
    Range("F" & configuratorTableRow).Formula = "=G" & I
                    
    'No OPM for slings as they are made of cloth/fabric and are not serviceable equipment
    'Add a bracket to the formula for Room calculations
    Sheets("Tables").Activate
    opmSlingFormula = opmSlingFormula & "Proposal!G" & I & ")"
    Range("Config_Rm8Slings").Formula = opmSlingFormula
                    
    With Sheets("Tables")
        'First and last row for Configurator to be included in Tables worksheet
        Set FindConfiguratorRow = .Range("B:B").Find(What:="Configurator_Room8", LookIn:=xlValues)
        Set FindConfiguratorEndRow = .Range("B:B").Find(What:="Configurator_End_Rm8", LookIn:=xlValues)
    End With
                    
    'First and last row for Configurator section in Tables worksheet
    configuratorRow = FindConfiguratorRow.Row + 1
    configuratorEndRow = FindConfiguratorEndRow.Row
                    
    j = configuratorRow
    k = configuratorEndRow
                    
    'Add details to Configurator section in Tables worksheet
    Sheets("Tables").Activate
    Rows(k & ":" & k).Select
    Application.CutCopyMode = False
    Selection.Copy
    Rows(j & ":" & j).Select
    Selection.Insert Shift:=xlDown
                    
    'Fill in the relevant columns
    Range("B" & j).Value = Worksheets("Proposal").Range("B" & I).Value
    Range("B" & j).Font.ColorIndex = 1
    Worksheets("Proposal").Range("A" & I).Copy Worksheets("Tables").Range("C" & j)
                
    Range("E" & j).Formula = "=Proposal!E" & I
    Range("F" & j).Formula = "=Proposal!D" & I
    Range("G" & j).Formula = "=Proposal!F" & I
    Range("H" & j).Formula = "=Proposal!G" & I
    Range("K" & j).Formula = "=IFERROR(SUM(Proposal!I" & I + 1 & ":" & "I" & lastRow & "),0)"
    Range("L" & j).Formula = "=IFERROR(SUM(Proposal!J" & I + 1 & ":" & "J" & lastRow & "),0)"
    Range("M" & j).Formula = "=IFERROR(SUM(Proposal!K" & I + 1 & ":" & "K" & lastRow & "),0)"
    Range("N" & j).Formula = "=IFERROR(SUM(Proposal!L" & I + 1 & ":" & "L" & lastRow & "),0)"
                
    'Add the What-If table at Tables worksheet
    With Sheets("Tables")
        'Row for Configurator items to be included in the What-If table
        Set FindWhatIfStartRow = .Range("Q:Q").Find(What:="WhatIf_Rm8Start", LookIn:=xlValues)
    End With
    whatIfStartRow = FindWhatIfStartRow.Row + 1
        
    'Add details to What-If table in Tables worksheet
    Rows(whatIfStartRow & ":" & whatIfStartRow).Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.Insert Shift:=xlDown
                    
    'Fill in the relevant columns
    Range("Q" & whatIfStartRow) = Controls("Room8Name").Value
    Range("Q" & whatIfStartRow).Font.ColorIndex = 1
                    
    Range("R" & whatIfStartRow).Formula = "=Proposal!B" & I
    Range("S" & whatIfStartRow).Formula = "=IFERROR(SUM(Proposal!AC" & I + 1 & ":" & "AC" & lastRow & "),0)"
    Range("T" & whatIfStartRow).Formula = "=IFERROR(Proposal!G" & I & ",0)"
                    
    Sheets("Proposal").Activate
End Sub
'
'PNote for Save button
'
Private Sub PNoteTab()

Unprotect
    
    'Store user inputs into Configurator worksheet to be loaded when the Configurator is used next time
    'Also to be exported to BOM for Project/Ops team
    With Sheets("Configurator")
        
        'Fill in the PNote content
        .Range("PNoteRm8").Value = Controls("PNoteContent").Value
    End With
End Sub
'
'Show/hide tabs for Lights
'
Private Sub LightNo_Change()

    'Up to 5 lights can be configured
    k = 5
    
    If IsNumeric(LightNo.Value) = True And LightNo.Value > 0 And LightNo.Value <= k Then
        
        'Hide pages depending on user input for number of Lights
        For j = LightNo.Value + 1 To k
            MultiPage3.Pages("Light" & j).Visible = False
        Next j
        
        'Show pages depending on user input for number of Lights
        For I = 1 To LightNo.Value
            MultiPage3.Pages("Light" & I).Visible = True
        Next I
    End If
End Sub
'Spin button for QTY of light configurations
Private Sub LightSpin_SpinUp()
    If LightNo.Value + 1 > 5 Then
        LightNo.Text = 5
    Else
        LightNo.Text = LightNo.Value + 1
    End If
End Sub
'Spin button for QTY of light configurations
Private Sub LightSpin_SpinDown()
    If LightNo.Value - 1 < 0 Then
        LightNo.Text = 0
    Else
        LightNo.Text = LightNo.Value - 1
    End If
End Sub
'
'Show/hide tabs for pendants
'
Private Sub PendantNo_Change()

    'Up to 5 pendants can be configured
    k = 5
    
    If IsNumeric(PendantNo.Value) = True And PendantNo.Value > 0 And PendantNo.Value <= k Then
        
        'Hide pages depending on user input for number of pendants
        For j = PendantNo.Value + 1 To k
            MultiPage2.Pages("Pendant" & j).Visible = False
        Next j
        
        'Show pages depending on user input for number of pendants
        For I = 1 To PendantNo.Value
            MultiPage2.Pages("Pendant" & I).Visible = True
        Next I
    End If
End Sub
'Spin button for QTY of pendant configurations
Private Sub PendantSpin_SpinUp()
    If PendantNo.Value + 1 > 5 Then
        PendantNo.Text = 5
    Else
        PendantNo.Text = PendantNo.Value + 1
    End If
End Sub
'Spin button for QTY of pendant configurations
Private Sub PendantSpin_SpinDown()
    If PendantNo.Value - 1 < 0 Then
        PendantNo.Text = 0
    Else
        PendantNo.Text = PendantNo.Value - 1
    End If
End Sub
'
'ComboBox for Description
'
'Room 8
Private Sub Room8Description_DropButtonClick()
    Room8Description.List = roomDesc
End Sub
    '
'Light Description drop-down menu
'Subs (common functions) for Light
Private Sub LightDescription(intProduct As Integer)
    'Only show for iCE 30m lights
    If Controls("L" & intProduct & "iCE") = True Then
        Controls("Light" & intProduct & "Description").List = iCE30mDesc
    Else
        Controls("Light" & intProduct & "Description").Clear
    End If
End Sub
'Light 1
Private Sub Light1Description_DropButtonClick()
    Call LightDescription(1)
End Sub
'Light 2
Private Sub Light2Description_DropButtonClick()
    Call LightDescription(2)
End Sub
'Light 3
Private Sub Light3Description_DropButtonClick()
    Call LightDescription(3)
End Sub
'Light 4
Private Sub Light4Description_DropButtonClick()
    Call LightDescription(4)
End Sub
'Light 5
Private Sub Light5Description_DropButtonClick()
    Call LightDescription(5)
End Sub
'
'Pendant Description drop-down menu
'Subs (common functions) for Pendant
Private Sub PendantDescription(intProduct As Integer)
    'Only show for iCE 30m lights
    If Controls("Pendant" & intProduct & "S") = True Then
        Controls("Pendant" & intProduct & "Description").List = PendantSoloDescription
    ElseIf Controls("Pendant" & intProduct & "T") = True Then
        Controls("Pendant" & intProduct & "Description").List = PendantTandemDescription
    End If
End Sub
'Pendant 1
Private Sub Pendant1Description_DropButtonClick()
    Call PendantDescription(1)
End Sub
'Pendant 2
Private Sub Pendant2Description_DropButtonClick()
    Call PendantDescription(2)
End Sub
'Pendant 3
Private Sub Pendant3Description_DropButtonClick()
    Call PendantDescription(3)
End Sub
'Pendant 4
Private Sub Pendant4Description_DropButtonClick()
    Call PendantDescription(4)
End Sub
'Pendant 5
Private Sub Pendant5Description_DropButtonClick()
    Call PendantDescription(5)
End Sub
'
'Subs (common functions) for Light
'Clear/Refresh acc listboxes and textboxes
Private Sub ClearLightAcc(productInt As Integer)
    Controls("Light" & productInt & "Acc").Clear
    Controls("Light" & productInt & "AccSel").Clear

    For j = 0 To qtyLight
        Controls("L" & productInt & "_Acc_Qty" & j).Value = ""
    Next j
End Sub
'Find specified accessories to add to list boxes
Private Sub FindiCE30mLightAccessories(productInt As Integer)
    With Sheets("Configurator")
        Set FindFirstLiCEAccRow = .Range("B:B").Find(What:="Accessories - iCE 30m", LookIn:=xlValues)
        Set FindLastLiCEAccRow = .Range("B:B").Find(What:="Accessories - Mira 70 / 110 - Vega 80", LookIn:=xlValues)
    End With

    'First and last row for Light Accessories
    firstLiCEAccRow = FindFirstLiCEAccRow.Row + 1
    lastLiCEAccRow = FindLastLiCEAccRow.Row - 2

    'Add the specified accessories into the acc listbox
    For Each Cell In Worksheets("Configurator").Range("B" & firstLiCEAccRow & ":" & "B" & lastLiCEAccRow)
        Controls("Light" & productInt & "Acc").AddItem Cell.Value
    Next Cell
End Sub
Private Sub FindMiraLightAccessories(productInt As Integer)
    With Sheets("Configurator")
        Set FindFirstLMiraAccRow = .Range("B:B").Find(What:="Accessories - Mira 70 / 110 - Vega 80", LookIn:=xlValues)
        Set FindLastLMiraAccRow = .Range("B:B").Find(What:="Pendants", LookIn:=xlValues)
    End With

    'First and last row for Light Accessories
    lastLMiraAccRow = FindLastLMiraAccRow.Row - 2
    
    If Controls("L" & productInt & "Vega").Value = True Then
        firstLMiraAccRow = FindFirstLMiraAccRow.Row + 2
    'Mira LED Wall Control Assembly only for Mira Lights
    ElseIf Controls("L" & productInt & "Mira").Value = True Then
        firstLMiraAccRow = FindFirstLMiraAccRow.Row + 1
    End If

    'Add the specified accessories into the acc listbox
    For Each Cell In Worksheets("Configurator").Range("B" & firstLMiraAccRow & ":" & "B" & lastLMiraAccRow)
        Controls("Light" & productInt & "Acc").AddItem Cell.Value
    Next Cell
End Sub
'
'Light iCE 30m/Mira 70/110/Gamma 50 options
'
'Light 1
'Options to show/hide frames based on selected option
Private Sub L1iCE_Click()
    L1iCEFrame.Visible = True
    L1MiraFrame.Visible = False
    L1VegaFrame.Visible = False
    L1GammaFrame.Visible = False
    
    Call ClearLightAcc(1)
    
    Call FindiCE30mLightAccessories(1)
End Sub

Private Sub L1Mira_Click()
    L1iCEFrame.Visible = False
    L1MiraFrame.Visible = True
    L1VegaFrame.Visible = False
    L1GammaFrame.Visible = False
    
    Call ClearLightAcc(1)
    
    Call FindMiraLightAccessories(1)
End Sub

Private Sub L1Vega_Click()
    L1iCEFrame.Visible = False
    L1MiraFrame.Visible = False
    L1VegaFrame.Visible = True
    L1GammaFrame.Visible = False
    
    Call ClearLightAcc(1)
    
    Call FindMiraLightAccessories(1)
End Sub

Private Sub L1Gamma_Click()
    L1iCEFrame.Visible = False
    L1MiraFrame.Visible = False
    L1VegaFrame.Visible = False
    L1GammaFrame.Visible = True
    
    Call ClearLightAcc(1)
End Sub

'Light 2
'Options to show/hide frames based on selected option
Private Sub L2iCE_Click()
    L2iCEFrame.Visible = True
    L2MiraFrame.Visible = False
    L2VegaFrame.Visible = False
    L2GammaFrame.Visible = False

    Call ClearLightAcc(2)
    
    Call FindiCE30mLightAccessories(2)
End Sub

Private Sub L2Mira_Click()
    L2iCEFrame.Visible = False
    L2MiraFrame.Visible = True
    L2VegaFrame.Visible = False
    L2GammaFrame.Visible = False
    
    Call ClearLightAcc(2)
    
    Call FindMiraLightAccessories(2)
End Sub

Private Sub L2Vega_Click()
    L2iCEFrame.Visible = False
    L2MiraFrame.Visible = False
    L2VegaFrame.Visible = True
    L2GammaFrame.Visible = False
    
    Call ClearLightAcc(2)
    
    Call FindMiraLightAccessories(2)
End Sub

Private Sub L2Gamma_Click()
    L2iCEFrame.Visible = False
    L2MiraFrame.Visible = False
    L2VegaFrame.Visible = False
    L2GammaFrame.Visible = True
    
    Call ClearLightAcc(2)
End Sub

'Light 3
'Options to show/hide frames based on selected option
Private Sub L3iCE_Click()
    L3iCEFrame.Visible = True
    L3MiraFrame.Visible = False
    L3VegaFrame.Visible = False
    L3GammaFrame.Visible = False
    
    Call ClearLightAcc(3)
    
    Call FindiCE30mLightAccessories(3)
End Sub

Private Sub L3Mira_Click()
    L3iCEFrame.Visible = False
    L3MiraFrame.Visible = True
    L3VegaFrame.Visible = False
    L3GammaFrame.Visible = False
    
    Call ClearLightAcc(3)
    
    Call FindMiraLightAccessories(3)
End Sub

Private Sub L3Vega_Click()
    L3iCEFrame.Visible = False
    L3MiraFrame.Visible = False
    L3VegaFrame.Visible = True
    L3GammaFrame.Visible = False
    
    Call ClearLightAcc(3)
    
    Call FindMiraLightAccessories(3)
End Sub

Private Sub L3Gamma_Click()
    L3iCEFrame.Visible = False
    L3MiraFrame.Visible = False
    L3VegaFrame.Visible = False
    L3GammaFrame.Visible = True
    
    Call ClearLightAcc(3)
End Sub

'Light 4
'Options to show/hide frames based on selected option
Private Sub L4iCE_Click()
    L4iCEFrame.Visible = True
    L4MiraFrame.Visible = False
    L4VegaFrame.Visible = False
    L4GammaFrame.Visible = False
    
    Call ClearLightAcc(4)
    
    Call FindiCE30mLightAccessories(4)
End Sub

Private Sub L4Mira_Click()
    L4iCEFrame.Visible = False
    L4MiraFrame.Visible = True
    L4VegaFrame.Visible = False
    L4GammaFrame.Visible = False
    
    Call ClearLightAcc(4)
    
    Call FindMiraLightAccessories(4)
End Sub

Private Sub L4Vega_Click()
    L4iCEFrame.Visible = False
    L4MiraFrame.Visible = False
    L4VegaFrame.Visible = True
    L4GammaFrame.Visible = False
    
    Call ClearLightAcc(4)
    
    Call FindMiraLightAccessories(4)
End Sub

Private Sub L4Gamma_Click()
    L4iCEFrame.Visible = False
    L4MiraFrame.Visible = False
    L4VegaFrame.Visible = False
    L4GammaFrame.Visible = True
    
    Call ClearLightAcc(4)
End Sub

'Light 5
'Options to show/hide frames based on selected option
Private Sub L5iCE_Click()
    L5iCEFrame.Visible = True
    L5MiraFrame.Visible = False
    L5VegaFrame.Visible = False
    L5GammaFrame.Visible = False
    
    Call ClearLightAcc(5)
    
    Call FindiCE30mLightAccessories(5)
End Sub

Private Sub L5Mira_Click()
    L5iCEFrame.Visible = False
    L5MiraFrame.Visible = True
    L5VegaFrame.Visible = False
    L5GammaFrame.Visible = False
    
    Call ClearLightAcc(5)
    
    Call FindMiraLightAccessories(5)
End Sub

Private Sub L5Vega_Click()
    L5iCEFrame.Visible = False
    L5MiraFrame.Visible = False
    L5VegaFrame.Visible = True
    L5GammaFrame.Visible = False
    
    Call ClearLightAcc(5)
    
    Call FindMiraLightAccessories(5)
End Sub

Private Sub L5Gamma_Click()
    L5iCEFrame.Visible = False
    L5MiraFrame.Visible = False
    L5VegaFrame.Visible = False
    L5GammaFrame.Visible = True
    
    Call ClearLightAcc(5)
End Sub
'
'Subs (common functions) for Pendants
'Find specified accessories to add to list boxes
Private Sub FindPendantAccessories(productInt As Integer)

    Controls("Pendant" & productInt & "Acc").Clear
    Controls("Pendant" & productInt & "AccSel").Clear

    For j = 0 To qtyPendant
        Controls("P" & productInt & "_Acc_Qty" & j).Value = ""
    Next j

    With Sheets("Configurator")
        Set FindFirstPAccRow = .Range("B:B").Find(What:="Accessories - Pendants", LookIn:=xlValues)
        Set FindLastPAccRow = .Range("B:B").Find(What:="End_Pendant", LookIn:=xlValues)

        'First and last row for Pendant Accessories
        firstPAccRow = FindFirstPAccRow.Row + 1
        lastPAccRow = FindLastPAccRow.Row - 1
    End With

    'Add Accessories to listbox
    For Each Cell In Worksheets("Configurator").Range("B" & firstPAccRow & ":" & "B" & lastPAccRow)
        Controls("Pendant" & productInt & "Acc").AddItem Cell.Value
    Next Cell
End Sub

'Std Config for ANA pendants (top-down)
Private Sub AnaPendantOptions(productInt As Integer)
    Controls("Pendant" & productInt & "Name") = "Std Ana"
    Controls("P" & productInt & "Con1ArmDouble") = True
    Controls("P" & productInt & "Con1ArmFixed") = False
    Controls("P" & productInt & "Con1ArmMotorised") = True
    Controls("P" & productInt & "Con1ArmConfig") = "F1000-V750"
    Controls("P" & productInt & "Con1Hammer") = True
    Controls("P" & productInt & "Con1Console") = ConsoleHammer(1)
    Controls("Suction_P" & productInt & "Con1") = "3"
    Controls("MedAir_P" & productInt & "Con1") = "1"
    Controls("CO2_P" & productInt & "Con1") = "1"
    Controls("N2O_P" & productInt & "Con1") = "1"
    Controls("Oxygen_P" & productInt & "Con1") = "2"
    Controls("ToolAir_P" & productInt & "Con1") = "1"
    Controls("Scavenge_P" & productInt & "Con1") = "1"
    Controls("Dia68_P" & productInt & "Con1") = "6"
    Controls("UPS_Blue_P" & productInt & "Con1") = "4"
    Controls("ESS_Red_10Amp_P" & productInt & "Con1") = "8"
    Controls("ESS_Red_20Amp_P" & productInt & "Con1") = ""
    Controls("ESS_Red_15Amp_P" & productInt & "Con1") = ""
    Controls("PowerInd_P" & productInt & "Con1") = "2"
    Controls("RCD_P" & productInt & "Con1") = ""
    Controls("Earth_P" & productInt & "Con1") = ""
    Controls("DataRun_P" & productInt & "Con1") = ""
    Controls("AV_P" & productInt & "Con1") = "AV Plate Provision x 4 + Low-voltage Plate Provision x 2"
    Controls("Pendant" & productInt & "Description") = "Std Ana"
End Sub

'Std Config for EQ pendants (top-down)
Private Sub EQPendantOptions(productInt As Integer)
    Controls("Pendant" & productInt & "Name") = "Std EQ"
    Controls("P" & productInt & "Con1ArmDouble") = True
    Controls("P" & productInt & "Con1ArmFixed") = True
    Controls("P" & productInt & "Con1ArmMotorised") = False
    Controls("P" & productInt & "Con1ArmConfig") = "F1000-F800"
    Controls("P" & productInt & "Con1Vertical") = True
    Controls("P" & productInt & "Con1Console") = "L 1295 x W 460 x D 229mm"
    Controls("Suction_P" & productInt & "Con1") = "2"
    Controls("MedAir_P" & productInt & "Con1") = "2"
    Controls("CO2_P" & productInt & "Con1") = "1"
    Controls("N2O_P" & productInt & "Con1") = "1"
    Controls("Oxygen_P" & productInt & "Con1") = "2"
    Controls("ToolAir_P" & productInt & "Con1") = "1"
    Controls("Scavenge_P" & productInt & "Con1") = "1"
    Controls("Dia68_P" & productInt & "Con1") = "9"
    Controls("UPS_Blue_P" & productInt & "Con1") = "4"
    Controls("ESS_Red_10Amp_P" & productInt & "Con1") = "8"
    Controls("ESS_Red_20Amp_P" & productInt & "Con1") = ""
    Controls("ESS_Red_15Amp_P" & productInt & "Con1") = ""
    Controls("PowerInd_P" & productInt & "Con1") = "2"
    Controls("RCD_P" & productInt & "Con1") = ""
    Controls("Earth_P" & productInt & "Con1") = ""
    Controls("DataRun_P" & productInt & "Con1") = ""
    Controls("AV_P" & productInt & "Con1") = "Cut-out for Video Plate x 2+ Low-voltage Plate Provision x 5 + Cable Pass-through Plate x 2"
    Controls("Pendant" & productInt & "Description") = "Std EQ"

    'Specified accessories
    Controls("Pendant" & productInt & "AccSel").AddItem "Shelf, LT w Front Handle - 457mm (w) x 585mm (d)"
    Controls("Pendant" & productInt & "AccSel").AddItem "Shelf, LT w Side Rails - 457mm (w) x 585mm (d)"
    Controls("P" & productInt & "_Acc_Qty0").Value = "1"
    Controls("P" & productInt & "_Acc_Qty1").Value = "2"
End Sub

'Std Config for ICU pendants (top-down)
Private Sub ICUPendantOptions(productInt As Integer)
    Controls("Pendant" & productInt & "Name") = "Std ICU"
    Controls("P" & productInt & "Con1ArmDouble") = True
    Controls("P" & productInt & "Con1ArmFixed") = True
    Controls("P" & productInt & "Con1ArmMotorised") = False
    Controls("P" & productInt & "Con1ArmConfig") = "F1000-F800, F1000-F800"
    Controls("P" & productInt & "Con1Vertical") = True
    Controls("P" & productInt & "Con1Console") = "L 1295 x W 320 x D 229mm"
    Controls("P" & productInt & "Con2Vertical") = True
    Controls("P" & productInt & "Con2Console") = "L 1295 x W 320 x D 229mm"

    'Console 1
    Controls("Suction_P" & productInt & "Con1") = "3"
    Controls("MedAir_P" & productInt & "Con1") = "1"
    Controls("CO2_P" & productInt & "Con1") = ""
    Controls("N2O_P" & productInt & "Con1") = ""
    Controls("Oxygen_P" & productInt & "Con1") = "2"
    Controls("ToolAir_P" & productInt & "Con1") = ""
    Controls("Scavenge_P" & productInt & "Con1") = ""
    Controls("Dia68_P" & productInt & "Con1") = "1"
    Controls("UPS_Blue_P" & productInt & "Con1") = "2"
    Controls("ESS_Red_10Amp_P" & productInt & "Con1") = "8"
    Controls("ESS_Red_20Amp_P" & productInt & "Con1") = ""
    Controls("ESS_Red_15Amp_P" & productInt & "Con1") = ""
    Controls("PowerInd_P" & productInt & "Con1") = "2"
    Controls("RCD_P" & productInt & "Con1") = ""
    Controls("Earth_P" & productInt & "Con1") = ""
    Controls("DataRun_P" & productInt & "Con1") = ""
    Controls("AV_P" & productInt & "Con1") = "1 x Quad Data Outlet"
    Controls("Pendant" & productInt & "Description") = "Std ICU"

    'Console 2
    Controls("Suction_P" & productInt & "Con2") = "3"
    Controls("MedAir_P" & productInt & "Con2") = "1"
    Controls("CO2_P" & productInt & "Con2") = ""
    Controls("N2O_P" & productInt & "Con2") = ""
    Controls("Oxygen_P" & productInt & "Con2") = "2"
    Controls("ToolAir_P" & productInt & "Con2") = ""
    Controls("Scavenge_P" & productInt & "Con2") = ""
    Controls("Dia68_P" & productInt & "Con2") = "1"
    Controls("UPS_Blue_P" & productInt & "Con2") = "2"
    Controls("ESS_Red_10Amp_P" & productInt & "Con2") = "8"
    Controls("ESS_Red_20Amp_P" & productInt & "Con2") = ""
    Controls("ESS_Red_15Amp_P" & productInt & "Con2") = ""
    Controls("PowerInd_P" & productInt & "Con2") = "2"
    Controls("RCD_P" & productInt & "Con2") = ""
    Controls("Earth_P" & productInt & "Con2") = ""
    Controls("DataRun_P" & productInt & "Con2") = ""
    Controls("AV_P" & productInt & "Con2") = "1 x Quad Data Outlet"
End Sub

'Std Config for PLP pendants (top-down)
Private Sub PLPPendantOptions(productInt As Integer)
    Controls("Pendant" & productInt & "Name") = "Std PLP"
    Controls("P" & productInt & "Con1ArmDouble") = True
    Controls("P" & productInt & "Con1ArmFixed") = True
    Controls("P" & productInt & "Con1ArmMotorised") = False
    Controls("P" & productInt & "Con1ArmConfig") = "Rev F1000-F800, F800-F800"
    Controls("P" & productInt & "Con1Vertical") = True
    Controls("P" & productInt & "Con1Console") = "L 1295 x W 320 x D 356mm"
    Controls("P" & productInt & "Con2Vertical") = True
    Controls("P" & productInt & "Con2Console") = "L 1295 x W 320 x D 356mm"
                        
    'Console 1
    Controls("Suction_P" & productInt & "Con1") = "3"
    Controls("MedAir_P" & productInt & "Con1") = "1"
    Controls("CO2_P" & productInt & "Con1") = ""
    Controls("N2O_P" & productInt & "Con1") = ""
    Controls("Oxygen_P" & productInt & "Con1") = "2"
    Controls("ToolAir_P" & productInt & "Con1") = ""
    Controls("Scavenge_P" & productInt & "Con1") = ""
    Controls("Dia68_P" & productInt & "Con1") = "1"
    Controls("UPS_Blue_P" & productInt & "Con1") = "2"
    Controls("ESS_Red_10Amp_P" & productInt & "Con1") = "8"
    Controls("ESS_Red_20Amp_P" & productInt & "Con1") = ""
    Controls("ESS_Red_15Amp_P" & productInt & "Con1") = ""
    Controls("PowerInd_P" & productInt & "Con1") = "2"
    Controls("RCD_P" & productInt & "Con1") = ""
    Controls("Earth_P" & productInt & "Con1") = ""
    Controls("DataRun_P" & productInt & "Con1") = ""
    Controls("AV_P" & productInt & "Con1") = "1 x Quad Data Outlet"
    Controls("Pendant" & productInt & "Description") = "Std PLP"
                        
    'Console 2
    Controls("Suction_P" & productInt & "Con2") = "3"
    Controls("MedAir_P" & productInt & "Con2") = "1"
    Controls("CO2_P" & productInt & "Con2") = ""
    Controls("N2O_P" & productInt & "Con2") = ""
    Controls("Oxygen_P" & productInt & "Con2") = "2"
    Controls("ToolAir_P" & productInt & "Con2") = ""
    Controls("Scavenge_P" & productInt & "Con2") = ""
    Controls("Dia68_P" & productInt & "Con2") = "1"
    Controls("UPS_Blue_P" & productInt & "Con2") = "2"
    Controls("ESS_Red_10Amp_P" & productInt & "Con2") = "8"
    Controls("ESS_Red_20Amp_P" & productInt & "Con2") = ""
    Controls("ESS_Red_15Amp_P" & productInt & "Con2") = ""
    Controls("PowerInd_P" & productInt & "Con2") = "2"
    Controls("RCD_P" & productInt & "Con2") = ""
    Controls("Earth_P" & productInt & "Con2") = ""
    Controls("DataRun_P" & productInt & "Con2") = ""
    Controls("AV_P" & productInt & "Con2") = "1 x Quad Data Outlet"
                            
    'Specified accessories
    Controls("Pendant" & productInt & "AccSel").AddItem "Patient Lift Track, integrated into boom"
    Controls("Pendant" & productInt & "AccSel").AddItem "Second Handle"
    Controls("P" & productInt & "_Acc_Qty0").Value = "1"
    Controls("P" & productInt & "_Acc_Qty1").Value = "2"
End Sub

'Clear/Reset options if Std Config is selected previously
Private Sub ClearPendantOptions(productInt As Integer)
    Controls("Pendant" & productInt & "Name") = Sheets("Configurator").Range("P" & productInt & "Rm8Name")
    Controls("P" & productInt & "Con1ArmSingle") = False
    Controls("P" & productInt & "Con1ArmDouble") = False
    Controls("P" & productInt & "Con1ArmFixed") = False
    Controls("P" & productInt & "Con1ArmMotorised") = False
    Controls("P" & productInt & "Con1ArmConfig") = ""
    Controls("P" & productInt & "Con1Hammer") = False
    Controls("P" & productInt & "Con2Hammer") = False
    Controls("P" & productInt & "Con1Vertical") = False
    Controls("P" & productInt & "Con2Vertical") = False
    Controls("P" & productInt & "Con1LMC") = False
    Controls("P" & productInt & "Con2LMC") = False
    Controls("P" & productInt & "Con1Console") = ""
    Controls("P" & productInt & "Con2Console") = ""
    Controls("Suction_P" & productInt & "Con1") = ""
    Controls("MedAir_P" & productInt & "Con1") = ""
    Controls("CO2_P" & productInt & "Con1") = ""
    Controls("N2O_P" & productInt & "Con1") = ""
    Controls("Oxygen_P" & productInt & "Con1") = ""
    Controls("ToolAir_P" & productInt & "Con1") = ""
    Controls("Scavenge_P" & productInt & "Con1") = ""
    Controls("Dia68_P" & productInt & "Con1") = ""
    Controls("UPS_Blue_P" & productInt & "Con1") = ""
    Controls("ESS_Red_10Amp_P" & productInt & "Con1") = ""
    Controls("ESS_Red_20Amp_P" & productInt & "Con1") = ""
    Controls("ESS_Red_15Amp_P" & productInt & "Con1") = ""
    Controls("PowerInd_P" & productInt & "Con1") = ""
    Controls("RCD_P" & productInt & "Con1") = ""
    Controls("Earth_P" & productInt & "Con1") = ""
    Controls("DataRun_P" & productInt & "Con1") = ""
    Controls("AV_P" & productInt & "Con1") = ""

    'Console 2
    Controls("Suction_P" & productInt & "Con2") = ""
    Controls("MedAir_P" & productInt & "Con2") = ""
    Controls("CO2_P" & productInt & "Con2") = ""
    Controls("N2O_P" & productInt & "Con2") = ""
    Controls("Oxygen_P" & productInt & "Con2") = ""
    Controls("ToolAir_P" & productInt & "Con2") = ""
    Controls("Scavenge_P" & productInt & "Con2") = ""
    Controls("Dia68_P" & productInt & "Con2") = ""
    Controls("UPS_Blue_P" & productInt & "Con2") = ""
    Controls("ESS_Red_10Amp_P" & productInt & "Con2") = ""
    Controls("ESS_Red_20Amp_P" & productInt & "Con2") = ""
    Controls("ESS_Red_15Amp_P" & productInt & "Con2") = ""
    Controls("PowerInd_P" & productInt & "Con2") = ""
    Controls("RCD_P" & productInt & "Con2") = ""
    Controls("Earth_P" & productInt & "Con2") = ""
    Controls("DataRun_P" & productInt & "Con2") = ""
    Controls("AV_P" & productInt & "Con2") = ""
    
    Controls("Pendant" & productInt & "Description") = ""
End Sub
'
'Pendant options
'
'Option to load Std Config for ANA, Pendant 1
Private Sub Pendant1Ana_Click()
    Pendant1_Con2.Visible = False
    Pendant1Arm.Visible = True
    Pendant1FM.Visible = True
    Pendant1Console1.Visible = True
    Pendant1Console2.Visible = True

    Call FindPendantAccessories(1)
    
    Call AnaPendantOptions(1)
End Sub
'Option to load Std Config for EQ, Pendant 1
Private Sub Pendant1EQ_Click()
    Pendant1_Con2.Visible = False
    Pendant1Arm.Visible = True
    Pendant1FM.Visible = True
    Pendant1Console1.Visible = True
    Pendant1Console2.Visible = True
    
    Call FindPendantAccessories(1)
    
    Call EQPendantOptions(1)
End Sub
'Option to load Std Config for ICU, Pendant 1
Private Sub Pendant1StdICU_Click()
    Pendant1_Con2.Visible = True
    Pendant1Arm.Visible = True
    Pendant1FM.Visible = True
    Pendant1Console1.Visible = True
    Pendant1Console2.Visible = True
    
    Call FindPendantAccessories(1)
    
    Call ICUPendantOptions(1)
End Sub
'Option to load Std Config for PLP, Pendant 1
Private Sub Pendant1PLP_Click()
    Pendant1_Con2.Visible = True
    Pendant1Arm.Visible = True
    Pendant1FM.Visible = True
    Pendant1Console1.Visible = True
    Pendant1Console2.Visible = True
    Call FindPendantAccessories(1)
                    
    Call PLPPendantOptions(1)
End Sub
'Option to load Solo Pendant, Pendant 1
Private Sub Pendant1S_Click()
    Pendant1_Con2.Visible = False
    Pendant1Arm.Visible = True
    Pendant1FM.Visible = True
    Pendant1Console1.Visible = True
    Pendant1Console2.Visible = True
    
    Call FindPendantAccessories(1)
    
    Call ClearPendantOptions(1)
End Sub
'Option to load Tandem Pendant, Pendant 1
Private Sub Pendant1T_Click()
    Pendant1_Con2.Visible = True
    Pendant1Arm.Visible = True
    Pendant1FM.Visible = True
    Pendant1Console1.Visible = True
    Pendant1Console2.Visible = True
    
    Call FindPendantAccessories(1)
    
    Call ClearPendantOptions(1)
End Sub
'Options to ICU Pendant, Pendant 1
Private Sub Pendant1ICU_Click()
    Pendant1_Con2.Visible = True
    
    'Hide frames to limit option selection
    Pendant1Arm.Visible = False
    Pendant1FM.Visible = False
    Pendant1Console1.Visible = False
    Pendant1Console2.Visible = False
    
    Call FindPendantAccessories(1)
    
    Call ClearPendantOptions(1)
    
    'Limit console type to Vertical
    P1Con1Vertical = True
    P1Con2Vertical = True
End Sub

'Option to load Std Config for ANA, Pendant 2
Private Sub Pendant2Ana_Click()
    Pendant2_Con2.Visible = False
    Pendant2Arm.Visible = True
    Pendant2FM.Visible = True
    Pendant2Console1.Visible = True
    Pendant2Console2.Visible = True

    Call FindPendantAccessories(2)
    
    Call AnaPendantOptions(2)
End Sub
'Option to load Std Config for EQ, Pendant 2
Private Sub Pendant2EQ_Click()
    Pendant2_Con2.Visible = False
    Pendant2Arm.Visible = True
    Pendant2FM.Visible = True
    Pendant2Console1.Visible = True
    Pendant2Console2.Visible = True
    
    Call FindPendantAccessories(2)
    
    Call EQPendantOptions(2)
End Sub
'Option to load Std Config for ICU, Pendant 2
Private Sub Pendant2StdICU_Click()
    Pendant2_Con2.Visible = True
    Pendant2Arm.Visible = True
    Pendant2FM.Visible = True
    Pendant2Console1.Visible = True
    Pendant2Console2.Visible = True
    
    Call FindPendantAccessories(2)
    
    Call ICUPendantOptions(2)
End Sub
'Option to load Std Config for PLP, Pendant 2
Private Sub Pendant2PLP_Click()
    Pendant2_Con2.Visible = True
    Pendant2Arm.Visible = True
    Pendant2FM.Visible = True
    Pendant2Console1.Visible = True
    Pendant2Console2.Visible = True
    Call FindPendantAccessories(2)
                    
    Call PLPPendantOptions(2)
End Sub
'Option to Solo Pendant, Pendant 2
Private Sub Pendant2S_Click()
    Pendant2_Con2.Visible = False
    Pendant2Arm.Visible = True
    Pendant2FM.Visible = True
    Pendant2Console1.Visible = True
    Pendant2Console2.Visible = True

    Call FindPendantAccessories(2)

    Call ClearPendantOptions(2)
End Sub
'Option to Tandem Pendant, Pendant 2
Private Sub Pendant2T_Click()
    Pendant2_Con2.Visible = True
    Pendant2Arm.Visible = True
    Pendant2FM.Visible = True
    Pendant2Console1.Visible = True
    Pendant2Console2.Visible = True
    
    Call FindPendantAccessories(2)
    
    Call ClearPendantOptions(2)
End Sub
'Option to ICU Pendant, Pendant 2
Private Sub Pendant2ICU_Click()
    Pendant2_Con2.Visible = True
    
    'Hide frames to limit option selection
    Pendant2Arm.Visible = False
    Pendant2FM.Visible = False
    Pendant2Console1.Visible = False
    Pendant2Console2.Visible = False

    Call FindPendantAccessories(2)
    
    Call ClearPendantOptions(2)
    
    'Limit console type to Vertical
    P2Con1Vertical = True
    P2Con2Vertical = True
End Sub

'Option to load Std Config for ANA, Pendant 3
Private Sub Pendant3Ana_Click()
    Pendant3_Con2.Visible = False
    Pendant3Arm.Visible = True
    Pendant3FM.Visible = True
    Pendant3Console1.Visible = True
    Pendant3Console2.Visible = True

    Call FindPendantAccessories(3)
    
    Call AnaPendantOptions(3)
End Sub
'Option to load Std Config for EQ, Pendant 3
Private Sub Pendant3EQ_Click()
    Pendant3_Con2.Visible = False
    Pendant3Arm.Visible = True
    Pendant3FM.Visible = True
    Pendant3Console1.Visible = True
    Pendant3Console2.Visible = True
    
    Call FindPendantAccessories(3)
    
    Call EQPendantOptions(3)
End Sub
'Option to load Std Config for ICU, Pendant 3
Private Sub Pendant3StdICU_Click()
    Pendant3_Con2.Visible = True
    Pendant3Arm.Visible = True
    Pendant3FM.Visible = True
    Pendant3Console1.Visible = True
    Pendant3Console2.Visible = True
    
    Call FindPendantAccessories(3)
    
    Call ICUPendantOptions(3)
End Sub
'Option to load Std Config for PLP, Pendant 3
Private Sub Pendant3PLP_Click()
    Pendant3_Con2.Visible = True
    Pendant3Arm.Visible = True
    Pendant3FM.Visible = True
    Pendant3Console1.Visible = True
    Pendant3Console2.Visible = True
    Call FindPendantAccessories(3)
                    
    Call PLPPendantOptions(3)
End Sub
'Option to load Solo Pendant, Pendant 3
Private Sub Pendant3S_Click()
    Pendant3_Con2.Visible = False
    Pendant3Arm.Visible = True
    Pendant3FM.Visible = True
    Pendant3Console1.Visible = True
    Pendant3Console2.Visible = True
    
    Call FindPendantAccessories(3)
    
    Call ClearPendantOptions(3)
End Sub
'Option to load Tandem Pendant, Pendant 3
Private Sub Pendant3T_Click()
    Pendant3_Con2.Visible = True
    Pendant3Arm.Visible = True
    Pendant3FM.Visible = True
    Pendant3Console1.Visible = True
    Pendant3Console2.Visible = True
    
    Call FindPendantAccessories(3)
    
    Call ClearPendantOptions(3)
End Sub
'Option to load ICU Pendant, Pendant 3
Private Sub Pendant3ICU_Click()
    Pendant3_Con2.Visible = True
    
    'Hide frames to limit option selection
    Pendant3Arm.Visible = False
    Pendant3FM.Visible = False
    Pendant3Console1.Visible = False
    Pendant3Console2.Visible = False
    
    Call FindPendantAccessories(3)
    
    Call ClearPendantOptions(3)
    
    'Limit console type to Vertical
    P3Con1Vertical = True
    P3Con2Vertical = True
End Sub

'Option to load Std Config for ANA, Pendant 4
Private Sub Pendant4Ana_Click()
    Pendant4_Con2.Visible = False
    Pendant4Arm.Visible = True
    Pendant4FM.Visible = True
    Pendant4Console1.Visible = True
    Pendant4Console2.Visible = True

    Call FindPendantAccessories(4)
    
    Call AnaPendantOptions(4)
End Sub
'Option to load Std Config for EQ, Pendant 4
Private Sub Pendant4EQ_Click()
    Pendant4_Con2.Visible = False
    Pendant4Arm.Visible = True
    Pendant4FM.Visible = True
    Pendant4Console1.Visible = True
    Pendant4Console2.Visible = True

    Call FindPendantAccessories(4)
    
    Call EQPendantOptions(4)
End Sub
'Option to load Std Config for ICU, Pendant 4
Private Sub Pendant4StdICU_Click()
    Pendant4_Con2.Visible = True
    Pendant4Arm.Visible = True
    Pendant4FM.Visible = True
    Pendant4Console1.Visible = True
    Pendant4Console2.Visible = True
    
    Call FindPendantAccessories(4)
    
    Call ICUPendantOptions(4)
End Sub
'Option to load Std Config for PLP, Pendant 4
Private Sub Pendant4PLP_Click()
    Pendant4_Con2.Visible = True
    Pendant4Arm.Visible = True
    Pendant4FM.Visible = True
    Pendant4Console1.Visible = True
    Pendant4Console2.Visible = True
    Call FindPendantAccessories(4)
                    
    Call PLPPendantOptions(4)
End Sub
'Option to load Solo Pendant, Pendant 4
Private Sub Pendant4S_Click()
    Pendant4_Con2.Visible = False
    Pendant4Arm.Visible = True
    Pendant4FM.Visible = True
    Pendant4Console1.Visible = True
    Pendant4Console2.Visible = True

    Call FindPendantAccessories(4)
    
    Call ClearPendantOptions(4)
End Sub
'Option to load Tandem Pendant, Pendant 4
Private Sub Pendant4T_Click()
    Pendant4_Con2.Visible = True
    Pendant4Arm.Visible = True
    Pendant4FM.Visible = True
    Pendant4Console1.Visible = True
    Pendant4Console2.Visible = True

    Call FindPendantAccessories(4)
    
    Call ClearPendantOptions(4)
End Sub
'Option to load ICU Pendant, Pendant 4
Private Sub Pendant4ICU_Click()
    Pendant4_Con2.Visible = True
    
    'Hide frames to limit option selection
    Pendant4Arm.Visible = False
    Pendant4FM.Visible = False
    Pendant4Console1.Visible = False
    Pendant4Console2.Visible = False
    
    Call FindPendantAccessories(4)
    
    Call ClearPendantOptions(4)
    
    'Limit console type to Vertical
    P4Con1Vertical = True
    P4Con2Vertical = True
End Sub

'Option to load Std Config for ANA, Pendant 5
Private Sub Pendant5Ana_Click()
    Pendant5_Con2.Visible = False
    Pendant5Arm.Visible = True
    Pendant5FM.Visible = True
    Pendant5Console1.Visible = True
    Pendant5Console2.Visible = True

    Call FindPendantAccessories(5)
    
    Call AnaPendantOptions(5)
End Sub
'Option to load Std Config for EQ, Pendant 5
Private Sub Pendant5EQ_Click()
    Pendant5_Con2.Visible = False
    Pendant5Arm.Visible = True
    Pendant5FM.Visible = True
    Pendant5Console1.Visible = True
    Pendant5Console2.Visible = True
    
    Call FindPendantAccessories(5)
    
    Call EQPendantOptions(5)
End Sub
'Option to load Std Config for ICU, Pendant 5
Private Sub Pendant5StdICU_Click()
    Pendant5_Con2.Visible = True
    Pendant5Arm.Visible = True
    Pendant5FM.Visible = True
    Pendant5Console1.Visible = True
    Pendant5Console2.Visible = True
    
    Call FindPendantAccessories(5)
    
    Call ICUPendantOptions(5)
End Sub
'Option to load Std Config for PLP, Pendant 5
Private Sub Pendant5PLP_Click()
    Pendant5_Con2.Visible = True
    Pendant5Arm.Visible = True
    Pendant5FM.Visible = True
    Pendant5Console1.Visible = True
    Pendant5Console2.Visible = True
    Call FindPendantAccessories(5)
                    
    Call PLPPendantOptions(5)
End Sub
'Option to load Solo Pendant, Pendant 5
Private Sub Pendant5S_Click()
    Pendant5_Con2.Visible = False
    Pendant5Arm.Visible = True
    Pendant5FM.Visible = True
    Pendant5Console1.Visible = True
    Pendant5Console2.Visible = True

    Call FindPendantAccessories(5)
    
    Call ClearPendantOptions(5)
End Sub
'Option to load Tandem Pendant, Pendant 5
Private Sub Pendant5T_Click()
    Pendant5_Con2.Visible = True
    Pendant5Arm.Visible = True
    Pendant5FM.Visible = True
    Pendant5Console1.Visible = True
    Pendant5Console2.Visible = True
    
    Call FindPendantAccessories(5)
    
    Call ClearPendantOptions(5)
End Sub
'Option to load ICU Pendant, Pendant 5
Private Sub Pendant5ICU_Click()
    Pendant5_Con2.Visible = True
    
    'Hide frames to limit option selection
    Pendant5Arm.Visible = False
    Pendant5FM.Visible = False
    Pendant5Console1.Visible = False
    Pendant5Console2.Visible = False

    Call FindPendantAccessories(5)
    
    Call ClearPendantOptions(5)
    
    'Limit console type to Vertical
    P5Con1Vertical = True
    P5Con2Vertical = True
End Sub
'
'Amico Accessories Yes/No Options
'
Private Sub AmicoYes_Click()
    AmicoFrame.Visible = True
End Sub
Private Sub AmicoNo_Click()
    AmicoFrame.Visible = False
End Sub
'
'AF+IC Yes/No Options
'
Private Sub AF_IC_Yes_Click()
    AF_IC_Frame.Visible = True
End Sub
Private Sub AF_IC_No_Click()
    AF_IC_Frame.Visible = False
End Sub
'
'Digital Integration Yes/No Options
'
Private Sub DI_Yes_Click()
    DI_Frame.Visible = True
End Sub
Private Sub DI_No_Click()
    DI_Frame.Visible = False
End Sub
'
'Slings Yes/No Options
'
Private Sub SlingYes_Click()
    SlingFrame.Visible = True
End Sub
Private Sub SlingNo_Click()
    SlingFrame.Visible = False
End Sub
'
'PNote Yes/No Options
'
Private Sub PNoteYes_Click()
    PNoteContent.Visible = True
End Sub
Private Sub PNoteNo_Click()
    PNoteContent.Visible = False
End Sub
'
'Name changes tab for the specific page
'Room Section
'Room 2
Private Sub Room8Name_Change()
    RoomLabel.Caption = Controls("Room8Name").Value
End Sub

'Light Section
'Light 1
Private Sub Light1Name_Change()
    MultiPage3.Pages("Light1").Caption = Light1Name
End Sub
'Light 2
Private Sub Light2Name_Change()
    MultiPage3.Pages("Light2").Caption = Light2Name
End Sub
'Light 3
Private Sub Light3Name_Change()
    MultiPage3.Pages("Light3").Caption = Light3Name
End Sub
'Light 4
Private Sub Light4Name_Change()
    MultiPage3.Pages("Light4").Caption = Light4Name
End Sub
'Light 5
Private Sub Light5Name_Change()
    MultiPage3.Pages("Light5").Caption = Light5Name
End Sub

'Pendant Section
'Pendant 1
Private Sub Pendant1Name_Change()
    MultiPage2.Pages("Pendant1").Caption = Pendant1Name
End Sub
'Pendant 2
Private Sub Pendant2Name_Change()
    MultiPage2.Pages("Pendant2").Caption = Pendant2Name
End Sub
'Pendant 3
Private Sub Pendant3Name_Change()
    MultiPage2.Pages("Pendant3").Caption = Pendant3Name
End Sub
'Pendant 4
Private Sub Pendant4Name_Change()
    MultiPage2.Pages("Pendant4").Caption = Pendant4Name
End Sub
'Pendant 5
Private Sub Pendant5Name_Change()
    MultiPage2.Pages("Pendant5").Caption = Pendant5Name
End Sub
'
'ComboBox list
'Subs (common functions) for Lights
'Drop button list for iCE30m lights
Private Sub iCEItemList(intProduct As Integer)
    If Controls("L" & intProduct & "Single") = True Then
        Controls("L" & intProduct & "iCEItem").List = LightSingleArm
    ElseIf Controls("L" & intProduct & "Dual") = True Then
        Controls("L" & intProduct & "iCEItem").List = LightDualArm
    ElseIf Controls("L" & intProduct & "Triple") = True Then
        Controls("L" & intProduct & "iCEItem").List = LightTripleArm
    ElseIf Controls("L" & intProduct & "Quad") = True Then
        Controls("L" & intProduct & "iCEItem").List = LightQuadArm
    ElseIf Controls("L" & intProduct & "Mobile") = True Then
        Controls("L" & intProduct & "iCEItem").List = LightMobile
    ElseIf Controls("L" & intProduct & "Split") = True Then
        Controls("L" & intProduct & "iCEItem").List = LightSplit
    End If
End Sub

'Light 1
'iCE 30m
Private Sub L1iCEItem_DropButtonClick()
    Call iCEItemList(1)
End Sub

'Mira 70
Private Sub L1MiraLight_DropButtonClick()
    L1MiraLight.List = LightMira
End Sub
        
'Vega 80
Private Sub L1VegaItem_DropButtonClick()
    L1VegaItem.List = LightVega
End Sub

'MSL 119/319
Private Sub L1MSLItem_DropButtonClick()
    L1MSLItem.List = LightMSL
End Sub
'Light 2
'iCE 30m
Private Sub L2iCEItem_DropButtonClick()
    Call iCEItemList(2)
End Sub
    
'Mira 70
Private Sub L2MiraLight_DropButtonClick()
    L2MiraLight.List = LightMira
End Sub

'Vega 80
Private Sub L2VegaItem_DropButtonClick()
    L2VegaItem.List = LightVega
End Sub

'MSL 119/319
Private Sub L2MSLItem_DropButtonClick()
    L2MSLItem.List = LightMSL
End Sub
'Light 3
'iCE 30m
Private Sub L3iCEItem_DropButtonClick()
    Call iCEItemList(3)
End Sub

'Mira 70
Private Sub L3MiraLight_DropButtonClick()
    L3MiraLight.List = LightMira
End Sub

'Vega 80
Private Sub L3VegaItem_DropButtonClick()
    L3VegaItem.List = LightVega
End Sub

'MSL 119/319
Private Sub L3MSLItem_DropButtonClick()
    L3MSLItem.List = LightMSL
End Sub
'Light 4
'iCE 30m
Private Sub L4iCEItem_DropButtonClick()
    Call iCEItemList(4)
End Sub

'Mira 70
Private Sub L4MiraLight_DropButtonClick()
    L4MiraLight.List = LightMira
End Sub
        
'Vega 80
Private Sub L4VegaItem_DropButtonClick()
    L4VegaItem.List = LightVega
End Sub

'MSL 119/319
Private Sub L4MSLItem_DropButtonClick()
    L4MSLItem.List = LightMSL
End Sub
'Light 5
'iCE 30m
Private Sub L5iCEItem_DropButtonClick()
    Call iCEItemList(5)
End Sub

'Mira 70
Private Sub L5MiraLight_DropButtonClick()
    L5MiraLight.List = LightMira
End Sub
        
'Vega 80
Private Sub L5VegaItem_DropButtonClick()
    L5VegaItem.List = LightVega
End Sub

'MSL 119/319
Private Sub L5MSLItem_DropButtonClick()
    L5MSLItem.List = LightMSL
End Sub
'
'ComboBox for Arm Config, Pendant
'Subs (common functions) for Pendants
'Drop button list for pendant arm config
Private Sub PendantArmConfig(intProduct As Integer)

'If ICU/PLP Pendant is selected, only show the arm configs relevant to ICU/PLP
If Controls("Pendant" & intProduct & "ICU") = True Or Controls("Pendant" & intProduct & "StdICU") = True Or Controls("Pendant" & intProduct & "PLP") = True Then

    Controls("P" & intProduct & "Con1ArmConfig").List = ArmConfigICU

' If Single - Fixed arm, show combobox with Single Fixed Arm Configs
ElseIf Controls("P" & intProduct & "Con1ArmSingle") = True And Controls("P" & intProduct & "Con1ArmFixed") = True Then
    If Controls("Pendant" & intProduct & "T") = True Then
        Controls("P" & intProduct & "Con1ArmConfig").Clear
    Else
        Controls("P" & intProduct & "Con1ArmConfig").List = ArmConfigFSingle
    End If

'Else If Single - Motorised arm, show combobox with Single Motorised Arm Configs
ElseIf Controls("P" & intProduct & "Con1ArmSingle") = True And Controls("P" & intProduct & "Con1ArmMotorised") = True Then
    If Controls("Pendant" & intProduct & "T") = True Then
        Controls("P" & intProduct & "Con1ArmConfig").Clear
    Else
        Controls("P" & intProduct & "Con1ArmConfig").List = ArmConfigMSingle
    End If

'Else If Double - Fixed arm, show combobox with Double Fixed Arm Configs
ElseIf Controls("P" & intProduct & "Con1ArmDouble") = True And Controls("P" & intProduct & "Con1ArmFixed") = True Then

    If Controls("Pendant" & intProduct & "T") = True Then
        'If both motorised and fixed in Tandem mode, show the specific combobox with both fixed and motorised Arm Configs
        If Controls("P" & intProduct & "Con1ArmMotorised") = True Then
            Controls("P" & intProduct & "Con1ArmConfig").List = ArmConfigTMDouble
        Else
            Controls("P" & intProduct & "Con1ArmConfig").List = ArmConfigTFDouble
        End If
    Else
        Controls("P" & intProduct & "Con1ArmConfig").List = ArmConfigFDouble
    End If

'Else If Double - Motorised arm, show combobox with Double Motorised Arm Configs
ElseIf Controls("P" & intProduct & "Con1ArmDouble") = True And Controls("P" & intProduct & "Con1ArmMotorised") = True Then

    If Controls("Pendant" & intProduct & "T") = True Then
        'If both motorised and fixed in Tandem mode, show the specific combobox with both fixed and motorised Arm Configs
        If Controls("P" & intProduct & "Con1ArmFixed") = True Then
            Controls("P" & intProduct & "Con1ArmConfig").List = ArmConfigTMDouble
        Else
            Controls("P" & intProduct & "Con1ArmConfig").Clear
        End If
    Else
        Controls("P" & intProduct & "Con1ArmConfig").List = ArmConfigMDouble
    End If
End If
End Sub

'Pendant 1
Private Sub P1Con1ArmConfig_DropButtonClick()
    Call PendantArmConfig(1)
End Sub
'Pendant 2
Private Sub P2Con1ArmConfig_DropButtonClick()
    Call PendantArmConfig(2)
End Sub
'Pendant 3
Private Sub P3Con1ArmConfig_DropButtonClick()
    Call PendantArmConfig(3)
End Sub
'Pendant 4
Private Sub P4Con1ArmConfig_DropButtonClick()
    Call PendantArmConfig(4)
End Sub
'Pendant 5
Private Sub P5Con1ArmConfig_DropButtonClick()
    Call PendantArmConfig(5)
End Sub
'
'ComboBox for Console, Pendant
'Subs (common functions) for Pendants
'Drop button list for pendant console
Private Sub PendantConsole(intProduct As Integer, intConsole As Integer)

' If Hammer, show combobox with Hammer console type
If Controls("P" & intProduct & "Con" & intConsole & "Hammer").Value = True Then

    Controls("P" & intProduct & "Con" & intConsole & "Console").List = ConsoleHammer

'Else If Vertical, show combobox with Vertical console type
ElseIf Controls("P" & intProduct & "Con" & intConsole & "Vertical").Value = True Then

    Controls("P" & intProduct & "Con" & intConsole & "Console").List = ConsoleVertical

'Else If LMC, show combobox with LMC console type
ElseIf Controls("P" & intProduct & "Con" & intConsole & "LMC").Value = True Then

    Controls("P" & intProduct & "Con" & intConsole & "Console").List = ConsoleLMC
End If
End Sub

'Pendant 1 Console 1
Private Sub P1Con1Console_DropButtonClick()
    Call PendantConsole(1, 1)
End Sub

'Pendant 1 Console 2
Private Sub P1Con2Console_DropButtonClick()
    Call PendantConsole(1, 2)
End Sub
'Pendant 2 Console 1
Private Sub P2Con1Console_DropButtonClick()
    Call PendantConsole(2, 1)
End Sub

'Pendant 2 Console 2
Private Sub P2Con2Console_DropButtonClick()
    Call PendantConsole(2, 2)
End Sub
'Pendant 3 Console 1
Private Sub P3Con1Console_DropButtonClick()
    Call PendantConsole(3, 1)
End Sub

'Pendant 3 Console 2
Private Sub P3Con2Console_DropButtonClick()
    Call PendantConsole(3, 2)
End Sub
'Pendant 4 Console 1
Private Sub P4Con1Console_DropButtonClick()
    Call PendantConsole(4, 1)
End Sub

'Pendant 4 Console 2
Private Sub P4Con2Console_DropButtonClick()
    Call PendantConsole(4, 2)
End Sub
'Pendant 5 Console 1
Private Sub P5Con1Console_DropButtonClick()
    Call PendantConsole(5, 1)
End Sub

'Pendant 5 Console 2
Private Sub P5Con2Console_DropButtonClick()
    Call PendantConsole(5, 2)
End Sub
'Light Section
'Checkboxes - if ticked/unticked, selects/unselect all items in list
'Subs (common functions) for Lights
Private Sub LightCBox(intProduct As Integer)
    If Controls("Light" & intProduct & "CBox2").Value = True Then
        For I = 0 To Controls("Light" & intProduct & "AccSel").ListCount - 1
            Controls("Light" & intProduct & "AccSel").Selected(I) = True
        Next I
    End If

    If Controls("Light" & intProduct & "CBox2").Value = False Then
        For I = 0 To Controls("Light" & intProduct & "AccSel").ListCount - 1
            Controls("Light" & intProduct & "AccSel").Selected(I) = False
        Next I
    End If
End Sub

'Light 1
Private Sub Light1CBox2_Click()
    Call LightCBox(1)
End Sub
'Light 2
Private Sub Light2CBox2_Click()
    Call LightCBox(2)
End Sub
'Light 3
Private Sub Light3CBox2_Click()
    Call LightCBox(3)
End Sub
'Light 4
Private Sub Light4CBox2_Click()
    Call LightCBox(4)
End Sub
'Light 5
Private Sub Light5CBox2_Click()
    Call LightCBox(5)
End Sub
'Pendant Section
'Subs (common functions) for Pendants
Private Sub PendantCBox(intProduct As Integer)
    If Controls("Pendant" & intProduct & "CBox2").Value = True Then
        For I = 0 To Controls("Pendant" & intProduct & "AccSel").ListCount - 1
            Controls("Pendant" & intProduct & "AccSel").Selected(I) = True
        Next I
    End If

    If Controls("Pendant" & intProduct & "CBox2").Value = False Then
        For I = 0 To Controls("Pendant" & intProduct & "AccSel").ListCount - 1
            Controls("Pendant" & intProduct & "AccSel").Selected(I) = False
        Next I
    End If
End Sub

'Pendant 1
Private Sub Pendant1CBox2_Click()
    Call PendantCBox(1)
End Sub
'Pendant 2
Private Sub Pendant2CBox2_Click()
    Call PendantCBox(2)
End Sub
'Pendant 3
Private Sub Pendant3CBox2_Click()
    Call PendantCBox(3)
End Sub
'Pendant 4
Private Sub Pendant4CBox2_Click()
    Call PendantCBox(4)
End Sub
'Pendant 5
Private Sub Pendant5CBox2_Click()
    Call PendantCBox(5)
End Sub

'Amico Accessories
Private Sub AmicoAccCBox2_Click()
    If AmicoAccCBox2.Value = True Then
        For I = 0 To AmicoAccSel.ListCount - 1
            AmicoAccSel.Selected(I) = True
        Next I
    End If
    
    If AmicoAccCBox2.Value = False Then
        For I = 0 To AmicoAccSel.ListCount - 1
            AmicoAccSel.Selected(I) = False
        Next I
    End If
End Sub

'AF+IC
Private Sub AF_IC_CBox2_Click()
    If AF_IC_CBox2.Value = True Then
        For I = 0 To AF_IC_Sel.ListCount - 1
            AF_IC_Sel.Selected(I) = True
        Next I
    End If
    
    If AF_IC_CBox2.Value = False Then
        For I = 0 To AF_IC_Sel.ListCount - 1
            AF_IC_Sel.Selected(I) = False
        Next I
    End If
End Sub

'Digital Integration
Private Sub DI_CBox2_Click()
    If DI_CBox2.Value = True Then
        For I = 0 To DI_Sel.ListCount - 1
            DI_Sel.Selected(I) = True
        Next I
    End If
    
    If DI_CBox2.Value = False Then
        For I = 0 To DI_Sel.ListCount - 1
            DI_Sel.Selected(I) = False
        Next I
    End If
End Sub
        
'Slings
Private Sub SlingCBox2_Click()
    If SlingCBox2.Value = True Then
        For I = 0 To SlingSel.ListCount - 1
            SlingSel.Selected(I) = True
        Next I
    End If
                    
    If SlingCBox2.Value = False Then
        For I = 0 To SlingSel.ListCount - 1
            SlingSel.Selected(I) = False
        Next I
    End If
End Sub
'
'Add and Remove buttons
'
'Subs (common functions) for Lights & Pendants
'Add selected acc into the selected listbox
Private Sub ProductAdd(intProduct As Integer, strProduct As String)
    For I = 0 To Controls(strProduct & intProduct & "Acc").ListCount - 1
        If Controls(strProduct & intProduct & "Acc").Selected(I) = True Then
            Controls(strProduct & intProduct & "AccSel").AddItem Controls(strProduct & intProduct & "Acc").List(I)
        End If
    Next I

    'Deselect after add
    For I = 0 To Controls(strProduct & intProduct & "Acc").ListCount - 1
        Controls(strProduct & intProduct & "Acc").Selected(I) = False
    Next I
End Sub
'Remove selected acc in selected listbox
Private Sub ProductRemove(intProduct As Integer, strProduct As String)
    counter = 0
    For I = 0 To Controls(strProduct & intProduct & "AccSel").ListCount - 1
        If Controls(strProduct & intProduct & "AccSel").Selected(I - counter) Then
            Controls(strProduct & intProduct & "AccSel").RemoveItem (I - counter)
            counter = counter + 1
        End If
    Next I
End Sub

'Light Section
'Light 1
Private Sub Light1Add_Click()
    Call ProductAdd(1, "Light")
End Sub

Private Sub Light1Remove_Click()
    Call ProductRemove(1, "Light")
End Sub
'Light 2
Private Sub Light2Add_Click()
    Call ProductAdd(2, "Light")
End Sub

Private Sub Light2Remove_Click()
    Call ProductRemove(2, "Light")
End Sub
'Light 3
Private Sub Light3Add_Click()
    Call ProductAdd(3, "Light")
End Sub

Private Sub Light3Remove_Click()
    Call ProductRemove(3, "Light")
End Sub
'Light 4
Private Sub Light4Add_Click()
    Call ProductAdd(4, "Light")
End Sub

Private Sub Light4Remove_Click()
    Call ProductRemove(4, "Light")
End Sub
'Light 5
Private Sub Light5Add_Click()
    Call ProductAdd(5, "Light")
End Sub

Private Sub Light5Remove_Click()
    Call ProductRemove(5, "Light")
End Sub

'Pendant Section
'Pendant 1
Private Sub Pendant1Add_Click()
    Call ProductAdd(1, "Pendant")
End Sub

Private Sub Pendant1Remove_Click()
    Call ProductRemove(1, "Pendant")
End Sub
'Pendant 2
Private Sub Pendant2Add_Click()
    Call ProductAdd(2, "Pendant")
End Sub

Private Sub Pendant2Remove_Click()
    Call ProductRemove(2, "Pendant")
End Sub
'Pendant 3
Private Sub Pendant3Add_Click()
    Call ProductAdd(3, "Pendant")
End Sub

Private Sub Pendant3Remove_Click()
    Call ProductRemove(3, "Pendant")
End Sub
'Pendant 4
Private Sub Pendant4Add_Click()
    Call ProductAdd(4, "Pendant")
End Sub

Private Sub Pendant4Remove_Click()
    Call ProductRemove(4, "Pendant")
End Sub
'Pendant 5
Private Sub Pendant5Add_Click()
    Call ProductAdd(5, "Pendant")
End Sub

Private Sub Pendant5Remove_Click()
    Call ProductRemove(5, "Pendant")
End Sub

'Amico Accessories
Private Sub AmicoAccAdd_Click()
    For I = 0 To AmicoAcc.ListCount - 1
        If AmicoAcc.Selected(I) = True Then AmicoAccSel.AddItem AmicoAcc.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To AmicoAcc.ListCount - 1
        AmicoAcc.Selected(I) = False
    Next I
End Sub
Private Sub AmicoAccRemove_Click()
counter = 0

    For I = 0 To AmicoAccSel.ListCount - 1
        If AmicoAccSel.Selected(I - counter) Then
            AmicoAccSel.RemoveItem (I - counter)
            counter = counter + 1
        End If
    Next I
End Sub

'AF + IC
'Listbox 1
Private Sub AirFRAME_LEDiffuserAdd_Click()
    For I = 0 To AirFRAME_LEDiffuser.ListCount - 1
        If AirFRAME_LEDiffuser.Selected(I) = True Then AF_IC_Sel.AddItem AirFRAME_LEDiffuser.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To AirFRAME_LEDiffuser.ListCount - 1
        AirFRAME_LEDiffuser.Selected(I) = False
    Next I
End Sub

'Listbox 2
Private Sub InfAccAdd_Click()
    For I = 0 To InfAccessories.ListCount - 1
        If InfAccessories.Selected(I) = True Then AF_IC_Sel.AddItem InfAccessories.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To InfAccessories.ListCount - 1
        InfAccessories.Selected(I) = False
    Next I
End Sub

'Listbox 3
Private Sub In_GridIndigoCleanAdd_Click()
    For I = 0 To In_GridIndigoClean.ListCount - 1
        If In_GridIndigoClean.Selected(I) = True Then AF_IC_Sel.AddItem In_GridIndigoClean.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To In_GridIndigoClean.ListCount - 1
        In_GridIndigoClean.Selected(I) = False
    Next I
End Sub

'Listbox 4
Private Sub IndigoComponentAdd_Click()
    For I = 0 To IndigoComponent.ListCount - 1
        If IndigoComponent.Selected(I) = True Then AF_IC_Sel.AddItem IndigoComponent.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To IndigoComponent.ListCount - 1
        IndigoComponent.Selected(I) = False
    Next I
End Sub

Private Sub AF_IC_Remove_Click()
counter = 0

    For I = 0 To AF_IC_Sel.ListCount - 1
        If AF_IC_Sel.Selected(I - counter) Then
            AF_IC_Sel.RemoveItem (I - counter)
            counter = counter + 1
        End If
    Next I
End Sub

'Digital Integration
'Listbox 1
Private Sub SurgicalMonitor_Add_Click()
    For I = 0 To SurgicalMonitor.ListCount - 1
        If SurgicalMonitor.Selected(I) = True Then DI_Sel.AddItem SurgicalMonitor.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To SurgicalMonitor.ListCount - 1
        SurgicalMonitor.Selected(I) = False
    Next I
End Sub

'Listbox 2
Private Sub WallDisplay_Add_Click()
    For I = 0 To WallDisplay.ListCount - 1
        If WallDisplay.Selected(I) = True Then DI_Sel.AddItem WallDisplay.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To WallDisplay.ListCount - 1
        WallDisplay.Selected(I) = False
    Next I
End Sub

'Listbox 3
Private Sub Encoder_Decoder_Add_Click()
    For I = 0 To Encoder_Decoder.ListCount - 1
        If Encoder_Decoder.Selected(I) = True Then DI_Sel.AddItem Encoder_Decoder.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To Encoder_Decoder.ListCount - 1
        Encoder_Decoder.Selected(I) = False
    Next I
End Sub

'Listbox 4
Private Sub TouchPanel_Add_Click()
    For I = 0 To TouchPanel.ListCount - 1
        If TouchPanel.Selected(I) = True Then DI_Sel.AddItem TouchPanel.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To TouchPanel.ListCount - 1
        TouchPanel.Selected(I) = False
    Next I
End Sub

'Listbox 5
Private Sub RoomCamera_Add_Click()
    For I = 0 To RoomCamera.ListCount - 1
        If RoomCamera.Selected(I) = True Then DI_Sel.AddItem RoomCamera.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To RoomCamera.ListCount - 1
        RoomCamera.Selected(I) = False
    Next I
End Sub

'Listbox 6
Private Sub Audio_Add_Click()
    For I = 0 To Audio.ListCount - 1
        If Audio.Selected(I) = True Then DI_Sel.AddItem Audio.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To Audio.ListCount - 1
        Audio.Selected(I) = False
    Next I
End Sub

'Listbox 7
Private Sub Others_Acc_Add_Click()
    For I = 0 To Others_Acc.ListCount - 1
        If Others_Acc.Selected(I) = True Then DI_Sel.AddItem Others_Acc.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To Others_Acc.ListCount - 1
        Others_Acc.Selected(I) = False
    Next I
End Sub

'Listbox 8
Private Sub FibreCabling_Add_Click()
    For I = 0 To FibreCabling.ListCount - 1
        If FibreCabling.Selected(I) = True Then DI_Sel.AddItem FibreCabling.List(I)
    Next I
    
    'Deselect after add
    For I = 0 To FibreCabling.ListCount - 1
        FibreCabling.Selected(I) = False
    Next I
End Sub

Private Sub DI_Remove_Click()

    counter = 0
    For I = 0 To DI_Sel.ListCount - 1
        If DI_Sel.Selected(I - counter) Then
            DI_Sel.RemoveItem (I - counter)
            counter = counter + 1
        End If
    Next I
End Sub
    
'Slings
Private Sub SlingAdd_Click()
    For I = 0 To Sling.ListCount - 1
        If Sling.Selected(I) = True Then SlingSel.AddItem Sling.List(I)
    Next I
                        
    'Deselect after add
    For I = 0 To Sling.ListCount - 1
        Sling.Selected(I) = False
    Next I
End Sub
Private Sub SlingRemove_Click()
counter = 0
    For I = 0 To SlingSel.ListCount - 1
        If SlingSel.Selected(I - counter) Then
            SlingSel.RemoveItem (I - counter)
            counter = counter + 1
        End If
    Next I
End Sub
'
'Initialize Userform for Configurator
'
Private Sub UserForm_Initialize()

With Me
    'Ensures userform opens up on same monitor as the excel file
    'Position top/left of Excel App
    .Top = Application.Top
    .Left = Application.Left
    
    'Approx over top/left cell (depends on toolbars visible)
    .Top = Application.Top + 110
    .Left = Application.Left + 25
End With

'Go to Configurator Section
Sheets("Proposal").Activate
Unprotect
Application.Goto Reference:="Configurator"

Call OptimizeCode_Begin

'Number of QTY textboxes for all product categories
qtyLight = 19
qtyPendant = 19
qtyAFIC = 19
qtyAmicoAcc = 14
qtyInt = 19
qtySling = 14

' Declare dynamic array for product configs - Lights & Pendants (up to a max of 5)
Set rg = ThisWorkbook.Worksheets("Configurator").Range("D1:H2")
P = rg.Value

'Room Section
    With Sheets("Variable")
        Set FindFirstRoomDescRow = .Range("M:M").Find(What:="Room Description", LookIn:=xlValues)
        Set FindLastRoomDescRow = .Range("M:M").Find(What:="End of RoomDesc", LookIn:=xlValues)

        'First and last row of default room descriptions
        firstRoomDescRow = FindFirstRoomDescRow.Row + 1
        lastRoomDescRow = FindLastRoomDescRow.Row - 1
        
        'Dimension of Room Description array
        size = lastRoomDescRow - firstRoomDescRow + 1
        ReDim roomDesc(size)
    
        'Initialize Room Descriptions
        counter = 1
        For I = firstRoomDescRow To lastRoomDescRow
            'Get default room descriptions
            roomDesc(counter) = .Range("M" & I).Value
            counter = counter + 1
        Next I
    End With

    'Initialize TextBoxes
    With Sheets("Configurator")
        Controls("Room8Name").Value = .Range("Room8Name")
        Controls("Room8No").Value = .Range("Room8Qty")
        Controls("Room8Description").Value = .Range("Room8Desc")
    End With
    
    Rm8Range = Sheets("Variable").Range("Rm8Range").Value
    
'Up to 5 Lights & Pendants can be configured
For X = LBound(P, 2) To UBound(P, 2)
    Call LightCategory
    Call PendantCategory
Next X

'Check if any Amico Accessories have been configured
Call AmicoCategory

'Check if any AF+IC have been configured
Call AFCategory

'Check if any Digital Integration have been configured
Call DICategory

'Check if any Slings have been configured
Call SlingCategory

'Check if PNote has been configured
Call PNoteCategory

Call OptimizeCode_End

    'If in BDM or Mgmt mode, protect the "Proposal" worksheet
    'Protect the workbook to prevent in-cell warnings and free-form editing after running and "closing" the Configurator
    If Range("ViewMode").Value = "BDM" Or Range("ViewMode").Value = "Management" Then
        Protect
    Else
        Unprotect
    End If

    'Set Focus
    'PendantNo.SetFocus
End Sub

Private Sub LightCategory()
'Lights Section
    LightNo = Sheets("Configurator").Range("LightRm8Qty")

    k = 5
    
    For j = 2 To k
        MultiPage3.Pages("Light" & j).Visible = False
    Next j

    If IsNumeric(LightNo.Value) = True And LightNo.Value > 0 And LightNo.Value <= k Then
        
        'Hide pages depending on user input for number of lights
        For j = LightNo.Value + 1 To k
            MultiPage3.Pages("Light" & j).Visible = False
        Next j
        
        'Show pages depending on user input for number of lights
        For I = 1 To LightNo.Value
            MultiPage3.Pages("Light" & I).Visible = True
        Next I
    End If

    With Sheets("Configurator")
    'Initialize TextBoxes
        Controls("Light" & P(1, X) & "Name").Value = .Range("L" & P(1, X) & "Rm8Name")
        Controls("Light" & P(1, X) & "No").Value = .Range("L" & P(1, X) & "Rm8Qty")
        Controls("Light" & P(1, X) & "Description").Value = .Range("L" & P(1, X) & "Rm8Desc")
        Controls("L" & P(1, X) & "iCEItem").Value = .Range("L" & P(1, X) & "Rm8iCE")
        Controls("L" & P(1, X) & "4KCam").Value = .Range("L" & P(1, X) & "Rm84KCam")
        Controls("L" & P(1, X) & "CamAdder").Value = .Range("L" & P(1, X) & "Rm8CamAdder")
        Controls("L" & P(1, X) & "MiraLight").Value = .Range("L" & P(1, X) & "Rm8Mira")
        Controls("L" & P(1, X) & "VegaItem").Value = .Range("L" & P(1, X) & "Rm8Vega")
        Controls("L" & P(1, X) & "MSLItem").Value = .Range("L" & P(1, X) & "Rm8Gamma")
        
    'Initialize Options
        If .Range("L" & P(1, X) & "Rm8Type") = "iCE 30m" Then
            Controls("L" & P(1, X) & "iCE").Value = True
            Controls("L" & P(1, X) & "Gamma").Value = False
            Controls("L" & P(1, X) & "Mira").Value = False
            Controls("L" & P(1, X) & "Vega").Value = False
        ElseIf .Range("L" & P(1, X) & "Rm8Type") = "Mira 70/110" Then
            Controls("L" & P(1, X) & "iCE").Value = False
            Controls("L" & P(1, X) & "Gamma").Value = False
            Controls("L" & P(1, X) & "Mira").Value = True
            Controls("L" & P(1, X) & "Vega").Value = False
        ElseIf .Range("L" & P(1, X) & "Rm8Type") = "Vega 80" Then
            Controls("L" & P(1, X) & "iCE").Value = False
            Controls("L" & P(1, X) & "Gamma").Value = False
            Controls("L" & P(1, X) & "Mira").Value = False
            Controls("L" & P(1, X) & "Vega").Value = True
        ElseIf .Range("L" & P(1, X) & "Rm8Type") = "MSL119/319" Then
            Controls("L" & P(1, X) & "iCE").Value = False
            Controls("L" & P(1, X) & "Gamma").Value = True
            Controls("L" & P(1, X) & "Mira").Value = False
            Controls("L" & P(1, X) & "Vega").Value = False
        End If
        
        'Options for iCE 30m
        If .Range("L" & P(1, X) & "Rm8Single") = False Then
            Controls("L" & P(1, X) & "Single").Value = False
        Else
            Controls("L" & P(1, X) & "Single").Value = True
        End If
        If .Range("L" & P(1, X) & "Rm8Dual") = False Then
            Controls("L" & P(1, X) & "Dual").Value = False
        Else
            Controls("L" & P(1, X) & "Dual").Value = True
        End If
        If .Range("L" & P(1, X) & "Rm8Triple") = False Then
            Controls("L" & P(1, X) & "Triple").Value = False
        Else
            Controls("L" & P(1, X) & "Triple").Value = True
        End If
        If .Range("L" & P(1, X) & "Rm8Quad") = False Then
            Controls("L" & P(1, X) & "Quad").Value = False
        Else
            Controls("L" & P(1, X) & "Quad").Value = True
        End If
        If .Range("L" & P(1, X) & "Rm8Mobile") = False Then
            Controls("L" & P(1, X) & "Mobile").Value = False
        Else
            Controls("L" & P(1, X) & "Mobile").Value = True
        End If
        If .Range("L" & P(1, X) & "Rm8Split") = False Then
            Controls("L" & P(1, X) & "Split").Value = False
        Else
            Controls("L" & P(1, X) & "Split").Value = True
        End If

    'Initialize Comboboxes
        'iCE 30m
        'Single Arm
    With Sheets("StandardList")
        Set FindFirstSingleArmRow = .Range("B:B").Find(What:="1) Single Arm", LookIn:=xlValues)
        Set FindLastSingleArmRow = .Range("B:B").Find(What:="2) Dual Arm", LookIn:=xlValues)
        
        'Dual Arm
        Set FindFirstDualArmRow = .Range("B:B").Find(What:="2) Dual Arm", LookIn:=xlValues)
        Set FindLastDualArmRow = .Range("B:B").Find(What:="3) Triple Arm", LookIn:=xlValues)
        
        'Triple Arm
        Set FindFirstTripleArmRow = .Range("B:B").Find(What:="3) Triple Arm", LookIn:=xlValues)
        Set FindLastTripleArmRow = .Range("B:B").Find(What:="4) Quad Arm", LookIn:=xlValues)
        
        'Quad Arm
        Set FindFirstQuadArmRow = .Range("B:B").Find(What:="4) Quad Arm", LookIn:=xlValues)
        Set FindLastQuadArmRow = .Range("B:B").Find(What:="5) Accessories/Adders", LookIn:=xlValues)
        
        'Mobile Light
        Set FindFirstMobileRow = .Range("B:B").Find(What:="6) Mobile Light", LookIn:=xlValues)
        Set FindLastMobileRow = .Range("B:B").Find(What:="MSL", LookIn:=xlValues)
        
        'MSL
        Set FindFirstMSLRow = .Range("B:B").Find(What:="MSL", LookIn:=xlValues)
        Set FindLastMSLRow = .Range("B:B").Find(What:="VEGA 80", LookIn:=xlValues)
                        
        'Mira 70/110
        Set FindFirstMiraRow = .Range("B:B").Find(What:="MIRA 70/110", LookIn:=xlValues)
        Set FindLastMiraRow = .Range("B:B").Find(What:="L-MLED110-FS-XX-EX", LookIn:=xlValues)
                        
        'Vega 80
        Set FindFirstVegaRow = .Range("B:B").Find(What:="VEGA 80", LookIn:=xlValues)
        Set FindLastVegaRow = .Range("B:B").Find(What:="L-VLED80-FS-XX-EX", LookIn:=xlValues)
    
        'First and last row
        firstSingleArmRow = FindFirstSingleArmRow.Row + 1
        lastSingleArmRow = FindLastSingleArmRow.Row - 1
        firstDualArmRow = FindFirstDualArmRow.Row + 1
        lastDualArmRow = FindLastDualArmRow.Row - 1
        firstTripleArmRow = FindFirstTripleArmRow.Row + 1
        lastTripleArmRow = FindLastTripleArmRow.Row - 1
        firstQuadArmRow = FindFirstQuadArmRow.Row + 1
        lastQuadArmRow = FindLastQuadArmRow.Row - 1
        firstMobileRow = FindFirstMobileRow.Row + 1
        lastMobileRow = FindLastMobileRow.Row - 1
        firstMSLRow = FindFirstMSLRow.Row + 1
        lastMSLRow = FindLastMSLRow.Row - 1
        firstMiraRow = FindFirstMiraRow.Row + 1
        lastMiraRow = FindLastMiraRow.Row
        firstVegaRow = FindFirstVegaRow.Row + 1
        lastVegaRow = FindLastVegaRow.Row
        
        'Dimension of SingleArm array
        size = lastSingleArmRow - firstSingleArmRow + 1
        ReDim LightSingleArm(size)
        
        'Dimension of DualArm array
        size = lastDualArmRow - firstDualArmRow + 1
        ReDim LightDualArm(size)
        
        'Dimension of TripleArm array
        size = lastTripleArmRow - firstTripleArmRow + 1
        ReDim LightTripleArm(size)
        
        'Dimension of QuadArm array
        size = lastQuadArmRow - firstQuadArmRow + 1
        ReDim LightQuadArm(size)
    
        'Dimension of Mobile array
        size = lastMobileRow - firstMobileRow + 1
        ReDim LightMobile(size)
        
        'Mira 70/110 lights
        size = lastMiraRow - firstMiraRow + 1
        ReDim LightMira(size)
                        
        'Vega 80 lights
        size = lastVegaRow - firstVegaRow + 1
        ReDim LightVega(size)
                        
        'MSL lights
        size = lastMSLRow - firstMSLRow + 1
        ReDim LightMSL(size)
        
        'Generic descriptions for Lights (iCE30m)
        With Sheets("Variable")
            Set FindFirstLiCE30DescRow = .Range("P:P").Find(What:="Light (iCE30m)", LookIn:=xlValues)
            Set FindLastLiCE30DescRow = .Range("P:P").Find(What:="End of LiCE30", LookIn:=xlValues)
    
            'First and last row of default light descriptions
            firstLiCE30DescRow = FindFirstLiCE30DescRow.Row + 1
            lastLiCE30DescRow = FindLastLiCE30DescRow.Row - 1
            
            'Dimension of light Desc array
            size = lastLiCE30DescRow - firstLiCE30DescRow + 1
            ReDim iCE30mDesc(size)
        
            'Initialize Light (iCE30m) Descriptions
            counter = 1
            For I = firstLiCE30DescRow To lastLiCE30DescRow
                'Get default Light (iCE30m) descriptions
                iCE30mDesc(counter) = .Range("P" & I).Value
                counter = counter + 1
            Next I
        End With
    
        'Get items for combobox
        'Single Arm
        counter = 1
        For I = firstSingleArmRow To lastSingleArmRow
            'Get Lights - Single Arm line items
            LightSingleArm(counter) = .Range("D" & I).Value
            counter = counter + 1
        Next I
        
        'Dual Arm
        counter = 1
        For I = firstDualArmRow To lastDualArmRow
        
            If .Range("D" & I).Value = "Dual Ceiling, 30m/Single Monitor Holder" Then
                LightSplit(1) = .Range("D" & I).Value
            End If
            
            'Get Lights - Dual Arm line items
            LightDualArm(counter) = .Range("D" & I).Value
            counter = counter + 1
        Next I
        
        'Triple Arm
        counter = 1
        For I = firstTripleArmRow To lastTripleArmRow
            'Get Lights - Triple Arm line items
            LightTripleArm(counter) = .Range("D" & I).Value
            counter = counter + 1
        Next I
        
        'Quad Arm
        counter = 1
        For I = firstQuadArmRow To lastQuadArmRow
            'Get Lights - Quad Arm line items
            LightQuadArm(counter) = .Range("D" & I).Value
            counter = counter + 1
        Next I
    
        'Mobile Light
        counter = 1
        For I = firstMobileRow To lastMobileRow
            'Get Lights - Mobile line items
            LightMobile(counter) = .Range("D" & I).Value
            counter = counter + 1
        Next I
        
        'Mira70/110 Light
        counter = 1
        For I = firstMiraRow To lastMiraRow
            'Get Mira 70/110 line items
            LightMira(counter) = .Range("D" & I).Value
            counter = counter + 1
        Next I
                        
        'Vega 80 Light
        counter = 1
        For I = firstVegaRow To lastVegaRow
            'Get Vega 80 line items
            LightVega(counter) = .Range("D" & I).Value
            counter = counter + 1
        Next I
                        
        'MSL Light
        counter = 1
        For I = firstMSLRow To lastMSLRow
            'Get MSL119/319 line items
            LightMSL(counter) = .Range("D" & I).Value
            counter = counter + 1
        Next I
    End With

        Set FindFirstLiCEAccRow = .Range(Rm8Range).Find(What:="Accessories - iCE 30m", LookIn:=xlValues)
        Set FindLastLiCEAccRow = .Range(Rm8Range).Find(What:="Accessories - Mira 70 / 110 - Vega 80", LookIn:=xlValues)
    
        'First and last row for Light Accessories
        firstLiCEAccRow = FindFirstLiCEAccRow.Row + 1
        lastLiCEAccRow = FindLastLiCEAccRow.Row - 2

        Set FindFirstLMiraAccRow = .Range(Rm8Range).Find(What:="Accessories - Mira 70 / 110 - Vega 80", LookIn:=xlValues)
        Set FindLastLMiraAccRow = .Range(Rm8Range).Find(What:="Pendants", LookIn:=xlValues)
        
        'First and last row for Light Accessories
        lastLMiraAccRow = FindLastLMiraAccRow.Row - 2
        
        If Controls("L" & P(1, X) & "Vega").Value = True Then
            firstLMiraAccRow = FindFirstLMiraAccRow.Row + 2
        ElseIf Controls("L" & P(1, X) & "Mira").Value = True Then
            firstLMiraAccRow = FindFirstLMiraAccRow.Row + 1
        End If

        If Controls("L" & P(1, X) & "iCE").Value = True Then

            counter = 0
            For I = firstLiCEAccRow To lastLiCEAccRow
                'Add non-zero quantity accessories into the Selected listbox, and its quantity into the relevant textbox
                If .Range(P(2, X) & I).Value > 0 And .Range(P(2, X) & I).Value <> "" Then
                    Controls("Light" & P(1, X) & "AccSel").AddItem .Range("B" & I).Value
                    Controls("L" & P(1, X) & "_Acc_Qty" & counter).Value = .Range(P(2, X) & I).Value
                    counter = counter + 1
                End If
            Next I
            
        ElseIf Controls("L" & P(1, X) & "Mira").Value = True Or Controls("L" & P(1, X) & "Vega").Value = True Then
        
            counter = 0
            For I = firstLMiraAccRow To lastLMiraAccRow
                'Add non-zero quantity accessories into the Selected listbox, and its quantity into the relevant textbox
                If .Range(P(2, X) & I).Value > 0 And .Range(P(2, X) & I).Value <> "" Then
                    Controls("Light" & P(1, X) & "AccSel").AddItem .Range("B" & I).Value
                    Controls("L" & P(1, X) & "_Acc_Qty" & counter).Value = .Range(P(2, X) & I).Value
                    counter = counter + 1
                End If
            Next I
        End If
    End With
    
    'Initialize checkboxes
    Controls("Light" & P(1, X) & "CBox2").Value = False
End Sub
Private Sub PendantCategory()
'Pendants Section
    PendantNo = Sheets("Configurator").Range("PendantRm8Qty")

    k = 5
    
    For j = 2 To k
        MultiPage2.Pages("Pendant" & j).Visible = False
    Next j

    If IsNumeric(PendantNo.Value) = True And PendantNo.Value > 0 And PendantNo.Value <= k Then
        
        'Hide pages depending on user input for number of pendants
        For j = PendantNo.Value + 1 To k
            MultiPage2.Pages("Pendant" & j).Visible = False
        Next j
        
        'Show pages depending on user input for number of pendants
        For I = 1 To PendantNo.Value
            MultiPage2.Pages("Pendant" & I).Visible = True
        Next I
    End If
    
    With Sheets("Configurator")
    
    'Initialize TextBoxes
        Controls("Pendant" & P(1, X) & "No").Value = .Range("P" & P(1, X) & "Rm8Qty")
        
    'Initialize Options
        If .Range("P" & P(1, X) & "Rm8Type") = "Solo" Then
            Controls("Pendant" & P(1, X) & "S").Value = True
        ElseIf .Range("P" & P(1, X) & "Rm8Type") = "Tandem" Then
            Controls("Pendant" & P(1, X) & "T").Value = True
        ElseIf .Range("P" & P(1, X) & "Rm8Type") = "Tandem - ICU" Then
            Controls("Pendant" & P(1, X) & "ICU").Value = True
        ElseIf .Range("P" & P(1, X) & "Rm8Type") = "Std Ana" Then
            Controls("Pendant" & P(1, X) & "Ana").Value = True
        ElseIf .Range("P" & P(1, X) & "Rm8Type") = "Std EQ" Then
            Controls("Pendant" & P(1, X) & "EQ").Value = True
        ElseIf .Range("P" & P(1, X) & "Rm8Type") = "Std ICU" Then
            Controls("Pendant" & P(1, X) & "StdICU").Value = True
        ElseIf .Range("P" & P(1, X) & "Rm8Type") = "Std PLP" Then
            Controls("Pendant" & P(1, X) & "PLP").Value = True
        End If
        
        Controls("Pendant" & P(1, X) & "Name").Value = .Range("P" & P(1, X) & "Rm8Name")
        Controls("Pendant" & P(1, X) & "Description").Value = .Range("P" & P(1, X) & "Rm8Desc")
        
        'Console 1
        If .Range("P" & P(1, X) & "Rm8Con1ArmSingle") = False And .Range("P" & P(1, X) & "Rm8Con1ArmDual") = True Then
            Controls("P" & P(1, X) & "Con1ArmSingle").Value = False
            Controls("P" & P(1, X) & "Con1ArmDouble").Value = True
        ElseIf .Range("P" & P(1, X) & "Rm8Con1ArmSingle") = True And .Range("P" & P(1, X) & "Rm8Con1ArmDual") = False Then
            Controls("P" & P(1, X) & "Con1ArmSingle").Value = True
            Controls("P" & P(1, X) & "Con1ArmDouble").Value = False
        Else
            Controls("P" & P(1, X) & "Con1ArmSingle").Value = False
            Controls("P" & P(1, X) & "Con1ArmDouble").Value = False
        End If

        If .Range("P" & P(1, X) & "Rm8Con1ArmFixed") = False And .Range("P" & P(1, X) & "Rm8Con1ArmMotorised") = True Then
            Controls("P" & P(1, X) & "Con1ArmFixed").Value = False
            Controls("P" & P(1, X) & "Con1ArmMotorised").Value = True
        ElseIf .Range("P" & P(1, X) & "Rm8Con1ArmFixed") = True And .Range("P" & P(1, X) & "Rm8Con1ArmMotorised") = False Then
            Controls("P" & P(1, X) & "Con1ArmFixed").Value = True
            Controls("P" & P(1, X) & "Con1ArmMotorised").Value = False
        ElseIf .Range("P" & P(1, X) & "Rm8Con1ArmFixed") = True And .Range("P" & P(1, X) & "Rm8Con1ArmMotorised") = True Then
            Controls("P" & P(1, X) & "Con1ArmFixed").Value = True
            Controls("P" & P(1, X) & "Con1ArmMotorised").Value = True
        Else
            Controls("P" & P(1, X) & "Con1ArmFixed").Value = False
            Controls("P" & P(1, X) & "Con1ArmMotorised").Value = False
        End If
        If .Range("P" & P(1, X) & "Rm8Con1Hammer") = False Then
            Controls("P" & P(1, X) & "Con1Hammer").Value = False
        Else
            Controls("P" & P(1, X) & "Con1Hammer").Value = True
        End If
        If .Range("P" & P(1, X) & "Rm8Con1Vertical") = False Then
            Controls("P" & P(1, X) & "Con1Vertical").Value = False
        Else
            Controls("P" & P(1, X) & "Con1Vertical").Value = True
        End If
        If .Range("P" & P(1, X) & "Rm8Con1LMC") = False Then
            Controls("P" & P(1, X) & "Con1LMC").Value = False
        Else
            Controls("P" & P(1, X) & "Con1LMC").Value = True
        End If

        'Console 2
        If .Range("P" & P(1, X) & "Rm8Con2Hammer") = False Then
            Controls("P" & P(1, X) & "Con2Hammer").Value = False
        Else
            Controls("P" & P(1, X) & "Con2Hammer").Value = True
        End If
        If .Range("P" & P(1, X) & "Rm8Con2Vertical") = False Then
            Controls("P" & P(1, X) & "Con2Vertical").Value = False
        Else
            Controls("P" & P(1, X) & "Con2Vertical").Value = True
        End If
        If .Range("P" & P(1, X) & "Rm8Con2LMC") = False Then
            Controls("P" & P(1, X) & "Con2LMC").Value = False
        Else
            Controls("P" & P(1, X) & "Con2LMC").Value = True
        End If
        
   'Initialize outlets and data
        'Console 1
        Controls("P" & P(1, X) & "Con1ArmConfig").Value = .Range("P" & P(1, X) & "Rm8Con1ArmConfig")
        Controls("P" & P(1, X) & "Con1Console").Value = .Range("P" & P(1, X) & "Rm8Con1Console")
        Controls("Suction_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1Suction")
        Controls("MedAir_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1MedAir")
        Controls("CO2_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1CO2")
        Controls("N2O_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1N2O")
        Controls("Oxygen_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1Oxygen")
        Controls("ToolAir_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1ToolAir")
        Controls("Scavenge_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1Scavenge")
        Controls("UPS_Blue_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1UPS")
        Controls("ESS_Red_10Amp_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1ESS_10")
        Controls("ESS_Red_15Amp_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1ESS_15")
        Controls("ESS_Red_20Amp_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1ESS_20")
        Controls("PowerInd_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1Power")
        Controls("RCD_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1RCD")
        Controls("Earth_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1Earth")
        Controls("AV_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1AV")
        Controls("DataRun_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1DataRun")
        Controls("Dia68_P" & P(1, X) & "Con1").Value = .Range("P" & P(1, X) & "Rm8Con1Dia68")
        
        'Console 2
        Controls("P" & P(1, X) & "Con2Console").Value = .Range("P" & P(1, X) & "Rm8Con2Console")
        Controls("Suction_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2Suction")
        Controls("MedAir_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2MedAir")
        Controls("CO2_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2CO2")
        Controls("N2O_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2N2O")
        Controls("Oxygen_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2Oxygen")
        Controls("ToolAir_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2ToolAir")
        Controls("Scavenge_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2Scavenge")
        Controls("UPS_Blue_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2UPS")
        Controls("ESS_Red_10Amp_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2ESS_10")
        Controls("ESS_Red_15Amp_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2ESS_15")
        Controls("ESS_Red_20Amp_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2ESS_20")
        Controls("PowerInd_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2Power")
        Controls("RCD_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2RCD")
        Controls("Earth_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2Earth")
        Controls("AV_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2AV")
        Controls("DataRun_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2DataRun")
        Controls("Dia68_P" & P(1, X) & "Con2").Value = .Range("P" & P(1, X) & "Rm8Con2Dia68")
    
    'Initialize Comboboxes
        With Sheets("Variable")
            Set FindFirstPSoloDescRow = .Range("N:N").Find(What:="Pendant Solo", LookIn:=xlValues)
            Set FindLastPSoloDescRow = .Range("N:N").Find(What:="End of PSolo", LookIn:=xlValues)
            Set FindFirstPTandemDescRow = .Range("O:O").Find(What:="Pendant Tandem", LookIn:=xlValues)
            Set FindLastPTandemDescRow = .Range("O:O").Find(What:="End of PTandem", LookIn:=xlValues)
    
            'First and last row of default pendant descriptions
            firstPSoloDescRow = FindFirstPSoloDescRow.Row + 1
            lastPSoloDescRow = FindLastPSoloDescRow.Row - 1
            firstPTandemDescRow = FindFirstPTandemDescRow.Row + 1
            lastPTandemDescRow = FindLastPTandemDescRow.Row - 1
            
            'Dimension of Pendant Desc array
            size = lastPSoloDescRow - firstPSoloDescRow + 1
            ReDim PendantSoloDescription(size)
        
            'Initialize Pendant Solo Descriptions
            counter = 1
            For I = firstPSoloDescRow To lastPSoloDescRow
                'Get default Pendant Solo descriptions
                PendantSoloDescription(counter) = .Range("N" & I).Value
                counter = counter + 1
            Next I
            
            size = lastPTandemDescRow - firstPTandemDescRow + 1
            ReDim PendantTandemDescription(size)
        
            'Initialize Pendant Tandem Descriptions
            counter = 1
            For I = firstPTandemDescRow To lastPTandemDescRow
                'Get default Pendant Tandem descriptions
                PendantTandemDescription(counter) = .Range("O" & I).Value
                counter = counter + 1
            Next I
        End With
        
        With Sheets("StandardList")
            Set FindFirstArmConfigFSingleRow = .Range("D:D").Find(What:="F800", LookIn:=xlValues)
            Set FindLastArmConfigFSingleRow = .Range("D:D").Find(What:="F1200", LookIn:=xlValues)
            Set FindFirstArmConfigFDoubleRow = .Range("D:D").Find(What:="F800-F800", LookIn:=xlValues)
            Set FindLastArmConfigFDoubleRow = .Range("D:D").Find(What:="F1200-F1200", LookIn:=xlValues)
            Set FindFirstArmConfigTFDoubleRow = .Range("D:D").Find(What:="F800-F800, F800-F800", LookIn:=xlValues)
            Set FindLastArmConfigTFDoubleRow = .Range("D:D").Find(What:="Rev F1000-F1000, F1000-F1000", LookIn:=xlValues)
            Set FindFirstArmConfigMSingleRow = .Range("D:D").Find(What:="V800", LookIn:=xlValues)
            Set FindLastArmConfigMSingleRow = .Range("D:D").Find(What:="V1000", LookIn:=xlValues)
            Set FindFirstArmConfigMDoubleRow = .Range("D:D").Find(What:="F800-V750", LookIn:=xlValues)
            Set FindLastArmConfigMDoubleRow = .Range("D:D").Find(What:="F1200-V950", LookIn:=xlValues)
            Set FindFirstArmConfigTMDoubleRow = .Range("D:D").Find(What:="F800-V750, F800-F800", LookIn:=xlValues)
            Set FindLastArmConfigTMDoubleRow = .Range("D:D").Find(What:="F1000-V750, F1000-F1000", LookIn:=xlValues)
            Set FindFirstArmConfigICURow = .Range("D:D").Find(What:="F800-F800, F800-F800", LookIn:=xlValues)
            Set FindLastArmConfigICURow = .Range("D:D").Find(What:="Rev F1000-F1000, F1000-F1000", LookIn:=xlValues)
            Set FindFirstConsoleVerticalRow = .Range("D:D").Find(What:="L 530 x W 320 x D 356mm", LookIn:=xlValues)
            Set FindLastConsoleVerticalRow = .Range("D:D").Find(What:="L 1295 x W 320 x D 460mm", LookIn:=xlValues)
            Set FindFirstConsoleLMCRow = .Range("D:D").Find(What:="C30 Short Version", LookIn:=xlValues)
            Set FindLastConsoleLMCRow = .Range("D:D").Find(What:="C30 400x400", LookIn:=xlValues)
    
            'First and last row of Pendant Arm Configs
            firstArmConfigFSingleRow = FindFirstArmConfigFSingleRow.Row
            lastArmConfigFSingleRow = FindLastArmConfigFSingleRow.Row
            firstArmConfigFDoubleRow = FindFirstArmConfigFDoubleRow.Row
            lastArmConfigFDoubleRow = FindLastArmConfigFDoubleRow.Row
            firstArmConfigTFDoubleRow = FindFirstArmConfigTFDoubleRow.Row
            lastArmConfigTFDoubleRow = FindLastArmConfigTFDoubleRow.Row
            firstArmConfigMSingleRow = FindFirstArmConfigMSingleRow.Row
            lastArmConfigMSingleRow = FindLastArmConfigMSingleRow.Row
            firstArmConfigMDoubleRow = FindFirstArmConfigMDoubleRow.Row
            lastArmConfigMDoubleRow = FindLastArmConfigMDoubleRow.Row
            firstArmConfigTMDoubleRow = FindFirstArmConfigTMDoubleRow.Row
            lastArmConfigTMDoubleRow = FindLastArmConfigTMDoubleRow.Row
            firstArmConfigICURow = FindFirstArmConfigICURow.Row
            lastArmConfigICURow = FindLastArmConfigICURow.Row
            firstConsoleVerticalRow = FindFirstConsoleVerticalRow.Row
            lastConsoleVerticalRow = FindLastConsoleVerticalRow.Row
            firstConsoleLMCRow = FindFirstConsoleLMCRow.Row
            lastConsoleLMCRow = FindLastConsoleLMCRow.Row
            
            'Dimension of Pendant ArmConfigFSingle array
            size = lastArmConfigFSingleRow - firstArmConfigFSingleRow + 1
            ReDim ArmConfigFSingle(size)
        
            'Initialize ArmConfigFSingle
            counter = 1
            For I = firstArmConfigFSingleRow To lastArmConfigFSingleRow
                ArmConfigFSingle(counter) = .Range("D" & I).Value
                counter = counter + 1
            Next I
            
            'Dimension of Pendant ArmConfigFDouble array
            size = lastArmConfigFDoubleRow - firstArmConfigFDoubleRow + 1
            ReDim ArmConfigFDouble(size)
        
            'Initialize ArmConfigFDouble
            counter = 1
            For I = firstArmConfigFDoubleRow To lastArmConfigFDoubleRow
                ArmConfigFDouble(counter) = .Range("D" & I).Value
                counter = counter + 1
            Next I
            
            'Dimension of Pendant ArmConfigTFDouble array
            size = lastArmConfigTFDoubleRow - firstArmConfigTFDoubleRow + 1
            ReDim ArmConfigTFDouble(size)
        
            'Initialize ArmConfigTFDouble
            counter = 1
            For I = firstArmConfigTFDoubleRow To lastArmConfigTFDoubleRow
                ArmConfigTFDouble(counter) = .Range("D" & I).Value
                counter = counter + 1
            Next I
            
            'Dimension of Pendant ArmConfigMSingle array
            size = lastArmConfigMSingleRow - firstArmConfigMSingleRow + 1
            ReDim ArmConfigMSingle(size)
        
            'Initialize ArmConfigMSingle
            counter = 1
            For I = firstArmConfigMSingleRow To lastArmConfigMSingleRow
                ArmConfigMSingle(counter) = .Range("D" & I).Value
                counter = counter + 1
            Next I
            
            'Dimension of Pendant ArmConfigMDouble array
            size = lastArmConfigMDoubleRow - firstArmConfigMDoubleRow + 1
            ReDim ArmConfigMDouble(size)
        
            'Initialize ArmConfigMDouble
            counter = 1
            For I = firstArmConfigMDoubleRow To lastArmConfigMDoubleRow
                ArmConfigMDouble(counter) = .Range("D" & I).Value
                counter = counter + 1
            Next I

            'Dimension of Pendant ArmConfigTMDouble array
            size = lastArmConfigTMDoubleRow - firstArmConfigTMDoubleRow + 1
            ReDim ArmConfigTMDouble(size)
        
            'Initialize ArmConfigTMDouble
            counter = 1
            For I = firstArmConfigTMDoubleRow To lastArmConfigTMDoubleRow
                ArmConfigTMDouble(counter) = .Range("D" & I).Value
                counter = counter + 1
            Next I
            
            'Dimension of Pendant ArmConfigICU array
            size = lastArmConfigICURow - firstArmConfigICURow + 1
            ReDim ArmConfigICU(size)
        
            'Initialize ArmConfigICU
            counter = 1
            For I = firstArmConfigICURow To lastArmConfigICURow
                ArmConfigICU(counter) = .Range("D" & I).Value
                counter = counter + 1
            Next I
            
            'Dimension of ConsoleVertical array
            size = lastConsoleVerticalRow - firstConsoleVerticalRow + 1
            ReDim ConsoleVertical(size)
        
            'Initialize ConsoleVertical
            counter = 1
            For I = firstConsoleVerticalRow To lastConsoleVerticalRow
                ConsoleVertical(counter) = .Range("D" & I).Value
                counter = counter + 1
            Next I
            
            'Dimension of ConsoleLMC array
            size = lastConsoleLMCRow - firstConsoleLMCRow + 1
            ReDim ConsoleLMC(size)
        
            'Initialize ConsoleLMC
            counter = 1
            For I = firstConsoleLMCRow To lastConsoleLMCRow
                ConsoleLMC(counter) = .Range("D" & I).Value
                counter = counter + 1
            Next I
        End With
        
        ConsoleHammer(1) = "Hammer Head"
        
        Set FindFirstPAccRow = .Range(Rm8Range).Find(What:="Accessories - Pendants", LookIn:=xlValues)
        Set FindLastPAccRow = .Range(Rm8Range).Find(What:="End_Pendant", LookIn:=xlValues)
        
        'First and last row for Pendant Accessories
        firstPAccRow = FindFirstPAccRow.Row + 1
        lastPAccRow = FindLastPAccRow.Row - 1
          
        'Clear the Selected listbox first in case a std config is selected -> prevent doubling of line items
        Controls("Pendant" & P(1, X) & "AccSel").Clear
          
        counter = 0
        For I = firstPAccRow To lastPAccRow
            'Add non-zero quantity accessories into the Selected listbox, and its quantity into the relevant textbox
            If .Range(P(2, X) & I).Value > 0 And .Range(P(2, X) & I).Value <> "" Then
                Controls("Pendant" & P(1, X) & "AccSel").AddItem .Range("B" & I).Value
                Controls("P" & P(1, X) & "_Acc_Qty" & counter).Value = .Range(P(2, X) & I).Value
                counter = counter + 1
            End If
        Next I
    End With
    
    'Initialize checkboxes
    Controls("Pendant" & P(1, X) & "CBox2") = False
End Sub

Private Sub AmicoCategory()

With Sheets("Configurator")
    Set FindFirstConfigAmicoAccRow = .Range("B:B").Find(What:="Amico Accessories", LookIn:=xlValues)
    Set FindLastConfigAmicoAccRow = .Range("B:B").Find(What:="End_AmicoAcc", LookIn:=xlValues)

    'First and last row for Amico Accessories
    firstConfigAmicoAccRow = FindFirstConfigAmicoAccRow.Row + 3
    lastConfigAmicoAccRow = FindLastConfigAmicoAccRow.Row - 2
    
    'Hide/Unhide Amico Accessories objects
    If .Range("AmicoOptionRm8").Value = True Then
        Controls("AmicoYes").Value = True
        Controls("AmicoNo").Value = False
    Else
        Controls("AmicoYes").Value = False
        Controls("AmicoNo").Value = True
    End If

    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigAmicoAccRow & ":" & "B" & lastConfigAmicoAccRow)
        AmicoAcc.AddItem Cell.Value
    Next Cell
    
    counter = 0
    For I = firstConfigAmicoAccRow To lastConfigAmicoAccRow
        'Add non-zero quantity accessories into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("AmicoAccSel").AddItem .Range("B" & I).Value
            Controls("Amico_Acc_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I
End With

'Initialize checkboxes
Controls("AmicoAccCBox2").Value = False
End Sub

Private Sub AFCategory()

With Sheets("Configurator")

    'Hide/Unhide AF+IC objects
    If .Range("AFICOptionRm8").Value = True Then
        Controls("AF_IC_Yes").Value = True
        Controls("AF_IC_No").Value = False
    Else
        Controls("AF_IC_Yes").Value = False
        Controls("AF_IC_No").Value = True
    End If

    Set FindFirstConfigAFLEDRow = .Range("B:B").Find(What:="AirFRAME and LEDiffuser", LookIn:=xlValues)
    Set FindLastConfigAFLEDRow = .Range("B:B").Find(What:="Accessories - AF + IC", LookIn:=xlValues)
    
    Set FindFirstConfigAccRow = .Range("B:B").Find(What:="Accessories - AF + IC", LookIn:=xlValues)
    Set FindLastConfigAccRow = .Range("B:B").Find(What:="AirFRAME Indigo-Clean Lighting", LookIn:=xlValues)
    
    Set FindFirstConfigInGridRow = .Range("B:B").Find(What:="AirFRAME Indigo-Clean Lighting", LookIn:=xlValues)
    Set FindLastConfigInGridRow = .Range("B:B").Find(What:="Peripheral Lighting (Supply Only)", LookIn:=xlValues)

    Set FindFirstConfigIndCompRow = .Range("B:B").Find(What:="Peripheral Lighting (Supply Only)", LookIn:=xlValues)
    Set FindLastConfigIndCompRow = .Range("B:B").Find(What:="End_AFIC", LookIn:=xlValues)

    'First and last row for AirFRAME and LEDiffuser
    firstConfigAFLEDRow = FindFirstConfigAFLEDRow.Row + 1
    lastConfigAFLEDRow = FindLastConfigAFLEDRow.Row - 1
    
    'First and last row for Accessories
    firstConfigAccRow = FindFirstConfigAccRow.Row + 1
    lastConfigAccRow = FindLastConfigAccRow.Row - 1
    
    'First and last row for AirFRAME Lighting
    firstConfigInGridRow = FindFirstConfigInGridRow.Row + 1
    lastConfigInGridRow = FindLastConfigInGridRow.Row - 1
    
    'First and last row for Peripheral Lighting (Supply Only)
    firstConfigIndCompRow = FindFirstConfigIndCompRow.Row + 1
    lastConfigIndCompRow = FindLastConfigIndCompRow.Row - 2

    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigAFLEDRow & ":" & "B" & lastConfigAFLEDRow)
        AirFRAME_LEDiffuser.AddItem Cell.Value
    Next Cell

    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigAccRow & ":" & "B" & lastConfigAccRow)
        InfAccessories.AddItem Cell.Value
    Next Cell

    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigInGridRow & ":" & "B" & lastConfigInGridRow)
        In_GridIndigoClean.AddItem Cell.Value
    Next Cell
    
    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigIndCompRow & ":" & "B" & lastConfigIndCompRow)
        IndigoComponent.AddItem Cell.Value
    Next Cell
    
    'AF Crating costs
    With Sheets("Variable")
        Set FindFirstAFCratingRow = .Range("Q:Q").Find(What:="Crating", LookIn:=xlValues)
        Set FindLastAFCratingRow = .Range("Q:Q").Find(What:="End of Crating", LookIn:=xlValues)
                    
        'First and last row of crating per unit rates (cost USD)
        firstAFCratingRow = FindFirstAFCratingRow.Row + 1
        lastAFCratingRow = FindLastAFCratingRow.Row - 1
                        
        'Dimension of AF Crating array
        size = lastAFCratingRow - firstAFCratingRow + 1
        ReDim AFCrating(size)
                    
        'Initialize AF Crating costs
        counter = 1
        For I = firstAFCratingRow To lastAFCratingRow
            AFCrating(counter) = .Range("Q" & I).Value
            counter = counter + 1
        Next I
    End With
    
    counter = 0
    For I = firstConfigAFLEDRow To lastConfigAFLEDRow
        'Add non-zero quantity AirFRAME and LEDiffuser items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("AF_IC_Sel").AddItem .Range("B" & I).Value
            Controls("AF_IC_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I
    
    For I = firstConfigAccRow To lastConfigAccRow
        'Add non-zero quantity Accessories items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("AF_IC_Sel").AddItem .Range("B" & I).Value
            Controls("AF_IC_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I

    For I = firstConfigInGridRow To lastConfigInGridRow
        'Add non-zero quantity In-Grid Indigo-Clean items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("AF_IC_Sel").AddItem .Range("B" & I).Value
            Controls("AF_IC_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I
    
    For I = firstConfigIndCompRow To lastConfigIndCompRow
        'Add non-zero quantity Indigo Components items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("AF_IC_Sel").AddItem .Range("B" & I).Value
            Controls("AF_IC_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I
End With

'Initialize checkboxes
Controls("AF_IC_CBox2").Value = False
End Sub

Private Sub DICategory()

With Sheets("Configurator")

    'Hide/Unhide AF+IC objects
    If .Range("DIOptionRm8").Value = True Then
        Controls("DI_Yes").Value = True
        Controls("DI_No").Value = False
    Else
        Controls("DI_Yes").Value = False
        Controls("DI_No").Value = True
    End If
    
    'Find the relevevant rows in Configurator worksheet to add into the listboxes
    Set FindFirstConfigDISMRow = .Range("B:B").Find(What:="Surgical Monitor - DECODER INCLUDED", LookIn:=xlValues)
    Set FindLastConfigDISMRow = .Range("B:B").Find(What:="Wall Display - DECODER INCLUDED", LookIn:=xlValues)
    
    Set FindFirstConfigDIWDRow = .Range("B:B").Find(What:="Wall Display - DECODER INCLUDED", LookIn:=xlValues)
    Set FindLastConfigDIWDRow = .Range("B:B").Find(What:="Room Inputs - Encoders/Decoders", LookIn:=xlFormulas)
    
    Set FindFirstConfigDIRIRow = .Range("B:B").Find(What:="Room Inputs - Encoders/Decoders", LookIn:=xlFormulas)
    Set FindLastConfigDIRIRow = .Range("B:B").Find(What:="Touch Panel", LookIn:=xlFormulas)

    Set FindFirstConfigDITPRow = .Range("B:B").Find(What:="Touch Panel", LookIn:=xlFormulas)
    Set FindLastConfigDITPRow = .Range("B:B").Find(What:="Room Cameras", LookIn:=xlValues)
    
    Set FindFirstConfigDIRCRow = .Range("B:B").Find(What:="Room Cameras", LookIn:=xlValues)
    Set FindLastConfigDIRCRow = .Range("B:B").Find(What:="Room Audio", LookIn:=xlValues)
    
    Set FindFirstConfigDIAudioRow = .Range("B:B").Find(What:="Room Audio", LookIn:=xlValues)
    Set FindLastConfigDIAudioRow = .Range("B:B").Find(What:="Others & Accessories", LookIn:=xlValues)
    
    Set FindFirstConfigDIOtherAccRow = .Range("B:B").Find(What:="Others & Accessories", LookIn:=xlValues)
    Set FindLastConfigDIOtherAccRow = .Range("B:B").Find(What:="Fibre Trunk Cabling", LookIn:=xlValues)

    Set FindFirstConfigDICableRow = .Range("B:B").Find(What:="Fibre Trunk Cabling", LookIn:=xlValues)
    Set FindLastConfigDICableRow = .Range("B:B").Find(What:="Once Off per Facility", LookIn:=xlValues)

    'First and last row for Surgical Monitor
    firstConfigDISMRow = FindFirstConfigDISMRow.Row + 1
    lastConfigDISMRow = FindLastConfigDISMRow.Row - 1
    
    'First and last row for Wall Display
    firstConfigDIWDRow = FindFirstConfigDIWDRow.Row + 1
    lastConfigDIWDRow = FindLastConfigDIWDRow.Row - 1
    
    'First and last row for Room Inputs - Encoders/Decoders
    firstConfigDIRIRow = FindFirstConfigDIRIRow.Row + 1
    lastConfigDIRIRow = FindLastConfigDIRIRow.Row - 1
    
    'First and last row for Touch Panel
    firstConfigDITPRow = FindFirstConfigDITPRow.Row + 1
    lastConfigDITPRow = FindLastConfigDITPRow.Row - 1
    
    'First and last row for Room Cameras
    firstConfigDIRCRow = FindFirstConfigDIRCRow.Row + 1
    lastConfigDIRCRow = FindLastConfigDIRCRow.Row - 1
    
    'First and last row for Audio
    firstConfigDIAudioRow = FindFirstConfigDIAudioRow.Row + 1
    lastConfigDIAudioRow = FindLastConfigDIAudioRow.Row - 1
    
    'First and last row for Others & Accessories
    firstConfigDIOtherAccRow = FindFirstConfigDIOtherAccRow.Row + 1
    lastConfigDIOtherAccRow = FindLastConfigDIOtherAccRow.Row - 1
    
    'First and last row for Fibre Trunk Cabling
    firstConfigDICableRow = FindFirstConfigDICableRow.Row + 1
    lastConfigDICableRow = FindLastConfigDICableRow.Row - 1

    'Add the relevant rows into the listboxes
    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigDISMRow & ":" & "B" & lastConfigDISMRow)
        SurgicalMonitor.AddItem Cell.Value
    Next Cell

    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigDIWDRow & ":" & "B" & lastConfigDIWDRow)
        WallDisplay.AddItem Cell.Value
    Next Cell

    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigDIRIRow & ":" & "B" & lastConfigDIRIRow)
        Encoder_Decoder.AddItem Cell.Value
    Next Cell
    
    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigDITPRow & ":" & "B" & lastConfigDITPRow)
        TouchPanel.AddItem Cell.Value
    Next Cell
    
    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigDIRCRow & ":" & "B" & lastConfigDIRCRow)
        RoomCamera.AddItem Cell.Value
    Next Cell

    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigDIAudioRow & ":" & "B" & lastConfigDIAudioRow)
        Audio.AddItem Cell.Value
    Next Cell

    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigDIOtherAccRow & ":" & "B" & lastConfigDIOtherAccRow)
        Others_Acc.AddItem Cell.Value
    Next Cell
    
    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigDICableRow & ":" & "B" & lastConfigDICableRow)
        FibreCabling.AddItem Cell.Value
    Next Cell

    counter = 0
    For I = firstConfigDISMRow To lastConfigDISMRow
        'Add non-zero quantity Surgical Monitor items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("DI_Sel").AddItem .Range("B" & I).Value
            Controls("DI_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I
    
    For I = firstConfigDIWDRow To lastConfigDIWDRow
        'Add non-zero quantity Wall Display items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("DI_Sel").AddItem .Range("B" & I).Value
            Controls("DI_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I

    For I = firstConfigDIRIRow To lastConfigDIRIRow
        'Add non-zero quantity Room Inputs - Encoders/Decoders items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("DI_Sel").AddItem .Range("B" & I).Value
            Controls("DI_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I
    
    For I = firstConfigDITPRow To lastConfigDITPRow
        'Add non-zero quantity Touch Panel items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("DI_Sel").AddItem .Range("B" & I).Value
            Controls("DI_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I
    
    For I = firstConfigDIRCRow To lastConfigDIRCRow
        'Add non-zero quantity Room Cameras items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("DI_Sel").AddItem .Range("B" & I).Value
            Controls("DI_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I
    
    For I = firstConfigDIAudioRow To lastConfigDIAudioRow
        'Add non-zero quantity Audio items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("DI_Sel").AddItem .Range("B" & I).Value
            Controls("DI_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I

    For I = firstConfigDIOtherAccRow To lastConfigDIOtherAccRow
        'Add non-zero quantity Others & Accessories items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("DI_Sel").AddItem .Range("B" & I).Value
            Controls("DI_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I
    
    For I = firstConfigDICableRow To lastConfigDICableRow
        'Add non-zero quantity Fibre Trunk Cabling items into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("DI_Sel").AddItem .Range("B" & I).Value
            Controls("DI_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I
End With

'Initialize checkboxes
Controls("DI_CBox2").Value = False
End Sub

Private Sub SlingCategory()

With Sheets("Configurator")
    Set FindFirstConfigSlingRow = .Range("B:B").Find(What:="Slings", LookIn:=xlValues)
    Set FindLastConfigSlingRow = .Range("B:B").Find(What:="End_Sling", LookIn:=xlValues)
                
    'First and last row for Amico Accessories
    firstConfigSlingRow = FindFirstConfigSlingRow.Row + 3
    lastConfigSlingRow = FindLastConfigSlingRow.Row - 2
                
    'Hide/Unhide Amico Accessories objects
    If .Range("SlingOptionRm8").Value = True Then
        Controls("SlingYes").Value = True
        Controls("SlingNo").Value = False
    Else
        Controls("SlingYes").Value = False
        Controls("SlingNo").Value = True
    End If
                
    For Each Cell In Worksheets("Configurator").Range("B" & firstConfigSlingRow & ":" & "B" & lastConfigSlingRow)
        Sling.AddItem Cell.Value
    Next Cell
                
    counter = 0
    For I = firstConfigSlingRow To lastConfigSlingRow
        'Add non-zero quantity accessories into the Selected listbox, and its quantity into the relevant textbox
        If .Range("J" & I).Value > 0 And .Range("J" & I).Value <> "" Then
            Controls("SlingSel").AddItem .Range("B" & I).Value
            Controls("Sling_Qty" & counter).Value = .Range("J" & I).Value
            counter = counter + 1
        End If
    Next I
End With

'Initialize checkboxes
Controls("SlingCBox2").Value = False
End Sub

Private Sub PNoteCategory()

With Sheets("Configurator")

    'Hide/Unhide Amico Accessories objects
    If .Range("PNoteOptionRm8").Value = True Then
        Controls("PNoteYes").Value = True
        Controls("PNoteNo").Value = False
    Else
        Controls("PNoteYes").Value = False
        Controls("PNoteNo").Value = True
    End If

    'Add non-blank content add into the textbox
    If .Range("PNoteRm8").Value <> "" Then
        Controls("PNoteContent").Value = .Range("PNoteRm8").Value
    End If
End With
End Sub
'
'PURPOSE: Make sure users can only enter integers for Qty textboxes (Room)
'
Private Sub Room8No_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub

'
'PURPOSE: Make sure users can only enter integers for Qty textboxes (Light)
'
Private Sub LightNo_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub Light1No_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub Light2No_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub Light3No_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub Light4No_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub Light5No_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub

'
'PURPOSE: Make sure users can only enter integers for Qty textboxes (Pendant)
'
Private Sub PendantNo_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub Pendant1No_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub Pendant2No_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub Pendant3No_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub Pendant4No_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
Private Sub Pendant5No_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
      Case vbKey0 To vbKey9
      Case Else
        KeyAscii = 0
        Beep
    End Select
End Sub
'
'PURPOSE: Make sure users can only enter integers for Qty textboxes (Pendant)
'
Private Sub OKButtonInactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Save Button appear Blue when hovered on
  CancelButtonInactive.Visible = True
  OKButtonInactive.Visible = False
End Sub
Private Sub CancelButtonInactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Close Button appear Blue when hovered on
    CancelButtonInactive.Visible = False
    OKButtonInactive.Visible = True
End Sub
'Private Sub ClearButtonInactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
''PURPOSE: Make Clear Button appear Blue when hovered on
'    CancelButtonInactive.Visible = True
'    OKButtonInactive.Visible = True
'End Sub
Private Sub ClearButtonL1_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonL1_Inactive.Visible = False
End Sub
Private Sub ClearButtonL2_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonL2_Inactive.Visible = False
End Sub
Private Sub ClearButtonL3_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonL3_Inactive.Visible = False
End Sub
Private Sub ClearButtonL4_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonL4_Inactive.Visible = False
End Sub
Private Sub ClearButtonL5_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonL5_Inactive.Visible = False
End Sub
Private Sub ClearButtonP1_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonP1_Inactive.Visible = False
End Sub
Private Sub ClearButtonP2_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonP2_Inactive.Visible = False
End Sub
Private Sub ClearButtonP3_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonP3_Inactive.Visible = False
End Sub
Private Sub ClearButtonP4_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonP4_Inactive.Visible = False
End Sub
Private Sub ClearButtonP5_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonP5_Inactive.Visible = False
End Sub
Private Sub ClearButtonAccessories_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonAccessories_Inactive.Visible = False
End Sub
Private Sub ClearButtonAFIC_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonAFIC_Inactive.Visible = False
End Sub
Private Sub ClearButtonInt_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonInt_Inactive.Visible = False
End Sub
Private Sub ClearButtonSling_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonSling_Inactive.Visible = False
End Sub
Private Sub ClearButtonPNote_Inactive_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Make Clear Button appear Blue when hovered on
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True
    ClearButtonPNote_Inactive.Visible = False
End Sub
Private Sub Userform_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PURPOSE: Reset Userform buttons to Inactive Status
    CancelButtonInactive.Visible = True
    OKButtonInactive.Visible = True

    'Other Clear buttons
    ClearButtonL1_Inactive.Visible = True
    ClearButtonL2_Inactive.Visible = True
    ClearButtonL3_Inactive.Visible = True
    ClearButtonL4_Inactive.Visible = True
    ClearButtonL5_Inactive.Visible = True
    ClearButtonP1_Inactive.Visible = True
    ClearButtonP2_Inactive.Visible = True
    ClearButtonP3_Inactive.Visible = True
    ClearButtonP4_Inactive.Visible = True
    ClearButtonP5_Inactive.Visible = True
    ClearButtonAccessories_Inactive.Visible = True
    ClearButtonAFIC_Inactive.Visible = True
    ClearButtonInt_Inactive.Visible = True
    ClearButtonSling_Inactive.Visible = True
    ClearButtonPNote_Inactive.Visible = True
End Sub